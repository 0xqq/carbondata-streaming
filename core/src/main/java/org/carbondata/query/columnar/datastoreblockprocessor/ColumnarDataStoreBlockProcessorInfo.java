/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.carbondata.query.columnar.datastoreblockprocessor;

import org.carbondata.core.datastorage.store.FileHolder;

public class ColumnarDataStoreBlockProcessorInfo {
  /**
   * measureIndexes
   */
  private int[] measureIndexes;

  /**
   * dimensionIndexes
   */
  private int[] dimensionIndexes;

  /**
   * keySize
   */
  private int keySize;

  /**
   * fileHolder
   */
  private FileHolder fileHolder;

  /**
   * isAutoGeneratedAggTableExecution
   */
  private boolean isAutoGeneratedAggTableExecution;

  /**
   * totalNumberOfMeasures
   */
  private int totalNumberOfMeasures;

  /**
   * isUniqueBlock
   */
  private boolean[] isUniqueBlock;

  /**
   * numberOfDimension
   */
  private int totalNumberOfDimension;

  /**
   * allSelectedDimensions
   */
  private int[] allSelectedDimensions;

  /**
   * allSelectedMeasures
   */
  private int[] allSelectedMeasures;

  /**
   * @return the measureIndexes
   */
  public int[] getMeasureIndexes() {
    return measureIndexes;
  }

  /**
   * @param measureIndexes the measureIndexes to set
   */
  public void setMeasureIndexes(int[] measureIndexes) {
    this.measureIndexes = measureIndexes;
  }

  /**
   * @return the dimensionIndexes
   */
  public int[] getDimensionIndexes() {
    return dimensionIndexes;
  }

  /**
   * @param dimensionIndexes the dimensionIndexes to set
   */
  public void setDimensionIndexes(int[] dimensionIndexes) {
    this.dimensionIndexes = dimensionIndexes;
  }

  /**
   * @return the fileHolder
   */
  public FileHolder getFileHolder() {
    return fileHolder;
  }

  /**
   * @param fileHolder the fileHolder to set
   */
  public void setFileHolder(FileHolder fileHolder) {
    this.fileHolder = fileHolder;
  }

  /**
   * @return the keySize
   */
  public int getKeySize() {
    return keySize;
  }

  /**
   * @param keySize the keySize to set
   */
  public void setKeySize(int keySize) {
    this.keySize = keySize;
  }

  public boolean isAutoGeneratedAggTableExecution() {
    return isAutoGeneratedAggTableExecution;
  }

  public void setAutoGeneratedAggTableExecution(boolean isAutoGeneratedAggTableExecution) {
    this.isAutoGeneratedAggTableExecution = isAutoGeneratedAggTableExecution;
  }

  public int getTotalNumberOfMeasures() {
    return totalNumberOfMeasures;
  }

  public void setTotalNumberOfMeasures(int totalNumberOfMeasures) {
    this.totalNumberOfMeasures = totalNumberOfMeasures;
  }

  public boolean[] getIsUniqueBlock() {
    return isUniqueBlock;
  }

  public void setIsUniqueBlock(boolean[] isUniqueBlock) {
    this.isUniqueBlock = isUniqueBlock;
  }

  public int[] getAllSelectedDimensions() {
    return allSelectedDimensions;
  }

  public void setAllSelectedDimensions(int[] allSelectedDimensions) {
    this.allSelectedDimensions = allSelectedDimensions;
  }

  public int getTotalNumberOfDimension() {
    return totalNumberOfDimension;
  }

  public void setTotalNumberOfDimension(int totalNumberOfDimension) {
    this.totalNumberOfDimension = totalNumberOfDimension;
  }

  public int[] getAllSelectedMeasures() {
    return allSelectedMeasures;
  }

  public void setAllSelectedMeasures(int[] allSelectedMeasures) {
    this.allSelectedMeasures = allSelectedMeasures;
  }
}
