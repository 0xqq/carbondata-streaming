diff --git a/Molap/Molap-Core/src/com/huawei/unibi/molap/constants/MolapCommonConstants.java b/Molap/Molap-Core/src/com/huawei/unibi/molap/constants/MolapCommonConstants.java
index 6ca8adc..20eb521 100644
--- a/Molap/Molap-Core/src/com/huawei/unibi/molap/constants/MolapCommonConstants.java
+++ b/Molap/Molap-Core/src/com/huawei/unibi/molap/constants/MolapCommonConstants.java
@@ -1542,10 +1542,15 @@ public final class MolapCommonConstants
 
 	public static final String IS_FORCED_IN_MEMORY_CUBE_DEFAULT_VALUE="false";
 	
-	/**
-	 * UPDATING_METADATA 
-	 */
-	public static final String  UPDATING_METADATA = ".tmp";
+	public static final int MILLIS_SECONDS=1000;     
+	public static final int MILLIS_MINUTE=1000*60; 
+	public static final int MILLIS_HOUR=1000*60*60; 
+	public static final int MILLIS_DAY=1000*60*60*24; 
+     
+	public static final String TIME_GRAN_SEC="SECOND";
+	public static final String TIME_GRAN_MIN="MINUTE";
+	public static final String TIME_GRAN_HOUR="HOUR";
+	public static final String TIME_GRAN_DAY="DAY";
     /**
      * LOADCUBE_STARTUP.
      */
@@ -1555,6 +1560,12 @@ public final class MolapCommonConstants
      */
     public static final String LOADCUBE_DATALOAD="molap.is.loadcube.dataload";
     
+   /**
+	 * UPDATING_METADATA 
+	 */
+	public static final String  UPDATING_METADATA = ".tmp";
+    
+    
     /**
      * sort index file extension
      */
diff --git a/Molap/Molap-Core/src/com/huawei/unibi/molap/metadata/MolapMetadata.java b/Molap/Molap-Core/src/com/huawei/unibi/molap/metadata/MolapMetadata.java
index 88bb6b7..7c33a44 100644
--- a/Molap/Molap-Core/src/com/huawei/unibi/molap/metadata/MolapMetadata.java
+++ b/Molap/Molap-Core/src/com/huawei/unibi/molap/metadata/MolapMetadata.java
@@ -561,6 +561,7 @@ public final class MolapMetadata
             
             dimension.setNameColumnIndex(getNameColumnIndexInSchemaOrder(levHolder, levelList));
             dimension.setPropertyIndexes(getPropertyColumnIndexes(levHolder, levelList));
+            dimension.setDirectSurrogate(lev.directSurogate && "Timestamp".equals(lev.type));            
             updateDimensionWithHighCardinalityVal(dimension,schema.cubes[0].dimensions);
             
             // Update properties and its data types in dimension
@@ -1551,6 +1552,7 @@ public final class MolapMetadata
          */
         protected int queryOrder;
         
+        private boolean directSurrogate;
         /**
          * parentName
          */
@@ -1606,6 +1608,16 @@ public final class MolapMetadata
             return dimName;
         }
 
+        public void setDirectSurrogate(boolean b)
+        {
+           this.directSurrogate=b;
+        }
+        
+        public boolean isDirectSurrogate()
+        {
+           return directSurrogate;
+        }
+
         /**
          * 
          * @param highCardinalityDim
@@ -1748,6 +1760,7 @@ public final class MolapMetadata
             copy.actualTableName=this.actualTableName;
             copy.isQueryForDistinctCount=this.isQueryForDistinctCount;
             copy.queryOrder=queryOrder;
+            copy.directSurrogate=directSurrogate;
             return copy;
         }
 
diff --git a/Molap/Molap-Core/src/com/huawei/unibi/molap/olap/MolapDef.java b/Molap/Molap-Core/src/com/huawei/unibi/molap/olap/MolapDef.java
index b0f49f6..58af643 100644
--- a/Molap/Molap-Core/src/com/huawei/unibi/molap/olap/MolapDef.java
+++ b/Molap/Molap-Core/src/com/huawei/unibi/molap/olap/MolapDef.java
@@ -1365,6 +1365,7 @@ public boolean isEnabled() {
                 isParent = (Boolean)_parser.getAttribute("isParent", "Boolean", "true", null, false);
                 caption = (String)_parser.getAttribute("caption", "String", null, null, false);
                 description = (String)_parser.getAttribute("description", "String", null, null, false);
+                directSurogate = (Boolean)_parser.getAttribute("directSurogate", "Boolean", "false", null, false);
                 captionColumn = (String)_parser.getAttribute("captionColumn", "String", null, null, false);
                 annotations = (Annotations)_parser.getElement(Annotations.class, false);
                 keyExp = (KeyExpression)_parser.getElement(KeyExpression.class, false);
@@ -1416,6 +1417,7 @@ public boolean isEnabled() {
         public String caption;  // optional attribute
         public String description;  // optional attribute
         public String captionColumn;  // optional attribute
+        public boolean directSurogate; // optional attribute
 
         /**
          * Contains values of user-defined properties.
@@ -1483,6 +1485,7 @@ public boolean isEnabled() {
             displayAttribute(_out, "isParent", isParent, _indent+1);
             displayAttribute(_out, "caption", caption, _indent+1);
             displayAttribute(_out, "description", description, _indent+1);
+            displayAttribute(_out, "directSurogate", description, _indent+1);
             displayAttribute(_out, "captionColumn", captionColumn, _indent+1);
             displayElement(_out, "annotations", (org.eigenbase.xom.ElementDef) annotations, _indent+1);
             displayElement(_out, "keyExp", (org.eigenbase.xom.ElementDef) keyExp, _indent+1);
@@ -1521,6 +1524,7 @@ public boolean isEnabled() {
                 .add("isParent", isParent)
                 .add("caption", caption)
                 .add("description", description)
+                .add("directSurogate", directSurogate)
                 .add("captionColumn", captionColumn)
                 );
             displayXMLElement(_out, (org.eigenbase.xom.ElementDef) annotations);
@@ -1561,6 +1565,7 @@ public boolean isEnabled() {
             _diff = _diff && displayAttributeDiff("isParent", isParent, _cother.isParent, _out, _indent+1);
             _diff = _diff && displayAttributeDiff("caption", caption, _cother.caption, _out, _indent+1);
             _diff = _diff && displayAttributeDiff("description", description, _cother.description, _out, _indent+1);
+            _diff = _diff && displayAttributeDiff("directSurogate", directSurogate, _cother.directSurogate, _out, _indent+1);
             _diff = _diff && displayAttributeDiff("captionColumn", captionColumn, _cother.captionColumn, _out, _indent+1);
             _diff = _diff && displayElementDiff("annotations", annotations, _cother.annotations, _out, _indent+1);
             _diff = _diff && displayElementDiff("keyExp", keyExp, _cother.keyExp, _out, _indent+1);
diff --git a/Molap/Molap-Core/src/com/huawei/unibi/molap/util/MolapUtil.java b/Molap/Molap-Core/src/com/huawei/unibi/molap/util/MolapUtil.java
index 24dd8a8..44d242e 100644
--- a/Molap/Molap-Core/src/com/huawei/unibi/molap/util/MolapUtil.java
+++ b/Molap/Molap-Core/src/com/huawei/unibi/molap/util/MolapUtil.java
@@ -29,15 +29,20 @@ import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.security.PrivilegedExceptionAction;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.Date;
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+import org.apache.spark.sql.columnar.TIMESTAMP;
+
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.pentaho.di.core.exception.KettleException;
@@ -110,9 +115,56 @@ public final class MolapUtil
      * HUNDRED
      */
     private static final int CONST_HUNDRED = 100;
+
+    private static final Configuration conf= new Configuration(true);
     
+    public static long granularityFactor;
     
-    private static final Configuration conf= new Configuration(true);
+    public static long cutOffTimeStamp;
+    
+    static 
+    {
+        String cutOffTimeStampString=MolapProperties.getInstance().getProperty("molap.cutOffTimestamp");
+        String timeGranularity=MolapProperties.getInstance().getProperty("molap.timegranularity","");
+        granularityFactor=1000;
+        
+        switch (timeGranularity) 
+        {
+        case MolapCommonConstants.TIME_GRAN_SEC:
+            granularityFactor = MolapCommonConstants.MILLIS_SECONDS;
+            break;
+        case MolapCommonConstants.TIME_GRAN_MIN:
+            granularityFactor = MolapCommonConstants.MILLIS_MINUTE;
+            break;
+        case MolapCommonConstants.TIME_GRAN_HOUR:
+            granularityFactor = MolapCommonConstants.MILLIS_HOUR;
+            break;
+        case MolapCommonConstants.TIME_GRAN_DAY:
+            granularityFactor = MolapCommonConstants.MILLIS_DAY;
+        default:
+            granularityFactor=1000;
+        }
+        if(null==cutOffTimeStampString)
+        {
+            cutOffTimeStamp=-1;
+        }
+        else
+        {
+             try
+             {
+                 SimpleDateFormat timeParser = new SimpleDateFormat(MolapProperties.getInstance().
+                         getProperty(MolapCommonConstants.MOLAP_TIMESTAMP_FORMAT,
+                                 MolapCommonConstants.MOLAP_TIMESTAMP_DEFAULT_FORMAT));
+                 Date dateToStr = timeParser.parse(cutOffTimeStampString);
+                 cutOffTimeStamp=dateToStr.getTime();
+             }
+             catch(ParseException e)
+             {
+                 LOGGER.error(MolapCoreLogEvent.UNIBI_MOLAPCORE_MSG, "Cannot convert" + TIMESTAMP.toString() + " to Time/Long type value"+e.getMessage());
+                 cutOffTimeStamp=-1;
+             }
+        }
+    }
     
     private MolapUtil()
     {
diff --git a/Molap/Molap-Core/src/com/huawei/unibi/molap/writer/LevelValueWriter.java b/Molap/Molap-Core/src/com/huawei/unibi/molap/writer/LevelValueWriter.java
index f87d47a..ba58ac0 100644
--- a/Molap/Molap-Core/src/com/huawei/unibi/molap/writer/LevelValueWriter.java
+++ b/Molap/Molap-Core/src/com/huawei/unibi/molap/writer/LevelValueWriter.java
@@ -82,6 +82,7 @@ public class LevelValueWriter
      * counter the number of files.
      */
     private int counter;
+    private boolean isDirectSurrogate;
     
     /**
      * 
@@ -311,6 +312,10 @@ public class LevelValueWriter
     public void writeIntoLevelFile(String value, int key, Object[] properties)
             throws KettleException 
     {
+        if(isDirectSurrogate)
+        {
+            return;
+        }
         if(!intialized)
         {
             intialize();
@@ -603,5 +608,11 @@ public class LevelValueWriter
     {
         return counter;
     }
+
+    public void setDirectSurrogate(boolean b)
+    {
+        this.isDirectSurrogate=b;
+    }
+
 }
 
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/DataRetentionHandler.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/DataRetentionHandler.java
index fdc8be5..59ef1c5 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/DataRetentionHandler.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/DataRetentionHandler.java
@@ -1,6 +1,7 @@
 package com.huawei.unibi.molap.dataprocessor.dataretention;
 
 import java.io.IOException;
+import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -85,6 +86,8 @@ public class DataRetentionHandler
 	private List<LoadMetadataDetails> listOfLoadMetadataDetails;
 
 	private String dimensionTableName;
+ 
+    private int retentionTimestamp;
 
     /**
      * 
@@ -110,6 +113,30 @@ public class DataRetentionHandler
         this.currentRestructNumber = currentRestructNum;
         this.listOfLoadMetadataDetails=listOfLoadMetadataDetails;
         this.dimensionTableName=dimensionTableName;
+        this.loadFiles = MolapDataRetentionUtil.getAllLoadFolderSlices(
+ 				schemaName, cubeName, tableName, this.hdsfStoreLocation, currentRestructNum);
+        try 
+		{
+			long retentionTimeInLong = MolapDataRetentionUtil
+					.convertToDateObjectFromStringVal(columnValue, dateFormat,
+							false).getTime();
+			if(MolapUtil.cutOffTimeStamp>=0)
+			{
+				retentionTimestamp=(int) ((retentionTimeInLong-MolapUtil.cutOffTimeStamp)/MolapUtil.granularityFactor);
+			}
+			else
+			{
+				retentionTimestamp=(int) (retentionTimeInLong/MolapUtil.granularityFactor);
+			}
+		}
+		catch (ParseException e)
+		{
+			LOGGER.error(
+					MolapDataProcessorLogEvent.UNIBI_MOLAPDATAPROCESSOR_MSG, e,
+					"Not able to get surrogate key for value : "
+							+ columnValue);
+			retentionTimestamp=0;
+		}
     }
 
     /**
@@ -510,7 +537,10 @@ public class DataRetentionHandler
                     try
                     {
                         surrKey = (int)storeTupleSurrogates[surrogateKeyIndex];
-                        res = retentionSurrogateKeyMap.get(surrKey);
+                        if(surrKey<retentionTimestamp)
+                        {
+                          res=0;
+                        }
                     }
                     catch(Exception e)
                     {
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/MolapDataRetentionUtil.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/MolapDataRetentionUtil.java
index 502287f..f0b7608 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/MolapDataRetentionUtil.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/dataprocessor/dataretention/MolapDataRetentionUtil.java
@@ -157,7 +157,7 @@ public final class MolapDataRetentionUtil
     }
 
     @SuppressWarnings("deprecation")
-    private static Date convertToDateObjectFromStringVal(String value,
+    public static Date convertToDateObjectFromStringVal(String value,
             String dateFormatVal, boolean isUserInPut) throws ParseException
     {
 
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/graphgenerator/GraphGenerator.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/graphgenerator/GraphGenerator.java
index 6207ad7..bbeb9ac 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/graphgenerator/GraphGenerator.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/graphgenerator/GraphGenerator.java
@@ -1586,6 +1586,8 @@ public class GraphGenerator
                 seqMeta.setCheckPointFileExits("true");
             }
         }
+        
+        seqMeta.setDirectSurrogateLevels(MolapSchemaParser.getDirectSurrogateLevelString(cube));
         // seqMeta.setMolapSchema(schemaFilePath);
         StepMeta mdkeyStepMeta = new StepMeta(
                 GraphGeneratorConstants.MOLAP_SURROGATE_KEY_GENERATOR,
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/schema/metadata/MolapInfo.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/schema/metadata/MolapInfo.java
index b59867e..3e99af2 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/schema/metadata/MolapInfo.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/schema/metadata/MolapInfo.java
@@ -18,10 +18,12 @@ IFxnp1UaynzQQVjhgAilK+hLngrHx4DN6a5asFjLWPZXFyAdZ8geizF3zyuX3A==*/
  */
 package com.huawei.unibi.molap.schema.metadata;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import com.huawei.unibi.molap.constants.MolapCommonConstants;
 import com.huawei.datasight.molap.datatypes.GenericDataType;
 import com.huawei.unibi.molap.keygenerator.KeyGenerator;
 
@@ -157,6 +159,11 @@ public class MolapInfo
     
     private String schemaName;
     
+    private Object[] directSurrogateLevelNames;
+    
+    private Object[] directSurrogateLevelsIndex;
+    /**
+    
     private Map<String,GenericDataType> complexTypesMap;
     
 	public Map<String, GenericDataType> getComplexTypesMap() {
@@ -635,4 +642,37 @@ public class MolapInfo
         this.schemaName = schemaName;
     }
 
+	public void setDirectSurrogateLevels(String directSurrogateLevels)
+	{
+		List<String> directSurrogateLevelNamesList = new ArrayList<String>(MolapCommonConstants.CONSTANT_SIZE_TEN);
+		List<Integer> directSurrogateLevelIndexList = new ArrayList<Integer>(MolapCommonConstants.CONSTANT_SIZE_TEN);
+		if(null!=directSurrogateLevels)
+		{
+			String[] str=directSurrogateLevels.split(MolapCommonConstants.COLON_SPC_CHARACTER);
+			int j=0;
+			for(int i=0;i<str.length-1;i++)
+			{
+				directSurrogateLevelNamesList.add(str[i]);
+				directSurrogateLevelIndexList.add(Integer.parseInt(str[++i]));
+			}
+			directSurrogateLevelNames=directSurrogateLevelNamesList.toArray();
+			directSurrogateLevelsIndex=directSurrogateLevelIndexList.toArray();
+		}
+		else
+		{
+			directSurrogateLevelNames=new String[0];
+			directSurrogateLevelsIndex=new Integer[0];
+		}
+	}
+
+	public Object[] getDirectSurrogateLevelNames()
+	{
+		return directSurrogateLevelNames;
+	}
+
+	public Object[] getDirectSurrogateLevelsIndex()
+	{
+		return directSurrogateLevelsIndex;
+	}
+
 }
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/FileStoreSurrogateKeyGenForCSV.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/FileStoreSurrogateKeyGenForCSV.java
index 902a4c9..c78dd2a 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/FileStoreSurrogateKeyGenForCSV.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/FileStoreSurrogateKeyGenForCSV.java
@@ -151,6 +151,10 @@ public class FileStoreSurrogateKeyGenForCSV extends MolapCSVBasedDimSurrogateKey
                     + MolapCommonConstants.LEVEL_FILE_EXTENSION;
             dimensionWriter[i] = new LevelValueWriter(dimFileName,
                     getStoreFolderWithLoadNumber());
+            if(isDirectSurrogateLevel(molapInfo,dimInsertFileNames[i]))
+            {
+            	dimensionWriter[i].setDirectSurrogate(true);
+            }
             FileData fileData = new FileData(dimFileName,
                     getStoreFolderWithLoadNumber());
             fileData.setLevelValueWriter(dimensionWriter[i]);
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedDimSurrogateKeyGen.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedDimSurrogateKeyGen.java
index d99a45c..7d754eb 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedDimSurrogateKeyGen.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedDimSurrogateKeyGen.java
@@ -23,8 +23,11 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.io.File;
 import java.io.OutputStream;
 import java.sql.Connection;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -33,18 +36,21 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
+import org.apache.spark.sql.columnar.TIMESTAMP;
 import org.pentaho.di.core.exception.KettleException;
 
 import com.huawei.datasight.molap.datatypes.GenericDataType;
 import com.huawei.iweb.platform.logging.LogService;
 import com.huawei.iweb.platform.logging.LogServiceFactory;
 import com.huawei.unibi.molap.constants.MolapCommonConstants;
+import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
 import com.huawei.unibi.molap.file.manager.composite.FileData;
 import com.huawei.unibi.molap.file.manager.composite.IFileManagerComposite;
 import com.huawei.unibi.molap.keygenerator.KeyGenException;
 import com.huawei.unibi.molap.schema.metadata.ArrayWrapper;
 import com.huawei.unibi.molap.schema.metadata.MolapInfo;
 import com.huawei.unibi.molap.util.MolapDataProcessorLogEvent;
+import com.huawei.unibi.molap.util.MolapProperties;
 import com.huawei.unibi.molap.util.MolapUtil;
 import com.huawei.unibi.molap.writer.HierarchyValueWriterForCSV;
 import com.huawei.unibi.molap.writer.LevelValueWriter;
@@ -247,7 +253,7 @@ public abstract class MolapCSVBasedDimSurrogateKeyGen
 //          tuples = MolapCommonConstants.MEMBER_DEFAULT_VAL;
 //      }
             
-        
+    	
         Integer key = null;
         Map<String, Integer> cache = memberCache.get(columnNames);
 
@@ -270,8 +276,45 @@ public abstract class MolapCSVBasedDimSurrogateKeyGen
 //                                         + molapInfo.getDimColNames()[index]+ ": MemberValue: "+tuples) ;
 //                         return -1;
 //                     }
-                     key = getSurrogateFromStore(tuples, index, props);
-                     cache.put(tuples, key);
+                	 if(isDirectSurrogateLevel(molapInfo, columnNames) && !MolapCommonConstants.MEMBER_DEFAULT_VAL.equals(tuples) && null!=tuples)
+                	 {
+                		 SimpleDateFormat timeParser = new SimpleDateFormat(MolapProperties.getInstance().
+                	                getProperty(MolapCommonConstants.MOLAP_TIMESTAMP_FORMAT,
+                	                        MolapCommonConstants.MOLAP_TIMESTAMP_DEFAULT_FORMAT));
+                		 Date dateToStr=null;
+                		 try
+                         {
+                			 dateToStr = timeParser.parse(tuples);
+                         }
+                         catch(ParseException e)
+                         {
+                             LOGGER.error(MolapEngineLogEvent.UNIBI_MOLAPENGINE_MSG, "Cannot convert" + TIMESTAMP.toString() + " to Time/Long type value"+e.getMessage());
+                         }
+                		 if(null==dateToStr)
+                		 {
+                			 key=1;
+                		 }
+                		 else
+                		 {
+	                		 if(MolapUtil.cutOffTimeStamp>=0)
+	                		 {
+	                			 key=(int) ((dateToStr.getTime()-MolapUtil.cutOffTimeStamp)/MolapUtil.granularityFactor);
+	                		 }
+	                		 else
+	                		 {
+	                			 key=(int) (dateToStr.getTime()/MolapUtil.granularityFactor);
+	                		 }
+                		 }
+                		 if(max[index]<key)
+                		 {
+                			 max[index]=key;
+                		 }
+                	 }
+                	 else
+                	 {
+                		 key = getSurrogateFromStore(tuples, index, props);
+                		 cache.put(tuples, key);
+                	 }
                  }
             }   
             
@@ -279,6 +322,18 @@ public abstract class MolapCSVBasedDimSurrogateKeyGen
         return key;
     }
     
+    protected boolean isDirectSurrogateLevel(MolapInfo molapInfo, String string)
+	{
+		for (Object s : molapInfo.getDirectSurrogateLevelNames())
+		{
+			if (((String) s).equals(string)) 
+			{
+				return true;
+			}
+		}
+		return false;
+	}
+    
     /**
      * 
      * 
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenMeta.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenMeta.java
index 0bf8c60..0f846ec 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenMeta.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenMeta.java
@@ -458,6 +458,8 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
     protected Map<String, String> foreignKeyPrimaryKeyMap;
     
     private int currentRestructNumber;
+	private String directSurrogateLevels;
+    
 
     public void setMolapMetaHier(String molapMetaHier)
     {
@@ -752,6 +754,7 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
 		checkPointFileExits="";
 		denormColumNames="";
 		currentRestructNumber = -1;
+		directSurrogateLevels="";
         //
     }   
     
@@ -823,6 +826,7 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
         retval.append("    ").append(XMLHandler.addTagValue("checkPointFileExits", checkPointFileExits));
         retval.append("    ").append(XMLHandler.addTagValue("denormColumNames", denormColumNames));
         retval.append("    ").append(XMLHandler.addTagValue("currentRestructNumber", currentRestructNumber));
+        retval.append("    ").append(XMLHandler.addTagValue("directSurrogateLevels", directSurrogateLevels));
         
         
         
@@ -869,6 +873,7 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
             checkPointFileExits = XMLHandler.getTagValue(stepnode, "checkPointFileExits");
             denormColumNames = XMLHandler.getTagValue(stepnode, "denormColumNames");
             currentRestructNumber = Integer.parseInt(XMLHandler.getTagValue(stepnode, "currentRestructNumber"));
+            directSurrogateLevels = XMLHandler.getTagValue(stepnode, "directSurrogateLevels");
 
             String batchConfig = XMLHandler.getTagValue(stepnode, "batchSize");
             
@@ -1615,6 +1620,7 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
             cubeName=rep.getStepAttributeString(idStep, "cubeName");
             checkPointFileExits = rep.getStepAttributeString(idStep, "checkPointFileExits");
             denormColumNames = rep.getStepAttributeString(idStep, "denormColumNames");
+            directSurrogateLevels = rep.getStepAttributeString(idStep, "directSurrogateLevels");
             currentRestructNumber = (int)rep.getStepAttributeInteger(idStep, "currentRestructNumber");
             //
             int nrKeys   = rep.countNrStepAttributes(idStep, "lookup_keyfield");
@@ -1671,6 +1677,7 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
             rep.saveStepAttribute(idTransformation, idStep, "checkPointFileExits", checkPointFileExits);
             rep.saveStepAttribute(idTransformation, idStep, "denormColumNames", denormColumNames);
             rep.saveStepAttribute(idTransformation, idStep, "currentRestructNumber", currentRestructNumber);
+            rep.saveStepAttribute(idTransformation, idStep, "directSurrogateLevels", directSurrogateLevels);
         }
         catch(Exception e)
         {
@@ -2168,5 +2175,15 @@ public class MolapCSVBasedSeqGenMeta extends BaseStepMeta implements StepMetaInt
 	public void setHighCardinalityDims(String highCardinalityDims) {
 		this.highCardinalityDims = highCardinalityDims;
 	}
+
+    public void setDirectSurrogateLevels(String directSurrogateLevelString)
+	{
+		this.directSurrogateLevels=directSurrogateLevelString;
+	}
+
+	public String getDirectSurrogateLevels() 
+	{
+		return directSurrogateLevels;
+	}
 }
 
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenStep.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenStep.java
index 572cbaf..fc9af3b 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenStep.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/surrogatekeysgenerator/csvbased/MolapCSVBasedSeqGenStep.java
@@ -520,6 +520,7 @@ public class MolapCSVBasedSeqGenStep extends BaseStep
                 molapInfo.setTableName(meta.getTableName());
                 molapInfo.setPrimaryKeyMap(meta.getPrimaryKeyMap());
                 molapInfo.setMeasureColumns(meta.measureColumn);
+                molapInfo.setDirectSurrogateLevels(meta.getDirectSurrogateLevels());
                 molapInfo.setComplexTypesMap(meta.getComplexTypes());
                 
                 updateBagLogFileName();
diff --git a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/util/MolapSchemaParser.java b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/util/MolapSchemaParser.java
index eb2b2d3..243eeea 100644
--- a/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/util/MolapSchemaParser.java
+++ b/Molap/Molap-Data-Processor/src/com/huawei/unibi/molap/util/MolapSchemaParser.java
@@ -3904,6 +3904,33 @@ private static String getDimensionTable(String dimName, String levelName, Cube c
         }
         return dimString.toString();
     }
+
+    public static String getDirectSurrogateLevelString(com.huawei.unibi.molap.olap.MolapDef.Cube cube)
+	{
+		CubeDimension[] dimensions=cube.dimensions;
+		StringBuffer buff=new StringBuffer();
+		int counter=0;
+		MolapDef.Dimension dim=null;
+		for (CubeDimension d : dimensions)
+		{
+			dim=(Dimension) d;
+			for (MolapDef.Hierarchy h:dim.hierarchies) 
+			{
+				for (MolapDef.Level l: h.levels)
+				{
+					if(l.directSurogate && l.type.equals("Timestamp"))
+					{
+						buff.append(cube.fact.toString()+'_'+l.name);
+						buff.append(MolapCommonConstants.COLON_SPC_CHARACTER);
+						buff.append(counter);
+						buff.append(MolapCommonConstants.COLON_SPC_CHARACTER);
+					}
+					counter++;
+				}
+			}
+		}
+		return buff.toString();
+	}
     
     /**
      * Below method is to get the dimension 
diff --git a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/BinaryConditionalExpression.java b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/BinaryConditionalExpression.java
index 4416e94..5e8bff9 100644
--- a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/BinaryConditionalExpression.java
+++ b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/BinaryConditionalExpression.java
@@ -70,5 +70,20 @@ public abstract class BinaryConditionalExpression  extends BinaryLogicalExpressi
         return false;
 
     }
+    
+    public boolean isDirectSurrogateDimension()
+    {
+       List<ColumnExpression> listOfExp = new ArrayList<ColumnExpression>(MolapCommonConstants.DEFAULT_COLLECTION_SIZE);
+        getColumnList(this, listOfExp);
+        for(ColumnExpression ce: listOfExp)
+        {
+            if(ce.getDim().isDirectSurrogate())
+            {
+                return true;
+            }
+        }
+        return false;
+
+    }
 
 }
diff --git a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/ConditionalExpression.java b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/ConditionalExpression.java
index 1328bc3..dfdd8cb 100644
--- a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/ConditionalExpression.java
+++ b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/expression/conditional/ConditionalExpression.java
@@ -12,4 +12,6 @@ public interface ConditionalExpression
     List<ColumnExpression> getColumnList();
 
     boolean isSingleDimension();
+
+    boolean isDirectSurrogateDimension();
 }
diff --git a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/filters/measurefilter/util/FilterUtil.java b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/filters/measurefilter/util/FilterUtil.java
index 9217641..4009305 100644
--- a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/filters/measurefilter/util/FilterUtil.java
+++ b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/filters/measurefilter/util/FilterUtil.java
@@ -119,7 +119,7 @@ public final class FilterUtil
         {
         case EQUALS:
             currentCondExpression = (BinaryConditionalExpression)expression;
-            if(currentCondExpression.isSingleDimension() && 
+            if(currentCondExpression.isSingleDimension() && !currentCondExpression.isDirectSurrogateDimension() && 
                     currentCondExpression.getColumnList().get(0).getDim().getDataType() != Type.ARRAY && 
                     currentCondExpression.getColumnList().get(0).getDim().getDataType() != Type.STRUCT)
             {
@@ -165,7 +165,7 @@ public final class FilterUtil
         case NOT_EQUALS:
             
             currentCondExpression = (BinaryConditionalExpression)expression;
-            if(currentCondExpression.isSingleDimension() && 
+            if(currentCondExpression.isSingleDimension()&&!currentCondExpression.isDirectSurrogateDimension() && 
                     currentCondExpression.getColumnList().get(0).getDim().getDataType() != Type.ARRAY && 
                     currentCondExpression.getColumnList().get(0).getDim().getDataType() != Type.STRUCT)
             {
@@ -208,7 +208,7 @@ public final class FilterUtil
             }
         default:
             condExpression = (ConditionalExpression)expression;
-            if(condExpression.isSingleDimension() && 
+            if(condExpression.isSingleDimension() &&!condExpression.isDirectSurrogateDimension() && 
                     condExpression.getColumnList().get(0).getDim().getDataType() != Type.ARRAY && 
                     condExpression.getColumnList().get(0).getDim().getDataType() != Type.STRUCT)
             {
diff --git a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/QueryExecutorUtility.java b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/QueryExecutorUtility.java
index 3c484c8..768d17d 100644
--- a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/QueryExecutorUtility.java
+++ b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/QueryExecutorUtility.java
@@ -30,6 +30,7 @@ import com.huawei.unibi.molap.metadata.MolapMetadata;
 import com.huawei.unibi.molap.metadata.MolapMetadata.Dimension;
 import com.huawei.unibi.molap.metadata.MolapMetadata.Measure;
 import com.huawei.unibi.molap.metadata.SliceMetaData;
+import com.huawei.unibi.molap.util.MolapUtil;
 import com.huawei.unibi.molap.olap.MolapDef;
 import com.huawei.unibi.molap.olap.MolapDef.Cube;
 import com.huawei.unibi.molap.olap.MolapDef.CubeDimension;
@@ -728,6 +729,20 @@ public final class QueryExecutorUtility
         }
         return -1;
     }
+	
+	public static Long getMemberByDirectSurrogateKey(int surrogate)
+    {
+        long timeStamp=0;
+        if(MolapUtil.cutOffTimeStamp>=0)
+        {
+            timeStamp=(surrogate*MolapUtil.granularityFactor+MolapUtil.cutOffTimeStamp)*1000l;
+        }
+        else
+        {
+            timeStamp=surrogate*MolapUtil.granularityFactor*1000l;
+        }
+        return timeStamp;
+    }
     
     public static byte[] fillSortedDimensions(Dimension[] sortedDimensions, Dimension[] queryDimensions)
     {
diff --git a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/ScannedResultProcessorUtil.java b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/ScannedResultProcessorUtil.java
index 26fa1ca..9eb4fd1 100644
--- a/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/ScannedResultProcessorUtil.java
+++ b/Molap/Molap-Engine/src/com/huawei/unibi/molap/engine/util/ScannedResultProcessorUtil.java
@@ -126,11 +126,22 @@ public final class ScannedResultProcessorUtil
                         {
                             continue;
                         }
-                        if(sortedDimensionIndex[i] == 1)
+                        if(!queryDimension[i].isDirectSurrogate())
                         {
                             keyArray[queryDimension[i].getOrdinal()] = getSortIndexById(dimensionUniqueNames[i],
                                     (int)keyArray[queryDimension[i].getOrdinal()], dataProcessorInfo.getSlices());
                         }
+                        else if(sortedDimensionIndex[i] == 1)
+                        {
+                            keyArray[queryDimension[i].getOrdinal()] = getSortIndexById(dimensionUniqueNames[i],
+                                    (int)keyArray[queryDimension[i].getOrdinal()], dataProcessorInfo.getSlices());                            
+                        }
+					    else
+						{
+							keyArray[queryDimension[i].getOrdinal()]=(int)keyArray[queryDimension[i].getOrdinal()];
+						}
+                       
+                       
                     }// CHECKSTYLE:ON
                     List<byte[]> listOfDirectSurrogates=key.getDirectSurrogateKeyList();
                     key = new ByteArrayWrapper();
diff --git a/Molap/Molap-Spark-Interface/.classpath b/Molap/Molap-Spark-Interface/.classpath
index 1034594..e315367 100644
--- a/Molap/Molap-Spark-Interface/.classpath
+++ b/Molap/Molap-Spark-Interface/.classpath
@@ -3,7 +3,6 @@
 	<classpathentry kind="src" path="src/main/java"/>
 	<classpathentry kind="src" path="src/main/scala"/>
 	<classpathentry kind="con" path="org.scala-ide.sdt.launching.SCALA_CONTAINER"/>
-	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
 	<classpathentry kind="lib" path="/libraries/TPJars/commons-vfs-1.0.jar"/>
 	<classpathentry kind="lib" path="/libraries/TPJars/eigenbase-properties-1.1.0.10924.jar"/>
 	<classpathentry kind="lib" path="/libraries/TPJars/eigenbase-resgen-1.3.0.13768.jar"/>
@@ -18,7 +17,6 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/Molap-Data-Processor"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/Molap-Engine"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/Molap-Interface"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/AutoAggregation"/>
 	<classpathentry kind="lib" path="/libraries/build_tools/datanucleus-api-jdo-3.2.1.jar"/>
 	<classpathentry kind="lib" path="/libraries/build_tools/datanucleus-core-3.2.2.jar"/>
 	<classpathentry kind="lib" path="/libraries/build_tools/datanucleus-rdbms-3.2.1.jar"/>
@@ -33,5 +31,6 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/Molap-Logging-Service"/>
 	<classpathentry kind="lib" path="/libraries/Unibi_Prebuild/CryptProvider.jar-1.0.0-SNAPSHOT.jar"/>
 	<classpathentry kind="lib" path="/libraries/Unibi_Prebuild/spark-assembly-1.5.1-hadoop2.7.2.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="output" path="classes"/>
 </classpath>
diff --git a/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/SparkUnknownExpression.scala b/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/SparkUnknownExpression.scala
index 92eb9f6..f190d29 100644
--- a/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/SparkUnknownExpression.scala
+++ b/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/SparkUnknownExpression.scala
@@ -70,6 +70,19 @@ class SparkUnknownExpression(sparkExp: SparkExpression) extends Expression with
       false
     }
   }
+  
+   def isDirectSurrogateDimension(): Boolean = {
+    var lst = new java.util.ArrayList[ColumnExpression]()
+     getAllColumnListFromExpressionTree(sparkExp, lst)
+    if (lst.get(0).getDim.isDirectSurrogate())
+    {
+      true
+    }
+    else
+    {
+    false
+    }
+  }
 
   def getColumnListFromExpressionTree(sparkCurrentExp: SparkExpression,
                                       list: java.util.List[ColumnExpression]): Unit = {
diff --git a/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/cubemodel/cubeSchema.scala b/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/cubemodel/cubeSchema.scala
index 8aad313..c315917 100644
--- a/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/cubemodel/cubeSchema.scala
+++ b/Molap/Molap-Spark-Interface/src/main/scala/org/apache/spark/sql/cubemodel/cubeSchema.scala
@@ -1385,6 +1385,10 @@ private[sql] case class CreateCube(cm: CubeModel) extends RunnableCommand with C
             //TODO: find away to assign type in scala
             //levelXml.type = level.dataType
             setV(levelXml, "type", level.dataType)
+            if(level.dataType.equals("Timestamp") || level.dataType.equals("Date"))
+            {
+               levelXml.directSurogate = true
+            }
             levelXml
           }.toArray
           hierXml
diff --git a/Molap/dummy-encryption-util/.classpath b/Molap/dummy-encryption-util/.classpath
index fceb480..fb50116 100644
--- a/Molap/dummy-encryption-util/.classpath
+++ b/Molap/dummy-encryption-util/.classpath
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
