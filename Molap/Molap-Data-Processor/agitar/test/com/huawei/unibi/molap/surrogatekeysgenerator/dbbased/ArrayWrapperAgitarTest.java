/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:15:44 PM
 * Time to generate: 00:09.674 seconds
 *
 */

package com.huawei.unibi.molap.surrogatekeysgenerator.dbbased;

import com.agitar.lib.junit.AgitarTestCase;

public class ArrayWrapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ArrayWrapper.class;
    }
    
    public void testConstructor() throws Throwable {
        Object[] data = new Object[1];
        ArrayWrapper arrayWrapper = new ArrayWrapper(data);
        assertSame("arrayWrapper.getData()", data, arrayWrapper.getData());
    }
    
    public void testEquals() throws Throwable {
        Object[] data = new Object[2];
        boolean result = new ArrayWrapper(data).equals(new Object());
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        Object[] data = new Object[0];
        Object[] data2 = new Object[0];
        boolean result = new ArrayWrapper(data).equals(new ArrayWrapper(data2));
        assertTrue("result", result);
    }
    
    public void testGetData() throws Throwable {
        Object[] data = new Object[2];
        Object[] result = new ArrayWrapper(data).getData();
        assertSame("result", data, result);
        assertNull("data[0]", data[0]);
    }
    
    public void testGetData1() throws Throwable {
        Object[] data = new Object[0];
        Object[] result = new ArrayWrapper(data).getData();
        assertSame("result", data, result);
    }
    
    public void testHashCode() throws Throwable {
        Object[] data = new Object[3];
        int result = new ArrayWrapper(data).hashCode();
        assertEquals("result", 29791, result);
    }
    
    public void testHashCode1() throws Throwable {
        Object[] data = new Object[0];
        int result = new ArrayWrapper(data).hashCode();
        assertEquals("result", 1, result);
    }
    
    public void testHashCode2() throws Throwable {
        Object[] data = new Object[4];
        data[0] = "testString";
        int result = new ArrayWrapper(data).hashCode();
        assertEquals("result", 481251678, result);
    }
    
    public void testHashCode3() throws Throwable {
        Object[] data = new Object[0];
        Object[] data2 = new Object[1];
        data2[0] = new ArrayWrapper(data);
        int result = new ArrayWrapper(data2).hashCode();
        assertEquals("result", 32, result);
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new ArrayWrapper(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ArrayWrapper.class, ex);
        }
    }
}

