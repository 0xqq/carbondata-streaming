/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:19:53 PM
 * Time to generate: 00:16.832 seconds
 *
 */

package com.huawei.unibi.molap.graphgenerator.configuration;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.HashMap;
import java.util.Map;

public class GraphConfigurationInfoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return GraphConfigurationInfo.class;
    }
    
    public void testConstructor() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        assertNull("graphConfigurationInfo.getActualDimensionColumns()", graphConfigurationInfo.getActualDimensionColumns());
    }
    
    public void testSetAGG() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setAGG(true);
        assertTrue("graphConfigurationInfo.isAGG()", graphConfigurationInfo.isAGG());
    }
    
    public void testSetActualDimensionColumns() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setActualDimensionColumns("testGraphConfigurationInfoActualDimensionColumns");
        assertEquals("graphConfigurationInfo.getActualDimensionColumns()", "testGraphConfigurationInfoActualDimensionColumns", graphConfigurationInfo.getActualDimensionColumns());
    }
    
    public void testSetActualDims() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        String[] actualDims = new String[1];
        graphConfigurationInfo.setActualDims(actualDims);
        assertSame("graphConfigurationInfo.getActualDims()", actualDims, graphConfigurationInfo.getActualDims());
    }
    
    public void testSetAggType() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        String[] aggType = new String[3];
        graphConfigurationInfo.setAggType(aggType);
        assertSame("graphConfigurationInfo.getAggType()", aggType, graphConfigurationInfo.getAggType());
    }
    
    public void testSetBatchSize() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setBatchSize("testGraphConfigurationInfoBatchSize");
        assertEquals("graphConfigurationInfo.getBatchSize()", "testGraphConfigurationInfoBatchSize", graphConfigurationInfo.getBatchSize());
    }
    
    public void testSetConnectionName() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setConnectionName("testGraphConfigurationInfoConnectionName");
        assertEquals("graphConfigurationInfo.getConnectionName()", "testGraphConfigurationInfoConnectionName", graphConfigurationInfo.getConnectionName());
    }
    
    public void testSetConnectionUrl() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setConnectionUrl("testGraphConfigurationInfoConnectionUrl");
        assertEquals("graphConfigurationInfo.getConnectionUrl()", "testGraphConfigurationInfoConnectionUrl", graphConfigurationInfo.getConnectionUrl());
    }
    
    public void testSetCubeMeasuresAndDataTypeMap() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        Map cubeMeasuresAndDataTypeMap = new HashMap(100, 100.0F);
        graphConfigurationInfo.setCubeMeasuresAndDataTypeMap(cubeMeasuresAndDataTypeMap);
        assertSame("graphConfigurationInfo.getCubeMeasuresAndDataTypeMap()", cubeMeasuresAndDataTypeMap, graphConfigurationInfo.getCubeMeasuresAndDataTypeMap());
    }
    
    public void testSetDbType() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDbType("testGraphConfigurationInfoDbType");
        assertEquals("graphConfigurationInfo.getDbType()", "testGraphConfigurationInfoDbType", graphConfigurationInfo.getDbType());
    }
    
    public void testSetDimCardinalities() throws Throwable {
        Map dimCardinalities = new HashMap(100, 100.0F);
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDimCardinalities(dimCardinalities);
        assertSame("graphConfigurationInfo.getDimCardinalities()", dimCardinalities, graphConfigurationInfo.getDimCardinalities());
    }
    
    public void testSetDimensionSqlQuery() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDimensionSqlQuery("testGraphConfigurationInfoDimensionSqlQuery");
        assertEquals("graphConfigurationInfo.getDimensionSqlQuery()", "testGraphConfigurationInfoDimensionSqlQuery", graphConfigurationInfo.getDimensionSqlQuery());
    }
    
    public void testSetDimensionString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDimensionString("testGraphConfigurationInfoDimensionString");
        assertEquals("graphConfigurationInfo.getDimensionString()", "testGraphConfigurationInfoDimensionString", graphConfigurationInfo.getDimensionString());
    }
    
    public void testSetDimensionTableNames() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDimensionTableNames("testGraphConfigurationInfoDimensionTableNames");
        assertEquals("graphConfigurationInfo.getDimensionTableNames()", "testGraphConfigurationInfoDimensionTableNames", graphConfigurationInfo.getDimensionTableNames());
    }
    
    public void testSetDimensions() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        String[] dimensions = new String[2];
        graphConfigurationInfo.setDimensions(dimensions);
        assertSame("graphConfigurationInfo.getDimensions()", dimensions, graphConfigurationInfo.getDimensions());
    }
    
    public void testSetDriverclass() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setDriverclass("testGraphConfigurationInfoDriverclass");
        assertEquals("graphConfigurationInfo.getDriverclass()", "testGraphConfigurationInfoDriverclass", graphConfigurationInfo.getDriverclass());
    }
    
    public void testSetForeignKeyColumnNameString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setForeignKeyColumnNameString("testGraphConfigurationInfoForeignKeyColumnNameString");
        assertEquals("graphConfigurationInfo.getForeignKeyColumnNameString()", "testGraphConfigurationInfoForeignKeyColumnNameString", graphConfigurationInfo.getForeignKeyColumnNameString());
    }
    
    public void testSetForeignKeyHierarchyString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setForeignKeyHierarchyString("testGraphConfigurationInfoForeignKeyHierarchyString");
        assertEquals("graphConfigurationInfo.getForeignKeyHierarchyString()", "testGraphConfigurationInfoForeignKeyHierarchyString", graphConfigurationInfo.getForeignKeyHierarchyString());
    }
    
    public void testSetForignKey() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        String[] forignKey = new String[1];
        graphConfigurationInfo.setForignKey(forignKey);
        assertSame("graphConfigurationInfo.getForignKey()", forignKey, graphConfigurationInfo.getForignKey());
    }
    
    public void testSetHeirAndKeySizeString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setHeirAndKeySizeString("testGraphConfigurationInfoHeirAndKeySizeString");
        assertEquals("graphConfigurationInfo.getHeirAndKeySizeString()", "testGraphConfigurationInfoHeirAndKeySizeString", graphConfigurationInfo.getHeirAndKeySizeString());
    }
    
    public void testSetHierColumnString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setHierColumnString("testGraphConfigurationInfoHierColumnString");
        assertEquals("graphConfigurationInfo.getHierColumnString()", "testGraphConfigurationInfoHierColumnString", graphConfigurationInfo.getHierColumnString());
    }
    
    public void testSetHiersString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setHiersString("testGraphConfigurationInfoHiersString");
        assertEquals("graphConfigurationInfo.getHiersString()", "testGraphConfigurationInfoHiersString", graphConfigurationInfo.getHiersString());
    }
    
    public void testSetJndiName() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setJndiName("testGraphConfigurationInfoJndiName");
        assertEquals("graphConfigurationInfo.getJndiName()", "testGraphConfigurationInfoJndiName", graphConfigurationInfo.getJndiName());
    }
    
    public void testSetLeafNodeSize() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setLeafNodeSize("testGraphConfigurationInfoLeafNodeSize");
        assertEquals("graphConfigurationInfo.getLeafNodeSize()", "testGraphConfigurationInfoLeafNodeSize", graphConfigurationInfo.getLeafNodeSize());
    }
    
    public void testSetMaxLeafInFile() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMaxLeafInFile("testGraphConfigurationInfoMaxLeafInFile");
        assertEquals("graphConfigurationInfo.getMaxLeafInFile()", "testGraphConfigurationInfoMaxLeafInFile", graphConfigurationInfo.getMaxLeafInFile());
    }
    
    public void testSetMdkeySize() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMdkeySize("testGraphConfigurationInfoMdkeySize");
        assertEquals("graphConfigurationInfo.getMdkeySize()", "testGraphConfigurationInfoMdkeySize", graphConfigurationInfo.getMdkeySize());
    }
    
    public void testSetMeasureCount() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMeasureCount("testGraphConfigurationInfoMeasureCount");
        assertEquals("graphConfigurationInfo.getMeasureCount()", "testGraphConfigurationInfoMeasureCount", graphConfigurationInfo.getMeasureCount());
    }
    
    public void testSetMeasureNamesString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMeasureNamesString("testGraphConfigurationInfoMeasureNamesString");
        assertEquals("graphConfigurationInfo.getMeasureNamesString()", "testGraphConfigurationInfoMeasureNamesString", graphConfigurationInfo.getMeasureNamesString());
    }
    
    public void testSetMeasures() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        String[] measures = new String[3];
        graphConfigurationInfo.setMeasures(measures);
        assertSame("graphConfigurationInfo.getMeasures()", measures, graphConfigurationInfo.getMeasures());
    }
    
    public void testSetMeasuresString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMeasuresString("testGraphConfigurationInfoMeasuresString");
        assertEquals("graphConfigurationInfo.getMeasuresString()", "testGraphConfigurationInfoMeasuresString", graphConfigurationInfo.getMeasuresString());
    }
    
    public void testSetMetaHeirQueryString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMetaHeirQueryString("testGraphConfigurationInfoMetaHeirQueryString");
        assertEquals("graphConfigurationInfo.getMetaHeirQueryString()", "testGraphConfigurationInfoMetaHeirQueryString", graphConfigurationInfo.getMetaHeirQueryString());
    }
    
    public void testSetMetaHeirString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setMetaHeirString("testGraphConfigurationInfoMetaHeirString");
        assertEquals("graphConfigurationInfo.getMetaHeirString()", "testGraphConfigurationInfoMetaHeirString", graphConfigurationInfo.getMetaHeirString());
    }
    
    public void testSetNumberOfCores() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setNumberOfCores("testGraphConfigurationInfoNumberOfCores");
        assertEquals("graphConfigurationInfo.getNumberOfCores()", "testGraphConfigurationInfoNumberOfCores", graphConfigurationInfo.getNumberOfCores());
    }
    
    public void testSetPassword() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setPassword("testGraphConfigurationInfoPassword");
        assertEquals("graphConfigurationInfo.getPassword()", "testGraphConfigurationInfoPassword", graphConfigurationInfo.getPassword());
    }
    
    public void testSetPrimaryKeyColumnNamesString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setPrimaryKeyColumnNamesString("testGraphConfigurationInfoPrimaryKeyColumnNamesString");
        assertEquals("graphConfigurationInfo.getPrimaryKeyColumnNamesString()", "testGraphConfigurationInfoPrimaryKeyColumnNamesString", graphConfigurationInfo.getPrimaryKeyColumnNamesString());
    }
    
    public void testSetPrimaryKeyString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setPrimaryKeyString("testGraphConfigurationInfoPrimaryKeyString");
        assertEquals("graphConfigurationInfo.getPrimaryKeyString()", "testGraphConfigurationInfoPrimaryKeyString", graphConfigurationInfo.getPrimaryKeyString());
    }
    
    public void testSetPropertiesString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setPropertiesString("testGraphConfigurationInfoPropertiesString");
        assertEquals("graphConfigurationInfo.getPropertiesString()", "testGraphConfigurationInfoPropertiesString", graphConfigurationInfo.getPropertiesString());
    }
    
    public void testSetSortSize() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setSortSize("testGraphConfigurationInfoSortSize");
        assertEquals("graphConfigurationInfo.getSortSize()", "testGraphConfigurationInfoSortSize", graphConfigurationInfo.getSortSize());
    }
    
    public void testSetStoreLocation() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setStoreLocation("testGraphConfigurationInfoStoreLocation");
        assertEquals("graphConfigurationInfo.getStoreLocation()", "testGraphConfigurationInfoStoreLocation", graphConfigurationInfo.getStoreLocation());
    }
    
    public void testSetTableInputSqlQuery() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setTableInputSqlQuery("testGraphConfigurationInfoTableInputSqlQuery");
        assertEquals("graphConfigurationInfo.getTableInputSqlQuery()", "testGraphConfigurationInfoTableInputSqlQuery", graphConfigurationInfo.getTableInputSqlQuery());
    }
    
    public void testSetTableName() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setTableName("testGraphConfigurationInfoTableName");
        assertEquals("graphConfigurationInfo.getTableName()", "testGraphConfigurationInfoTableName", graphConfigurationInfo.getTableName());
    }
    
    public void testSetTimeHeirString() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setTimeHeirString("testGraphConfigurationInfoTimeHeirString");
        assertEquals("graphConfigurationInfo.getTimeHeirString()", "testGraphConfigurationInfoTimeHeirString", graphConfigurationInfo.getTimeHeirString());
    }
    
    public void testSetUsername() throws Throwable {
        GraphConfigurationInfo graphConfigurationInfo = new GraphConfigurationInfo();
        graphConfigurationInfo.setUsername("testGraphConfigurationInfoUsername");
        assertEquals("graphConfigurationInfo.getUsername()", "testGraphConfigurationInfoUsername", graphConfigurationInfo.getUsername());
    }
}

