/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:19:26 PM
 * Time to generate: 00:15.410 seconds
 *
 */

package com.huawei.unibi.molap.merger.sliceMerger;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.merger.Util.MolapSliceMergerUtil;
import com.huawei.unibi.molap.merger.exeception.SliceMergerException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class DimesionMappingFileMergerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DimesionMappingFileMerger.class;
    }
    
    public void testConstructor() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = new DimesionMappingFileMerger("testDimesionMappingFileMergerMergeLocation", "testDimesionMappingFileMergerTableName");
        assertEquals("dimesionMappingFileMerger.tableName", "testDimesionMappingFileMergerTableName", getPrivateField(dimesionMappingFileMerger, "tableName"));
        assertEquals("dimesionMappingFileMerger.mergeLocation", "testDimesionMappingFileMergerMergeLocation", getPrivateField(dimesionMappingFileMerger, "mergeLocation"));
    }
    
    public void testMergerDimesionFile() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = new DimesionMappingFileMerger("testDimesionMappingFileMergerMergeLocation", "testDimesionMappingFileMergerTableName");
        String[] sliceLocation = new String[0];
        dimesionMappingFileMerger.mergerDimesionFile(sliceLocation);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMergerDimesionFileWithAggressiveMocks() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = (DimesionMappingFileMerger) Mockingbird.getProxyObject(DimesionMappingFileMerger.class, true);
        String[] strings = new String[0];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(dimesionMappingFileMerger, "mergeLocation", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapSliceMergerUtil.class, "getFileMap", "(java.io.File[][])java.util.Map", map, 1);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), list2);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(arrayList.addAll(list2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), list3);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(arrayList.addAll(list3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), list4);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        MolapSliceMergerUtil.copyFile(file, file3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), file2);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file4);
        MolapSliceMergerUtil.copyFile(file2, file4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.enterTestMode(DimesionMappingFileMerger.class);
        dimesionMappingFileMerger.mergerDimesionFile(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetSortedPathForFilesThrowsNullPointerException() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = new DimesionMappingFileMerger("testDimesionMappingFileMergerMergeLocation", "testDimesionMappingFileMergerTableName");
        try {
            callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DimesionMappingFileMerger", "getSortedPathForFiles", new Class[] {String.class}, dimesionMappingFileMerger, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testMergerDimesionFileThrowsNullPointerException() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = new DimesionMappingFileMerger("testDimesionMappingFileMergerMergeLocation", "testDimesionMappingFileMergerTableName");
        String[] sliceLocation = new String[1];
        try {
            dimesionMappingFileMerger.mergerDimesionFile(sliceLocation);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testMergerDimesionFileThrowsNullPointerException1() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = new DimesionMappingFileMerger("testDimesionMappingFileMergerMergeLocation", "testDimesionMappingFileMergerTableName");
        try {
            dimesionMappingFileMerger.mergerDimesionFile((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimesionMappingFileMerger.class, ex);
        }
    }
    
    public void testMergerDimesionFileThrowsSliceMergerExceptionWithAggressiveMocks() throws Throwable {
        DimesionMappingFileMerger dimesionMappingFileMerger = (DimesionMappingFileMerger) Mockingbird.getProxyObject(DimesionMappingFileMerger.class, true);
        String[] strings = new String[0];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(dimesionMappingFileMerger, "mergeLocation", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapSliceMergerUtil.class, "getFileMap", "(java.io.File[][])java.util.Map", map, 1);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), list2);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(arrayList.addAll(list2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), list3);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(arrayList.addAll(list3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), list4);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file4);
        MolapSliceMergerUtil.copyFile(file, file4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), file2);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file5 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file5);
        MolapSliceMergerUtil.copyFile(file2, file5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), file3);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file6 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file6);
        MolapSliceMergerUtil.copyFile(file3, file6);
        Mockingbird.setExceptionForVoid(iOException);
        Mockingbird.replaceObjectForRecording(SliceMergerException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(SliceMergerException.class));
        Mockingbird.enterTestMode(DimesionMappingFileMerger.class);
        try {
            dimesionMappingFileMerger.mergerDimesionFile(strings);
            fail("Expected SliceMergerException to be thrown");
        } catch (SliceMergerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

