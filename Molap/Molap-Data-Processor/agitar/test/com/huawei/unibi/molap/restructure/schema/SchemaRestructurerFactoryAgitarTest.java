/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:23:01 PM
 * Time to generate: 00:08.971 seconds
 *
 */

package com.huawei.unibi.molap.restructure.schema;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.restructure.schema.model.CubeBean;

public class SchemaRestructurerFactoryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SchemaRestructurerFactory.class;
    }
    
    public void testConstructor() throws Throwable {
        new SchemaRestructurerFactory();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetSchemaRestructurer() throws Throwable {
        CubeBean[] cubes = new CubeBean[0];
        SchemaRestructurer result = SchemaRestructurerFactory.getSchemaRestructurer(null, cubes);
        assertNull("result", result);
    }
    
    public void testGetSchemaRestructurerThrowsNoClassDefFoundError() throws Throwable {
        CubeBean[] cubes = new CubeBean[0];
        try {
            SchemaRestructurerFactory.getSchemaRestructurer(StoreType.INMEMORY, cubes);
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "com/huawei/unibi/molap/keygenerator/KeyGenException", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
}

