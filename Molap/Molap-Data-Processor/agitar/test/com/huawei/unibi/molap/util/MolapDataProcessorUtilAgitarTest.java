/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:21:27 PM
 * Time to generate: 00:11.236 seconds
 *
 */

package com.huawei.unibi.molap.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.ClassCache;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;

public class MolapDataProcessorUtilAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapDataProcessorUtil.class;
    }
    
    public void testConstructor() throws Throwable {
        new MolapDataProcessorUtil();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteMeasureMetaDataToFileThrowsBufferOverflowException() throws Throwable {
        double[] maxValue = new double[2];
        double[] minValue = new double[3];
        int[] decimalLength = new int[2];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected BufferOverflowException to be thrown");
        } catch (BufferOverflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsBufferOverflowException1() throws Throwable {
        double[] maxValue = new double[0];
        double[] minValue = new double[2];
        int[] decimalLength = new int[1];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected BufferOverflowException to be thrown");
        } catch (BufferOverflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsBufferOverflowException2() throws Throwable {
        double[] maxValue = new double[1];
        double[] minValue = new double[0];
        int[] decimalLength = new int[4];
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, Mockingbird.getProxyObject(ByteBuffer.class), "putInt", "(int)java.nio.ByteBuffer", (Throwable) Mockingbird.getProxyObject(BufferOverflowException.class), 1);
        Mockingbird.enterTestMode(MolapDataProcessorUtil.class);
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected BufferOverflowException to be thrown");
        } catch (BufferOverflowException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsBufferOverflowException3() throws Throwable {
        double[] maxValue = new double[1];
        double[] minValue = new double[3];
        int[] decimalLength = new int[1];
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, Mockingbird.getProxyObject(ByteBuffer.class), "putDouble", "(double)java.nio.ByteBuffer", (Throwable) Mockingbird.getProxyObject(BufferOverflowException.class), 1);
        Mockingbird.enterTestMode(MolapDataProcessorUtil.class);
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected BufferOverflowException to be thrown");
        } catch (BufferOverflowException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsBufferOverflowException4() throws Throwable {
        double[] maxValue = new double[0];
        double[] minValue = new double[0];
        int[] decimalLength = new int[1];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected BufferOverflowException to be thrown");
        } catch (BufferOverflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException() throws Throwable {
        double[] minValue = new double[0];
        double[] maxValue = new double[0];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, (int[]) null, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException1() throws Throwable {
        double[] minValue = new double[3];
        int[] decimalLength = new int[1];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile((double[]) null, minValue, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException2() throws Throwable {
        double[] maxValue = new double[2];
        double[] minValue = new double[3];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, (int[]) null, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException3() throws Throwable {
        double[] maxValue = new double[0];
        int[] decimalLength = new int[0];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, (double[]) null, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException4() throws Throwable {
        double[] maxValue = new double[7];
        double[] minValue = new double[0];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, minValue, (int[]) null, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsNullPointerException5() throws Throwable {
        double[] maxValue = new double[2];
        int[] decimalLength = new int[2];
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(maxValue, (double[]) null, decimalLength, "testMolapDataProcessorUtilMeasureMetaDataFileLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataProcessorUtil.class, ex);
        }
    }
    
    public void testWriteMeasureMetaDataToFileThrowsThrowable() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[2];
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        doubles[0] = 0.0;
        doubles[1] = 0.0;
        doubles2[0] = 0.0;
        doubles2[1] = 0.0;
        ints[0] = 0;
        ints[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(40)}, byteBuffer, 1);
        Mockingbird.setReturnValue(byteBuffer.putDouble(0.0), null);
        Mockingbird.setReturnValue(byteBuffer.putDouble(0.0), null);
        Mockingbird.setReturnValue(byteBuffer.putDouble(0.0), null);
        Mockingbird.setReturnValue(byteBuffer.putDouble(0.0), null);
        Mockingbird.setReturnValue(byteBuffer.putInt(0), null);
        Mockingbird.setReturnValue(byteBuffer.putInt(0), null);
        Mockingbird.setReturnValue(false, byteBuffer, "flip", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.lang.String)", fileNotFoundException);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapDataProcessorUtil.class);
        try {
            MolapDataProcessorUtil.writeMeasureMetaDataToFile(doubles, doubles2, ints, "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertThrownBy(ClassCache.class, ex);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
}

