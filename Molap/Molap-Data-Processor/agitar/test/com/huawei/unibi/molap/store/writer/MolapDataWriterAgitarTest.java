/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:21:31 PM
 * Time to generate: 00:09.486 seconds
 *
 */

package com.huawei.unibi.molap.store.writer;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.store.writer.exception.MolapDataWriterException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.text.MessageFormat;
import java.util.List;

public class MolapDataWriterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapDataWriter.class;
    }
    
    public void testGetMetaListSizeWithAggressiveMocks() throws Throwable {
        MolapDataWriter molapDataWriter = (MolapDataWriter) Mockingbird.getProxyObject(MolapDataWriter.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapDataWriter, "leafNodeInfoList", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.enterTestMode(MolapDataWriter.class);
        int result = molapDataWriter.getMetaListSize();
        assertEquals("result", 0, result);
    }
    
    public void testInitChannelWithAggressiveMocks() throws Throwable {
        MolapDataWriter molapDataWriter = (MolapDataWriter) Mockingbird.getProxyObject(MolapDataWriter.class, true);
        setPrivateField(molapDataWriter, "fileNameFormat", "");
        setPrivateField(molapDataWriter, "fileCount", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MessageFormat.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.lang.String,boolean)", fileOutputStream);
        Mockingbird.setReturnValue(false, fileOutputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(MolapDataWriter.class);
        molapDataWriter.initChannel();
        assertNull("molapDataWriter.fileChannel", getPrivateField(molapDataWriter, "fileChannel"));
        assertEquals("molapDataWriter.fileName", "", getPrivateField(molapDataWriter, "fileName"));
        assertEquals("molapDataWriter.fileCount", 1, ((Number) getPrivateField(molapDataWriter, "fileCount")).intValue());
    }
    
    public void testInitChannelThrowsMolapDataWriterExceptionWithAggressiveMocks() throws Throwable {
        MolapDataWriter molapDataWriter = (MolapDataWriter) Mockingbird.getProxyObject(MolapDataWriter.class, true);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        setPrivateField(molapDataWriter, "fileNameFormat", "");
        setPrivateField(molapDataWriter, "fileCount", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MessageFormat.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.lang.String,boolean)", fileNotFoundException);
        Mockingbird.replaceObjectForRecording(MolapDataWriterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(MolapDataWriterException.class));
        Mockingbird.enterTestMode(MolapDataWriter.class);
        try {
            molapDataWriter.initChannel();
            fail("Expected MolapDataWriterException to be thrown");
        } catch (MolapDataWriterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testWriteleafMetaDataToFileThrowsMolapDataWriterExceptionWithAggressiveMocks() throws Throwable {
        MolapDataWriter molapDataWriter = (MolapDataWriter) Mockingbird.getProxyObject(MolapDataWriter.class, true);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(molapDataWriter, "fileChannel", fileChannel);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(fileChannel.size(), iOException);
        Mockingbird.replaceObjectForRecording(MolapDataWriterException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(MolapDataWriterException.class));
        Mockingbird.enterTestMode(MolapDataWriter.class);
        try {
            molapDataWriter.writeleafMetaDataToFile();
            fail("Expected MolapDataWriterException to be thrown");
        } catch (MolapDataWriterException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

