/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Aug 13, 2013 6:12:54 PM
 * Time to generate: 00:10.505 seconds
 *
 */

package com.huawei.unibi.molap.restructure.schema.updatemember;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.imageio.metadata.IIOMetadataNode;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class UpdateMemberNodeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return UpdateMemberNode.class;
    }
    
    public void testGetElementsByName() throws Throwable {
        UpdateMemberNode moveNode = new MoveNode(new IIOMetadataNode());
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {"to"}, nodeList, 1);
        Mockingbird.setReturnValue(false, nodeList, "getLength", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.enterTestMode(UpdateMemberNode.class);
        ArrayList result = (ArrayList) moveNode.getElementsByName(element, "testUpdateMemberNodeAttriName");
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetElementsByNameWithAggressiveMocks() throws Throwable {
        UpdateMemberNode updateMemberNode = (UpdateMemberNode) Mockingbird.getProxyObject(UpdateMemberNode.class, true);
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Node node = (Node) Mockingbird.getProxyObject(Node.class);
        Element element2 = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.setReturnValue(element.getElementsByTagName(""), nodeList);
        Mockingbird.setReturnValue(nodeList.getLength(), 2);
        Mockingbird.setReturnValue(nodeList.item(0), node);
        Mockingbird.setReturnValue(node.getNodeType(), (short)0);
        Mockingbird.setReturnValue(nodeList.item(1), element2);
        Mockingbird.setReturnValue(element2.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList.add(element2), false);
        Mockingbird.enterTestMode(UpdateMemberNode.class);
        List result = updateMemberNode.getElementsByName(element, "");
        assertNotNull("result", result);
    }
    
    public void testGetLevels() throws Throwable {
        UpdateMemberNode moveNode = new MoveNode(new IIOMetadataNode());
        Element dimElement = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        List arrayList = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(moveNode.getElementsByName(dimElement, "testUpdateMemberNodeParam2"), arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(UpdateMemberNode.class);
        ArrayList result = (ArrayList) moveNode.getLevels(dimElement);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetLevelsWithAggressiveMocks() throws Throwable {
        UpdateMemberNode updateMemberNode = (UpdateMemberNode) Mockingbird.getProxyObject(UpdateMemberNode.class, true);
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Element element2 = (Element) Mockingbird.getProxyObject(Element.class);
        Element element3 = (Element) Mockingbird.getProxyObject(Element.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Element element4 = (Element) Mockingbird.getProxyObject(Element.class);
        Element element5 = (Element) Mockingbird.getProxyObject(Element.class);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", nodeList, 1);
        Mockingbird.setReturnValue(nodeList.getLength(), 2);
        Mockingbird.setReturnValue(nodeList.item(0), element2);
        Mockingbird.setReturnValue(element2.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList2.add(element2), false);
        Mockingbird.setReturnValue(nodeList.item(1), element3);
        Mockingbird.setReturnValue(element3.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList2.add(element3), false);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), element4);
        Mockingbird.setReturnValue(element4.getAttribute("value"), "");
        Mockingbird.setReturnValue(element4.getAttribute("renameTo"), "");
        Level level = (Level) Mockingbird.getProxyObject(Level.class);
        Mockingbird.replaceObjectForRecording(Level.class, "<init>(java.lang.String)", level);
        Mockingbird.setReturnValue(arrayList.add(level), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), element5);
        Mockingbird.setReturnValue(element5.getAttribute("value"), "");
        Mockingbird.setReturnValue(element5.getAttribute("renameTo"), "");
        Level level2 = (Level) Mockingbird.getProxyObject(Level.class);
        Mockingbird.replaceObjectForRecording(Level.class, "<init>(java.lang.String)", level2);
        Mockingbird.setReturnValue(arrayList.add(level2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(UpdateMemberNode.class);
        List result = updateMemberNode.getLevels(element);
        assertNotNull("result", result);
    }
    
    public void testGetElementsByNameThrowsNullPointerException() throws Throwable {
        UpdateMemberNode moveNode = new MoveNode(new IIOMetadataNode());
        try {
            moveNode.getElementsByName(null, "testUpdateMemberNodeAttriName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(UpdateMemberNode.class, ex);
        }
    }
    
    public void testGetElementsByNameThrowsNullPointerException1() throws Throwable {
        UpdateMemberNode moveNode = new MoveNode(new IIOMetadataNode());
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {null}, nodeList, 1);
        Mockingbird.setException(false, nodeList, "getLength", "()int", new Object[] {}, (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.enterTestMode(UpdateMemberNode.class);
        try {
            moveNode.getElementsByName(element, "");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetLevelsThrowsNullPointerException() throws Throwable {
        UpdateMemberNode moveNode = new MoveNode(new IIOMetadataNode());
        try {
            moveNode.getLevels(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(UpdateMemberNode.class, ex);
        }
    }
}

