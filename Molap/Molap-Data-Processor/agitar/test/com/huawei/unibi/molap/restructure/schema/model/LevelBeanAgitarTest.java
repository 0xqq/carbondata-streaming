/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:21:02 PM
 * Time to generate: 00:13.941 seconds
 *
 */

package com.huawei.unibi.molap.restructure.schema.model;

import com.agitar.lib.junit.AgitarTestCase;

public class LevelBeanAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LevelBean.class;
    }
    
    public void testConstructor() throws Throwable {
        LevelBean levelBean = new LevelBean();
        assertTrue("levelBean.isNew()", levelBean.isNew());
    }
    
    public void testCompareTo() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setIndex(100);
        int result = levelBean.compareTo(new LevelBean());
        assertEquals("result", 1, result);
    }
    
    public void testCompareTo1() throws Throwable {
        LevelBean o = new LevelBean();
        o.setIndex(100);
        int result = new LevelBean().compareTo(o);
        assertEquals("result", -1, result);
    }
    
    public void testCompareTo2() throws Throwable {
        LevelBean o = new LevelBean();
        int result = o.compareTo(o);
        assertEquals("result", 0, result);
    }
    
    public void testEquals() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setKeyLength(100);
        levelBean.setIndex(0);
        levelBean.setColumn("testString");
        levelBean.setHierarchyTable("");
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("");
        obj.setColumn("testString");
        boolean result = levelBean.equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn("testLevelBeanColumn");
        boolean result = levelBean.equals(new LevelBean());
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("testString");
        levelBean.setIndex(-19);
        levelBean.setKeyLength(72);
        levelBean.setColumn("testString");
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("testString");
        obj.setIndex(-19);
        obj.setKeyLength(72);
        obj.setColumn("testString");
        obj.setNameColumn("testLevelBeanNameColumn");
        boolean result = levelBean.equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals3() throws Throwable {
        LevelBean levelBean = new LevelBean();
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("testString");
        obj.setColumn("testString");
        levelBean.setIndex(100);
        levelBean.setHierarchyTable("testString");
        levelBean.setColumn("testString");
        boolean result = levelBean.equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals4() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("zg}y-C");
        levelBean.setColumn("Nsl0b*#(l7ZkbY4-2Wg!;q\n+[fH]pr|?Q");
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("zg}y-C");
        obj.setColumn("Nsl0b*#(l7ZkbY4-2Wg!;q\n+[fH]pr|?Q");
        boolean result = levelBean.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals5() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("testLevelBeanHierarchyTable");
        LevelBean obj = new LevelBean();
        obj.setColumn("~!v");
        levelBean.setColumn("~!v");
        boolean result = levelBean.equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals6() throws Throwable {
        boolean result = new LevelBean().equals("testString");
        assertFalse("result", result);
    }
    
    public void testEquals7() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("testString");
        levelBean.setIndex(76);
        levelBean.setColumn("testString");
        levelBean.setNameColumn("testLevelBeanNameColumn");
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("testString");
        obj.setIndex(76);
        obj.setColumn("testString");
        boolean result = levelBean.equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals8() throws Throwable {
        LevelBean obj = new LevelBean();
        obj.setHierarchyTable("testLevelBeanHierarchyTable");
        obj.setColumn("testLevelBeanColumn");
        obj.setNameColumn("testLevelBeanNameColumn");
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testGetRestructDefVal() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setRestructDefVal("testLevelBeanRestructDefVal");
        String result = levelBean.getRestructDefVal();
        assertEquals("result", "testLevelBeanRestructDefVal", result);
    }
    
    public void testGetRestructDefVal1() throws Throwable {
        String result = new LevelBean().getRestructDefVal();
        assertEquals("result", "@NU#LL$!", result);
    }
    
    public void testHashCode() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("testLevelBeanHierarchyTable");
        levelBean.setColumn("testLevelBeanColumn");
        int result = levelBean.hashCode();
        assertEquals("result", 778324740, result);
        assertEquals("levelBean.getHierarchyTable()", "testLevelBeanHierarchyTable", levelBean.getHierarchyTable());
        assertEquals("levelBean.getColumn()", "testLevelBeanColumn", levelBean.getColumn());
    }
    
    public void testSetCardinality() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setCardinality(100);
        assertEquals("levelBean.getCardinality()", 100, levelBean.getCardinality());
    }
    
    public void testSetColumn() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn("testLevelBeanColumn");
        assertEquals("levelBean.getColumn()", "testLevelBeanColumn", levelBean.getColumn());
    }
    
    public void testSetHierarchyTable() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setHierarchyTable("testLevelBeanHierarchyTable");
        assertEquals("levelBean.getHierarchyTable()", "testLevelBeanHierarchyTable", levelBean.getHierarchyTable());
    }
    
    public void testSetIndex() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setIndex(100);
        assertEquals("levelBean.getIndex()", 100, levelBean.getIndex());
    }
    
    public void testSetKeyLength() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setKeyLength(100);
        assertEquals("levelBean.getKeyLength()", 100, levelBean.getKeyLength());
    }
    
    public void testSetLen() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setLen(100);
        assertEquals("levelBean.getLen()", 100, levelBean.getLen());
    }
    
    public void testSetLevelFileName() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setLevelFileName("testLevelBeanPersistentTableName");
        assertEquals("levelBean.getLevelFileName()", "testLevelBeanPersistentTableName", levelBean.getLevelFileName());
    }
    
    public void testSetLevelName() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setLevelName("testLevelBeanLevelName");
        assertEquals("levelBean.getLevelName()", "testLevelBeanLevelName", levelBean.getLevelName());
    }
    
    public void testSetNameColumn() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setNameColumn("testLevelBeanNameColumn");
        assertEquals("levelBean.getNameColumn()", "testLevelBeanNameColumn", levelBean.getNameColumn());
    }
    
    public void testSetNew() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setNew(false);
        assertFalse("levelBean.isNew()", levelBean.isNew());
    }
    
    public void testSetRestructDefVal() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setRestructDefVal("testLevelBeanRestructDefVal");
        assertEquals("levelBean.getRestructDefVal()", "testLevelBeanRestructDefVal", levelBean.getRestructDefVal());
    }
    
    public void testCompareToThrowsNullPointerException() throws Throwable {
        try {
            new LevelBean().compareTo((LevelBean) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LevelBean.class, ex);
        }
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn(null);
        try {
            levelBean.equals(new LevelBean());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LevelBean.class, ex);
        }
    }
    
    public void testEqualsThrowsNullPointerException1() throws Throwable {
        LevelBean obj = new LevelBean();
        obj.setColumn("testString");
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn("testString");
        try {
            levelBean.equals(obj);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LevelBean.class, ex);
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn("testLevelBeanColumn");
        try {
            levelBean.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LevelBean.class, ex);
            assertNull("levelBean.getHierarchyTable()", levelBean.getHierarchyTable());
            assertEquals("levelBean.getColumn()", "testLevelBeanColumn", levelBean.getColumn());
        }
    }
    
    public void testHashCodeThrowsNullPointerException1() throws Throwable {
        LevelBean levelBean = new LevelBean();
        levelBean.setColumn(null);
        try {
            levelBean.hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LevelBean.class, ex);
            assertNull("levelBean.getHierarchyTable()", levelBean.getHierarchyTable());
            assertNull("levelBean.getColumn()", levelBean.getColumn());
        }
    }
}

