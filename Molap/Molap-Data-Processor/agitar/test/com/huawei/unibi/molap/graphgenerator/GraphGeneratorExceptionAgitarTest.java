/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:20:04 PM
 * Time to generate: 00:09.392 seconds
 *
 */

package com.huawei.unibi.molap.graphgenerator;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.Locale;

public class GraphGeneratorExceptionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return GraphGeneratorException.class;
    }
    
    public void testConstructor() throws Throwable {
        Throwable t = new IllegalMonitorStateException();
        GraphGeneratorException graphGeneratorException = new GraphGeneratorException("testGraphGeneratorExceptionMsg", t);
        assertEquals("graphGeneratorException.getMessage()", "testGraphGeneratorExceptionMsg", graphGeneratorException.getMessage());
        assertEquals("graphGeneratorException.getMessage()", "testGraphGeneratorExceptionMsg", graphGeneratorException.getMessage());
        assertSame("graphGeneratorException.getCause()", t, graphGeneratorException.getCause());
    }
    
    public void testConstructor1() throws Throwable {
        GraphGeneratorException graphGeneratorException = new GraphGeneratorException("testGraphGeneratorExceptionMsg");
        assertEquals("graphGeneratorException.getMessage()", "testGraphGeneratorExceptionMsg", graphGeneratorException.getMessage());
        assertEquals("graphGeneratorException.getMessage()", "testGraphGeneratorExceptionMsg", graphGeneratorException.getMessage());
    }
    
    public void testGetLocalizedMessage() throws Throwable {
        String result = new GraphGeneratorException("testGraphGeneratorExceptionMsg").getLocalizedMessage(Locale.KOREAN);
        assertEquals("result", "", result);
    }
    
    public void testGetLocalizedMessage1() throws Throwable {
        GraphGeneratorException graphGeneratorException = new GraphGeneratorException("testGraphGeneratorExceptionMsg", new IllegalMonitorStateException("testGraphGeneratorExceptionParam1"));
        String result = graphGeneratorException.getLocalizedMessage();
        assertEquals("result", "testGraphGeneratorExceptionMsg", result);
    }
    
    public void testGetMessage() throws Throwable {
        GraphGeneratorException graphGeneratorException = new GraphGeneratorException("testGraphGeneratorExceptionMsg", new IllegalMonitorStateException("testGraphGeneratorExceptionParam1"));
        String result = graphGeneratorException.getMessage();
        assertEquals("result", "testGraphGeneratorExceptionMsg", result);
    }
}

