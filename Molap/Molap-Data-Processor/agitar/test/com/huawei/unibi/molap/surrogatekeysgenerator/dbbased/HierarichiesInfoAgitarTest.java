/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:20:39 PM
 * Time to generate: 00:09.752 seconds
 *
 */

package com.huawei.unibi.molap.surrogatekeysgenerator.dbbased;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.HashMap;
import java.util.Map;

public class HierarichiesInfoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HierarichiesInfo.class;
    }
    
    public void testConstructor() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        assertNull("hierarichiesInfo.getHierarichieName()", hierarichiesInfo.getHierarichieName());
    }
    
    public void testSetColumnIndex() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        int[] columnIndex = new int[1];
        hierarichiesInfo.setColumnIndex(columnIndex);
        assertSame("hierarichiesInfo.getColumnIndex()", columnIndex, hierarichiesInfo.getColumnIndex());
    }
    
    public void testSetColumnNames() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        String[] columnNames = new String[1];
        hierarichiesInfo.setColumnNames(columnNames);
        assertSame("hierarichiesInfo.getColumnNames()", columnNames, hierarichiesInfo.getColumnNames());
    }
    
    public void testSetColumnPropMap() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        Map columnPropMap = new HashMap(100, 100.0F);
        hierarichiesInfo.setColumnPropMap(columnPropMap);
        assertSame("hierarichiesInfo.getColumnPropMap()", columnPropMap, hierarichiesInfo.getColumnPropMap());
    }
    
    public void testSetHierarichieName() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        hierarichiesInfo.setHierarichieName("testHierarichiesInfoHierarichieName");
        assertEquals("hierarichiesInfo.getHierarichieName()", "testHierarichiesInfoHierarichieName", hierarichiesInfo.getHierarichieName());
    }
    
    public void testSetLoadToHierarichiTable() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        hierarichiesInfo.setLoadToHierarichiTable(true);
        assertTrue("hierarichiesInfo.isLoadToHierarichiTable()", hierarichiesInfo.isLoadToHierarichiTable());
    }
    
    public void testSetQuery() throws Throwable {
        HierarichiesInfo hierarichiesInfo = new HierarichiesInfo();
        hierarichiesInfo.setQuery("testHierarichiesInfoQuery");
        assertEquals("hierarichiesInfo.getQuery()", "testHierarichiesInfoQuery", hierarichiesInfo.getQuery());
    }
}

