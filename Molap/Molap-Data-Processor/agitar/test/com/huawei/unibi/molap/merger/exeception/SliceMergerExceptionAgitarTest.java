/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:23:26 PM
 * Time to generate: 00:16.519 seconds
 *
 */

package com.huawei.unibi.molap.merger.exeception;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.Locale;

public class SliceMergerExceptionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SliceMergerException.class;
    }
    
    public void testConstructor() throws Throwable {
        SliceMergerException sliceMergerException = new SliceMergerException("testSliceMergerExceptionMsg");
        assertEquals("sliceMergerException.getMessage()", "testSliceMergerExceptionMsg", sliceMergerException.getMessage());
        assertEquals("sliceMergerException.getMessage()", "testSliceMergerExceptionMsg", sliceMergerException.getMessage());
    }
    
    public void testConstructor1() throws Throwable {
        Throwable t = new IllegalMonitorStateException();
        SliceMergerException sliceMergerException = new SliceMergerException("testSliceMergerExceptionMsg", t);
        assertEquals("sliceMergerException.getMessage()", "testSliceMergerExceptionMsg", sliceMergerException.getMessage());
        assertSame("sliceMergerException.getCause()", t, sliceMergerException.getCause());
        assertEquals("sliceMergerException.getMessage()", "testSliceMergerExceptionMsg", sliceMergerException.getMessage());
    }
    
    public void testGetLocalizedMessage() throws Throwable {
        String result = new SliceMergerException("testSliceMergerExceptionMsg").getLocalizedMessage();
        assertEquals("result", "testSliceMergerExceptionMsg", result);
    }
    
    public void testGetLocalizedMessage1() throws Throwable {
        String result = new SliceMergerException(null).getLocalizedMessage();
        assertNull("result", result);
    }
    
    public void testGetLocalizedMessage2() throws Throwable {
        String result = new SliceMergerException("testSliceMergerExceptionMsg").getLocalizedMessage(Locale.SIMPLIFIED_CHINESE);
        assertEquals("result", "", result);
    }
    
    public void testGetMessage() throws Throwable {
        String result = new SliceMergerException("testSliceMergerExceptionMsg").getMessage();
        assertEquals("result", "testSliceMergerExceptionMsg", result);
    }
}

