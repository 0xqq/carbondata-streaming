/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:15:40 PM
 * Time to generate: 00:09.549 seconds
 *
 */

package com.huawei.unibi.molap.graphgenerator;

import com.agitar.lib.junit.AgitarTestCase;

public class AggregateTableAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AggregateTable.class;
    }
    
    public void testConstructor() throws Throwable {
        AggregateTable aggregateTable = new AggregateTable();
        assertNull("aggregateTable.getAggregateTableName()", aggregateTable.getAggregateTableName());
    }
    
    public void testSetActualAggLevels() throws Throwable {
        String[] actualAggLevels = new String[2];
        AggregateTable aggregateTable = new AggregateTable();
        aggregateTable.setActualAggLevels(actualAggLevels);
        assertSame("aggregateTable.getActualAggLevels()", actualAggLevels, aggregateTable.getActualAggLevels());
    }
    
    public void testSetAggLevels() throws Throwable {
        AggregateTable aggregateTable = new AggregateTable();
        String[] aggLevels = new String[2];
        aggregateTable.setAggLevels(aggLevels);
        assertSame("aggregateTable.getAggLevels()", aggLevels, aggregateTable.getAggLevels());
    }
    
    public void testSetAggMeasure() throws Throwable {
        AggregateTable aggregateTable = new AggregateTable();
        String[] aggMeasure = new String[0];
        aggregateTable.setAggMeasure(aggMeasure);
        assertSame("aggregateTable.getAggMeasure()", aggMeasure, aggregateTable.getAggMeasure());
    }
    
    public void testSetAggregateTableName() throws Throwable {
        AggregateTable aggregateTable = new AggregateTable();
        aggregateTable.setAggregateTableName("testAggregateTableAggregateTableName");
        assertEquals("aggregateTable.getAggregateTableName()", "testAggregateTableAggregateTableName", aggregateTable.getAggregateTableName());
    }
    
    public void testSetAggregator() throws Throwable {
        AggregateTable aggregateTable = new AggregateTable();
        String[] aggregator = new String[3];
        aggregateTable.setAggregator(aggregator);
        assertSame("aggregateTable.getAggregator()", aggregator, aggregateTable.getAggregator());
    }
}

