/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Aug 4, 2013 7:46:37 PM
 * Time to generate: 00:16.273 seconds
 *
 */

package com.huawei.unibi.molap.restructure.schema.updatemember;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXParseException;

public class MemberUpdateParserAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MemberUpdateParser.class;
    }
    
    public void testConstructor() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        assertEquals("memberUpdateParser.xmlPath", "testMemberUpdateParserXmlPath", getPrivateField(memberUpdateParser, "xmlPath"));
    }
    
    public void testGetElementsByName() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {"O"}, nodeList, 1);
        Mockingbird.setReturnValue(false, nodeList, "getLength", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getElementsByName", new Class[] {Element.class, String.class}, memberUpdateParser, new Object[] {element, "testMemberUpdateParserAttriName"});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetElementsByNameWithAggressiveMocks() throws Throwable {
        MemberUpdateParser memberUpdateParser = (MemberUpdateParser) Mockingbird.getProxyObject(MemberUpdateParser.class, true);
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Node node = (Node) Mockingbird.getProxyObject(Node.class);
        Element element2 = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.setReturnValue(element.getElementsByTagName(""), nodeList);
        Mockingbird.setReturnValue(nodeList.getLength(), 2);
        Mockingbird.setReturnValue(nodeList.item(0), node);
        Mockingbird.setReturnValue(node.getNodeType(), (short)0);
        Mockingbird.setReturnValue(nodeList.item(1), element2);
        Mockingbird.setReturnValue(element2.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList.add(element2), false);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getElementsByName", new Class[] {Element.class, String.class}, memberUpdateParser, new Object[] {element, ""});
        assertNotNull("result", result);
    }
    
    public void testGetLevels() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {"Level"}, nodeList, 1);
        Mockingbird.setReturnValue(false, nodeList, "getLength", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getLevels", new Class[] {Element.class}, memberUpdateParser, new Object[] {element});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetMembers() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {"Member"}, nodeList, 1);
        Mockingbird.setReturnValue(false, nodeList, "getLength", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        Object result = callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getMembers", new Class[] {Element.class}, memberUpdateParser, new Object[] {element});
        assertNull("result", result);
    }
    
    public void testGetMembersWithAggressiveMocks() throws Throwable {
        MemberUpdateParser memberUpdateParser = (MemberUpdateParser) Mockingbird.getProxyObject(MemberUpdateParser.class, true);
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Element element2 = (Element) Mockingbird.getProxyObject(Element.class);
        Element element3 = (Element) Mockingbird.getProxyObject(Element.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Element element4 = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", nodeList, 1);
        Mockingbird.setReturnValue(nodeList.getLength(), 2);
        Mockingbird.setReturnValue(nodeList.item(0), element2);
        Mockingbird.setReturnValue(element2.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList.add(element2), false);
        Mockingbird.setReturnValue(nodeList.item(1), element3);
        Mockingbird.setReturnValue(element3.getNodeType(), (short)1);
        Mockingbird.setReturnValue(arrayList.add(element3), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), element4);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>()", new Member());
        Mockingbird.setReturnValue(element4.getAttribute("newVal"), "");
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        Member result = (Member) callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getMembers", new Class[] {Element.class}, memberUpdateParser, new Object[] {element});
        assertEquals("result.getNewValue()", "", result.getNewValue());
    }
    
    public void testParseXMLWithAggressiveMocks() throws Throwable {
        MemberUpdateParser memberUpdateParser = (MemberUpdateParser) Mockingbird.getProxyObject(MemberUpdateParser.class, true);
        DocumentBuilderFactory documentBuilderFactory = (DocumentBuilderFactory) Mockingbird.getProxyObject(DocumentBuilderFactory.class);
        DocumentBuilder documentBuilder = (DocumentBuilder) Mockingbird.getProxyObject(DocumentBuilder.class);
        Document document = (Document) Mockingbird.getProxyObject(Document.class);
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Element element2 = (Element) Mockingbird.getProxyObject(Element.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Element element3 = (Element) Mockingbird.getProxyObject(Element.class);
        Element element4 = (Element) Mockingbird.getProxyObject(Element.class);
        Node node = (Node) Mockingbird.getProxyObject(Node.class);
        setPrivateField(memberUpdateParser, "xmlPath", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, DocumentBuilderFactory.class, "newInstance", "()javax.xml.parsers.DocumentBuilderFactory", new Object[] {}, documentBuilderFactory, 1);
        Mockingbird.setReturnValue(documentBuilderFactory.newDocumentBuilder(), documentBuilder);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, documentBuilder, "parse", "(java.io.File)org.w3c.dom.Document", new Object[] {file}, document, 1);
        Mockingbird.setReturnValue(document.getDocumentElement(), element);
        element.normalize();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(document.getElementsByTagName("Dimension"), nodeList);
        Mockingbird.setReturnValue(nodeList.getLength(), 2);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(nodeList.item(0), element2);
        Mockingbird.setReturnValue(element2.getNodeType(), (short)1);
        Mockingbird.setReturnValue(element2.getAttribute("name"), "");
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.replaceObjectForRecording(Dimension.class, "<init>(java.lang.String)", dimension);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(false, memberUpdateParser, "getElementsByName", "(org.w3c.dom.Element,java.lang.String)java.util.List", new Object[] {element2, "Level"}, list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), element3);
        Mockingbird.setReturnValue(element3.getAttribute("name"), "");
        Mockingbird.setReturnValue(element3.getAttribute("value"), "");
        Level level = (Level) Mockingbird.getProxyObject(Level.class);
        Mockingbird.replaceObjectForRecording(Level.class, "<init>(java.lang.String,java.lang.String)", level);
        Mockingbird.setReturnValue(false, memberUpdateParser, "getMembers", "(org.w3c.dom.Element)com.huawei.unibi.molap.restructure.schema.updatemember.Member", new Object[] {element3}, null, 1);
        Mockingbird.setReturnValue(arrayList2.add(level), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), element4);
        Mockingbird.setReturnValue(element4.getAttribute("name"), "");
        Mockingbird.setReturnValue(element4.getAttribute("value"), "");
        Level level2 = (Level) Mockingbird.getProxyObject(Level.class);
        Mockingbird.replaceObjectForRecording(Level.class, "<init>(java.lang.String,java.lang.String)", level2);
        Mockingbird.setReturnValue(false, memberUpdateParser, "getMembers", "(org.w3c.dom.Element)com.huawei.unibi.molap.restructure.schema.updatemember.Member", new Object[] {element4}, null, 1);
        Mockingbird.setReturnValue(arrayList2.add(level2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.add(dimension), false);
        Mockingbird.setReturnValue(nodeList.item(1), node);
        Mockingbird.setReturnValue(node.getNodeType(), (short)0);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        List result = memberUpdateParser.parseXML();
        assertNotNull("result", result);
    }
    
    public void testGetElementsByNameThrowsNullPointerException() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        Element element = (Element) Mockingbird.getProxyObject(Element.class);
        Mockingbird.enterRecordingMode();
        NodeList nodeList = (NodeList) Mockingbird.getProxyObject(NodeList.class);
        Mockingbird.setReturnValue(false, element, "getElementsByTagName", "(java.lang.String)org.w3c.dom.NodeList", new Object[] {null}, nodeList, 1);
        Mockingbird.setException(false, nodeList, "getLength", "()int", new Object[] {}, (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.enterTestMode(MemberUpdateParser.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getElementsByName", new Class[] {Element.class, String.class}, memberUpdateParser, new Object[] {element, ""});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetElementsByNameThrowsNullPointerException1() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        try {
            callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getElementsByName", new Class[] {Element.class, String.class}, memberUpdateParser, new Object[] {null, "testMemberUpdateParserAttriName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberUpdateParser.class, ex);
        }
    }
    
    public void testGetLevelsThrowsNullPointerException() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        try {
            callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getLevels", new Class[] {Element.class}, memberUpdateParser, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberUpdateParser.class, ex);
        }
    }
    
    public void testGetMembersThrowsNullPointerException() throws Throwable {
        MemberUpdateParser memberUpdateParser = new MemberUpdateParser("testMemberUpdateParserXmlPath");
        try {
            callPrivateMethod("com.huawei.unibi.molap.restructure.schema.updatemember.MemberUpdateParser", "getMembers", new Class[] {Element.class}, memberUpdateParser, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberUpdateParser.class, ex);
        }
    }
    
    public void testParseXMLThrowsFileNotFoundException() throws Throwable {
        try {
            new MemberUpdateParser("testMemberUpdateParserXmlPath").parseXML();
            fail("Expected FileNotFoundException to be thrown");
        } catch (FileNotFoundException ex) {
            assertEquals("ex.getClass()", FileNotFoundException.class, ex.getClass());
            assertThrownBy(FileInputStream.class, ex);
        }
    }
    
    public void testParseXMLThrowsNullPointerException() throws Throwable {
        try {
            new MemberUpdateParser(null).parseXML();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testParseXMLThrowsSAXParseException() throws Throwable {
        try {
            new MemberUpdateParser("").parseXML();
            fail("Expected SAXParseException to be thrown");
        } catch (SAXParseException ex) {
            assertEquals("ex.getMessage()", "Content is not allowed in prolog.", ex.getMessage());
            assertNull("ex.getPublicId()", ex.getPublicId());
            assertEquals("ex.getLineNumber()", 1, ex.getLineNumber());
            assertEquals("ex.getColumnNumber()", 1, ex.getColumnNumber());
            assertNull("ex.getException()", ex.getException());
        }
    }
}

