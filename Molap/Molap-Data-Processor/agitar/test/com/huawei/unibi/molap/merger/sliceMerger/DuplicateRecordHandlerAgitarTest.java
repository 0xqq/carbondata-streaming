/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:19:26 PM
 * Time to generate: 00:13.956 seconds
 *
 */

package com.huawei.unibi.molap.merger.sliceMerger;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;

public class DuplicateRecordHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DuplicateRecordHandler.class;
    }
    
    public void testConstructor() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        assertSame("duplicateRecordHandler.aggType", aggType, getPrivateField(duplicateRecordHandler, "aggType"));
        assertEquals("duplicateRecordHandler.getMeasuresList().size()", 0, duplicateRecordHandler.getMeasuresList().size());
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 0, duplicateRecordHandler.getMdkeyList().size());
        assertEquals("duplicateRecordHandler.leafNodeSize", 100, ((Number) getPrivateField(duplicateRecordHandler, "leafNodeSize")).intValue());
    }
    
    public void testAddList() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[2];
        double[] msrs = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 1, duplicateRecordHandler.getMdkeyList().size());
        assertEquals("duplicateRecordHandler.getMeasuresList().size()", 1, duplicateRecordHandler.getMeasuresList().size());
        assertEquals("duplicateRecordHandler.getSize()", 1, duplicateRecordHandler.getSize());
    }
    
    public void testClear() throws Throwable {
        String[] aggType = new String[2];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        duplicateRecordHandler.clear();
        assertEquals("duplicateRecordHandler.getMeasuresList().size()", 0, duplicateRecordHandler.getMeasuresList().size());
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 0, duplicateRecordHandler.getMdkeyList().size());
        assertEquals("duplicateRecordHandler.getSize()", 0, duplicateRecordHandler.getSize());
    }
    
    public void testGetEndKey() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[1];
        double[] msrs = new double[0];
        duplicateRecordHandler.addList(mdkey, msrs);
        byte[] result = duplicateRecordHandler.getEndKey();
        assertSame("result", mdkey, result);
        assertEquals("mdkey[0]", (byte)0, mdkey[0]);
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 1, duplicateRecordHandler.getMdkeyList().size());
    }
    
    public void testGetEndKey1() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[0];
        double[] msrs = new double[0];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ArrayList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(DuplicateRecordHandler.class);
        duplicateRecordHandler.addList(mdkey, msrs);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[0];
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", bytes, 1);
        Mockingbird.enterTestMode(DuplicateRecordHandler.class);
        byte[] result = duplicateRecordHandler.getEndKey();
        assertSame("result", bytes, result);
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 0, duplicateRecordHandler.getMdkeyList().size());
    }
    
    public void testGetMdkeyList() throws Throwable {
        String[] aggType = new String[3];
        ArrayList result = (ArrayList) new DuplicateRecordHandler(100, aggType).getMdkeyList();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetMdkeyList1() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double[] msrs = new double[0];
        byte[] mdkey = new byte[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        ArrayList result = (ArrayList) duplicateRecordHandler.getMdkeyList();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testGetMeasuresList() throws Throwable {
        double[] msrs = new double[2];
        byte[] mdkey = new byte[3];
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        duplicateRecordHandler.addList(mdkey, msrs);
        ArrayList result = (ArrayList) duplicateRecordHandler.getMeasuresList();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testGetMeasuresList1() throws Throwable {
        String[] aggType = new String[3];
        ArrayList result = (ArrayList) new DuplicateRecordHandler(100, aggType).getMeasuresList();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetSize() throws Throwable {
        String[] aggType = new String[2];
        int result = new DuplicateRecordHandler(100, aggType).getSize();
        assertEquals("result", 0, result);
    }
    
    public void testGetStartKey() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[0];
        double[] msrs = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        byte[] result = duplicateRecordHandler.getStartKey();
        assertSame("result", mdkey, result);
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 1, duplicateRecordHandler.getMdkeyList().size());
    }
    
    public void testGetStartKey1() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[2];
        double[] msrs = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        byte[] result = duplicateRecordHandler.getStartKey();
        assertSame("result", mdkey, result);
        assertEquals("mdkey[0]", (byte)0, mdkey[0]);
        assertEquals("duplicateRecordHandler.getMdkeyList().size()", 1, duplicateRecordHandler.getMdkeyList().size());
    }
    
    public void testMapAggregateType() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {"maX", new Double(0.0), new Double(-1.0)})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testMapAggregateType1() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {"min", new Double(0.0), new Double(100.0)})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testMapAggregateType2() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {"testDuplicateRecordHandlerTypeString", new Double(100.0), new Double(1000.0)})).doubleValue();
        assertEquals("result", 1100.0, result, 1.0E-6);
    }
    
    public void testMapAggregateType3() throws Throwable {
        String[] aggType = new String[2];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {"min", new Double(100.0), new Double(0.0)})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testMapAggregateType4() throws Throwable {
        String[] aggType = new String[2];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {"maX", new Double(0.0), new Double(0.0)})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testUpdateMeasures() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double[] msrs = new double[0];
        byte[] mdkey = new byte[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        double[] msrs2 = new double[3];
        duplicateRecordHandler.updateMeasures(msrs2);
        assertEquals("duplicateRecordHandler.getMeasuresList().size()", 1, duplicateRecordHandler.getMeasuresList().size());
    }
    
    public void testUpdateMeasures1() throws Throwable {
        String[] aggType = new String[2];
        aggType[0] = "testString";
        aggType[1] = "7";
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[0];
        double[] msrs = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        double[] msrs2 = new double[2];
        duplicateRecordHandler.updateMeasures(msrs2);
        assertEquals("duplicateRecordHandler.getMeasuresList().size()", 1, duplicateRecordHandler.getMeasuresList().size());
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        String[] aggType = new String[3];
        try {
            new DuplicateRecordHandler(-1, aggType);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal Capacity: -1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
    
    public void testGetEndKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        try {
            duplicateRecordHandler.getEndKey();
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("duplicateRecordHandler.getMdkeyList().size()", 0, duplicateRecordHandler.getMdkeyList().size());
        }
    }
    
    public void testGetStartKeyThrowsIndexOutOfBoundsException() throws Throwable {
        String[] aggType = new String[2];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        try {
            duplicateRecordHandler.getStartKey();
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("duplicateRecordHandler.getMdkeyList().size()", 0, duplicateRecordHandler.getMdkeyList().size());
        }
    }
    
    public void testMapAggregateTypeThrowsNullPointerException() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        try {
            callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.DuplicateRecordHandler", "mapAggregateType", new Class[] {String.class, double.class, double.class}, duplicateRecordHandler, new Object[] {null, new Double(100.0), new Double(1000.0)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DuplicateRecordHandler.class, ex);
        }
    }
    
    public void testUpdateMeasuresThrowsArrayIndexOutOfBoundsException() throws Throwable {
        double[] msrs = new double[3];
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        try {
            duplicateRecordHandler.updateMeasures(msrs);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("duplicateRecordHandler.getMeasuresList().size()", 0, duplicateRecordHandler.getMeasuresList().size());
        }
    }
    
    public void testUpdateMeasuresThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        double[] msrs = new double[0];
        byte[] mdkey = new byte[2];
        double[] msrs2 = new double[3];
        duplicateRecordHandler.addList(mdkey, msrs);
        String[] aggType2 = new String[1];
        aggType2[0] = "testString";
        DuplicateRecordHandler duplicateRecordHandler2 = new DuplicateRecordHandler(1000, aggType2);
        duplicateRecordHandler.getStartKey();
        duplicateRecordHandler2.addList(mdkey, msrs2);
        double[] msrs3 = new double[2];
        try {
            duplicateRecordHandler2.updateMeasures(msrs3);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(DuplicateRecordHandler.class, ex);
            assertEquals("duplicateRecordHandler2.getMeasuresList().size()", 1, duplicateRecordHandler2.getMeasuresList().size());
        }
    }
    
    public void testUpdateMeasuresThrowsIndexOutOfBoundsException() throws Throwable {
        String[] aggType = new String[0];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        Mockingbird.enterTestMode(DuplicateRecordHandler.class);
        try {
            duplicateRecordHandler.updateMeasures((double[]) null);
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("duplicateRecordHandler.getMeasuresList().size()", 0, duplicateRecordHandler.getMeasuresList().size());
        }
    }
    
    public void testUpdateMeasuresThrowsNullPointerException() throws Throwable {
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[0];
        double[] msrs = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs);
        try {
            duplicateRecordHandler.updateMeasures((double[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DuplicateRecordHandler.class, ex);
            assertEquals("duplicateRecordHandler.getMeasuresList().size()", 1, duplicateRecordHandler.getMeasuresList().size());
        }
    }
    
    public void testUpdateMeasuresThrowsNullPointerException1() throws Throwable {
        double[] msrs = new double[2];
        String[] aggType = new String[3];
        DuplicateRecordHandler duplicateRecordHandler = new DuplicateRecordHandler(100, aggType);
        byte[] mdkey = new byte[0];
        double[] msrs2 = new double[2];
        duplicateRecordHandler.addList(mdkey, msrs2);
        try {
            duplicateRecordHandler.updateMeasures(msrs);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DuplicateRecordHandler.class, ex);
            assertEquals("duplicateRecordHandler.getMeasuresList().size()", 1, duplicateRecordHandler.getMeasuresList().size());
        }
    }
}

