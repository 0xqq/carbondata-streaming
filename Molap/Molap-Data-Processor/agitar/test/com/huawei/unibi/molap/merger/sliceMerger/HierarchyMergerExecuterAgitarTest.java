/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on Jul 31, 2013 6:20:25 PM
 * Time to generate: 00:15.988 seconds
 *
 */

package com.huawei.unibi.molap.merger.sliceMerger;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import com.huawei.unibi.molap.merger.Util.RowTempFile;
import com.huawei.unibi.molap.merger.exeception.SliceMergerException;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

public class HierarchyMergerExecuterAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HierarchyMergerExecuter.class;
    }
    
    public void testConstructor() throws Throwable {
        Map filesMap = new HashMap(100, 100.0F);
        Map hierarchyAndKeySizeMap = new HashMap(1000, 1000.0F);
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(filesMap, hierarchyAndKeySizeMap, "testHierarchyMergerExecuterDesitinationLocation");
        assertSame("hierarchyMergerExecuter.hierarchyAndKeySizeMap", hierarchyAndKeySizeMap, getPrivateField(hierarchyMergerExecuter, "hierarchyAndKeySizeMap"));
        assertEquals("hierarchyMergerExecuter.destinationLocation", "testHierarchyMergerExecuterDesitinationLocation", getPrivateField(hierarchyMergerExecuter, "destinationLocation"));
        assertSame("hierarchyMergerExecuter.filesMap", filesMap, getPrivateField(hierarchyMergerExecuter, "filesMap"));
    }
    
    public void testRowTempFileComparatorConstructor() throws Throwable {
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F), "testRowTempFileComparatorDesitinationLocation");
        callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator", "<init>", new Class[] {HierarchyMergerExecuter.class, int.class}, null, new Object[] {hierarchyMergerExecuter, new Integer(100)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateRecordHolderQueue() throws Throwable {
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F), "testHierarchyMergerExecuterDesitinationLocation");
        callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter", "createRecordHolderQueue", new Class[] {int.class, int.class}, hierarchyMergerExecuter, new Object[] {new Integer(100), new Integer(1000)});
        int actual = ((Collection) getPrivateField(hierarchyMergerExecuter, "recordHolderHeap")).size();
        assertEquals("hierarchyMergerExecuter.recordHolderHeap.size()", 0, actual);
    }
    
    public void testMergeExecuter() throws Throwable {
        Map filesMap = new HashMap(100, 100.0F);
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(filesMap, new HashMap(1000, 1000.0F), "testHierarchyMergerExecuterDesitinationLocation");
        hierarchyMergerExecuter.mergeExecuter();
        assertSame("hierarchyMergerExecuter.filesMap", filesMap, getPrivateField(hierarchyMergerExecuter, "filesMap"));
    }
    
    public void testRowTempFileComparatorCompareWithAggressiveMocks() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"), true);
        RowTempFile rowTempFile = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes = new byte[3];
        RowTempFile rowTempFile2 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes2 = new byte[3];
        setPrivateField(comparator, "compareSize", new Integer(3));
        rowTempFile.setRow(bytes);
        rowTempFile2.setRow(bytes2);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        bytes[2] = (byte)1;
        bytes2[0] = (byte)0;
        bytes2[1] = (byte)0;
        bytes2[2] = (byte)0;
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator", "compare", new Class[] {RowTempFile.class, RowTempFile.class}, comparator, new Object[] {rowTempFile, rowTempFile2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testRowTempFileComparatorCompareWithAggressiveMocks1() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"), true);
        RowTempFile rowTempFile = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes = new byte[3];
        RowTempFile rowTempFile2 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes2 = new byte[3];
        setPrivateField(comparator, "compareSize", new Integer(3));
        rowTempFile.setRow(bytes);
        rowTempFile2.setRow(bytes2);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        bytes[2] = (byte)0;
        bytes2[0] = (byte)0;
        bytes2[1] = (byte)0;
        bytes2[2] = (byte)2;
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator", "compare", new Class[] {RowTempFile.class, RowTempFile.class}, comparator, new Object[] {rowTempFile, rowTempFile2})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testRowTempFileComparatorCompareWithAggressiveMocks2() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"), true);
        RowTempFile rowTempFile = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes = new byte[2];
        RowTempFile rowTempFile2 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes2 = new byte[2];
        setPrivateField(comparator, "compareSize", new Integer(2));
        rowTempFile.setRow(bytes);
        rowTempFile2.setRow(bytes2);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        bytes2[0] = (byte)0;
        bytes2[1] = (byte)0;
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator", "compare", new Class[] {RowTempFile.class, RowTempFile.class}, comparator, new Object[] {rowTempFile, rowTempFile2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCreateRecordHolderQueueThrowsIllegalArgumentException() throws Throwable {
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(new HashMap(100, 100.0F), new HashMap(1000, 1000.0F), "testHierarchyMergerExecuterDesitinationLocation");
        try {
            callPrivateMethod("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter", "createRecordHolderQueue", new Class[] {int.class, int.class}, hierarchyMergerExecuter, new Object[] {new Integer(0), new Integer(100)});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PriorityQueue.class, ex);
            assertNull("hierarchyMergerExecuter.recordHolderHeap", getPrivateField(hierarchyMergerExecuter, "recordHolderHeap"));
        }
    }
    
    public void testMergeExecuterThrowsIllegalArgumentException() throws Throwable {
        Map filesMap = new HashMap(100, 100.0F);
        filesMap.put("", new ArrayList());
        Map hierarchyAndKeySizeMap = new HashMap(1000, 1000.0F);
        hierarchyAndKeySizeMap.put("", new Integer(0));
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(filesMap, hierarchyAndKeySizeMap, "testHierarchyMergerExecuterDesitinationLocation");
        try {
            hierarchyMergerExecuter.mergeExecuter();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PriorityQueue.class, ex);
            assertSame("hierarchyMergerExecuter.hierarchyAndKeySizeMap", hierarchyAndKeySizeMap, getPrivateField(hierarchyMergerExecuter, "hierarchyAndKeySizeMap"));
            assertSame("hierarchyMergerExecuter.filesMap", filesMap, getPrivateField(hierarchyMergerExecuter, "filesMap"));
        }
    }
    
    public void testMergeExecuterThrowsNullPointerException() throws Throwable {
        Map hierarchyAndKeySizeMap = new HashMap(100, 100.0F);
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(null, hierarchyAndKeySizeMap, "testHierarchyMergerExecuterDesitinationLocation");
        try {
            hierarchyMergerExecuter.mergeExecuter();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyMergerExecuter.class, ex);
            assertNull("hierarchyMergerExecuter.filesMap", getPrivateField(hierarchyMergerExecuter, "filesMap"));
            assertSame("hierarchyMergerExecuter.hierarchyAndKeySizeMap", hierarchyAndKeySizeMap, getPrivateField(hierarchyMergerExecuter, "hierarchyAndKeySizeMap"));
        }
    }
    
    public void testMergeExecuterThrowsNullPointerException1() throws Throwable {
        Map filesMap = new HashMap(100, 100.0F);
        filesMap.put("testString", new ArrayList());
        Map hierarchyAndKeySizeMap = new HashMap(1000, 1000.0F);
        HierarchyMergerExecuter hierarchyMergerExecuter = new HierarchyMergerExecuter(filesMap, hierarchyAndKeySizeMap, "testHierarchyMergerExecuterDesitinationLocation");
        try {
            hierarchyMergerExecuter.mergeExecuter();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyMergerExecuter.class, ex);
            assertSame("hierarchyMergerExecuter.hierarchyAndKeySizeMap", hierarchyAndKeySizeMap, getPrivateField(hierarchyMergerExecuter, "hierarchyAndKeySizeMap"));
            assertSame("hierarchyMergerExecuter.filesMap", filesMap, getPrivateField(hierarchyMergerExecuter, "filesMap"));
        }
    }
    
    public void testMergeFilesThrowsSliceMergerExceptionWithAggressiveMocks() throws Throwable {
        HierarchyMergerExecuter hierarchyMergerExecuter = (HierarchyMergerExecuter) Mockingbird.getProxyObject(HierarchyMergerExecuter.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        setPrivateField(hierarchyMergerExecuter, "destinationLocation", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 0);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"), "<init>(com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter,int)", comparator);
        Mockingbird.replaceObjectForRecording(PriorityQueue.class, "<init>(int,java.util.Comparator)", Mockingbird.getProxyObject(PriorityQueue.class));
        Mockingbird.setReturnValue(list.get(0), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.lang.String)", fileNotFoundException);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(SliceMergerException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(SliceMergerException.class));
        Mockingbird.enterTestMode(HierarchyMergerExecuter.class);
        try {
            hierarchyMergerExecuter.mergeFiles((List) list, 0);
            fail("Expected SliceMergerException to be thrown");
        } catch (SliceMergerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testMergeFilesThrowsThrowableWithAggressiveMocks() throws Throwable {
        HierarchyMergerExecuter hierarchyMergerExecuter = (HierarchyMergerExecuter) Mockingbird.getProxyObject(HierarchyMergerExecuter.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        RowTempFile rowTempFile = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes = new byte[0];
        RowTempFile rowTempFile2 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes2 = new byte[0];
        RowTempFile rowTempFile3 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes3 = new byte[0];
        RowTempFile rowTempFile4 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        byte[] bytes4 = new byte[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(hierarchyMergerExecuter, "destinationLocation", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.enterNormalMode();
        rowTempFile.setRow(bytes);
        rowTempFile.setOffset(-1L);
        rowTempFile.setFileSize(2L);
        rowTempFile.setFileHolderIndex(0);
        rowTempFile2.setRow(bytes2);
        rowTempFile2.setOffset(-3L);
        rowTempFile2.setFileSize(4L);
        rowTempFile2.setFilePath("");
        rowTempFile2.setFileHolderIndex(0);
        rowTempFile3.setRow(bytes3);
        rowTempFile3.setOffset(-5L);
        rowTempFile3.setFileSize(4L);
        rowTempFile3.setFilePath("");
        rowTempFile3.setFileHolderIndex(0);
        rowTempFile4.setRow(bytes4);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter$RowTempFileComparator"), "<init>(com.huawei.unibi.molap.merger.sliceMerger.HierarchyMergerExecuter,int)", comparator);
        PriorityQueue priorityQueue = (PriorityQueue) Mockingbird.getProxyObject(PriorityQueue.class);
        Mockingbird.replaceObjectForRecording(PriorityQueue.class, "<init>(int,java.util.Comparator)", priorityQueue);
        Mockingbird.setReturnValue(list.get(0), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileOutputStream.class));
        BufferedOutputStream bufferedOutputStream = (BufferedOutputStream) Mockingbird.getProxyObject(BufferedOutputStream.class);
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", bufferedOutputStream);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file2);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        RowTempFile rowTempFile5 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        Mockingbird.replaceObjectForRecording(RowTempFile.class, "<init>(byte[],long,long,int,java.lang.String)", rowTempFile5);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, priorityQueue, "add", "(java.lang.Object)boolean", new Object[] {rowTempFile5}, boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file3);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        RowTempFile rowTempFile6 = (RowTempFile) Mockingbird.getProxyObject(RowTempFile.class);
        Mockingbird.replaceObjectForRecording(RowTempFile.class, "<init>(byte[],long,long,int,java.lang.String)", rowTempFile6);
        Mockingbird.setReturnValue(false, priorityQueue, "add", "(java.lang.Object)boolean", new Object[] {rowTempFile6}, boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(priorityQueue.poll(), rowTempFile);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[])void", null, 1);
        Mockingbird.setReturnValue(priorityQueue.poll(), rowTempFile2);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[])void", null, 1);
        Mockingbird.setReturnValue(false, priorityQueue, "add", "(java.lang.Object)boolean", new Object[] {rowTempFile2}, boolean2, 1);
        Mockingbird.setReturnValue(priorityQueue.poll(), rowTempFile3);
        Mockingbird.setReturnValue(false, bufferedOutputStream, "write", "(byte[])void", null, 1);
        Mockingbird.setReturnValue(false, priorityQueue, "add", "(java.lang.Object)boolean", new Object[] {rowTempFile3}, boolean2, 1);
        Mockingbird.setReturnValue(priorityQueue.poll(), rowTempFile4);
        Mockingbird.setException(false, bufferedOutputStream, "write", "(byte[])void", iOException, 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.Object)void", new Object[] {iOException}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(SliceMergerException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(SliceMergerException.class));
        Mockingbird.enterTestMode(HierarchyMergerExecuter.class);
        try {
            hierarchyMergerExecuter.mergeFiles((List) list, 2);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getMessage()", "com/huawei/unibi/molap/datastorage/store/impl/FileHolderImpl", ex.getMessage());
            assertThrownBy(HierarchyMergerExecuter.class, ex);
        }
    }
}

