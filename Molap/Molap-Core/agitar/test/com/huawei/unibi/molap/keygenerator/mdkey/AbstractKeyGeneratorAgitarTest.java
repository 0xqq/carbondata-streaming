/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:28:56 PM
 * Time to generate: 00:17.742 seconds
 *
 */

package com.huawei.unibi.molap.keygenerator.mdkey;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class AbstractKeyGeneratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractKeyGenerator.class;
    }
    
    public void testCompare() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[1];
        byte[] buffer2 = new byte[3];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 100, 0, buffer2, 1000, -1);
        assertEquals("result", 0, result);
    }
    
    public void testCompare1() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[3];
        buffer1[2] = (byte)1;
        byte[] buffer2 = new byte[3];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 2, 100, buffer2, 0, 1000);
        assertEquals("result", 1, result);
    }
    
    public void testCompare2() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[3];
        byte[] buffer2 = new byte[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", 0, result);
    }
    
    public void testCompare3() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[0];
        byte[] buffer2 = new byte[1];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 100, 1000, buffer2, 0, -1);
        assertEquals("result", 0, result);
    }
    
    public void testCompare4() throws Throwable {
        byte[] buffer1 = new byte[0];
        int[] lens = new int[1];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 100, 1000, buffer1, 0, -1);
        assertEquals("result", 0, result);
    }
    
    public void testCompare5() throws Throwable {
        byte[] buffer1 = new byte[2];
        buffer1[1] = (byte)127;
        byte[] buffer2 = new byte[4];
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", 127, result);
    }
    
    public void testCompare6() throws Throwable {
        byte[] buffer1 = new byte[3];
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer1);
        assertEquals("result", 0, result);
    }
    
    public void testCompare7() throws Throwable {
        byte[] buffer1 = new byte[2];
        byte[] buffer2 = new byte[4];
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", 0, result);
    }
    
    public void testCompare8() throws Throwable {
        int[] lens = new int[1];
        byte[] buffer1 = new byte[3];
        buffer1[0] = (byte)-35;
        byte[] buffer2 = new byte[1];
        buffer2[0] = (byte)-35;
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", 0, result);
    }
    
    public void testCompare9() throws Throwable {
        byte[] buffer2 = new byte[3];
        int[] lens = new int[0];
        byte[] buffer1 = new byte[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", 0, result);
    }
    
    public void testCompare10() throws Throwable {
        byte[] buffer2 = new byte[3];
        buffer2[0] = (byte)1;
        byte[] buffer1 = new byte[1];
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, buffer2);
        assertEquals("result", -1, result);
    }
    
    public void testGetDimCountWithAggressiveMocks() throws Throwable {
        AbstractKeyGenerator abstractKeyGenerator = (AbstractKeyGenerator) Mockingbird.getProxyObject(AbstractKeyGenerator.class, true);
        Mockingbird.enterTestMode(AbstractKeyGenerator.class);
        int result = abstractKeyGenerator.getDimCount();
        assertEquals("result", 0, result);
    }
    
    public void testGetKeyByteOffsetsWithAggressiveMocks() throws Throwable {
        AbstractKeyGenerator abstractKeyGenerator = (AbstractKeyGenerator) Mockingbird.getProxyObject(AbstractKeyGenerator.class, true);
        Mockingbird.enterTestMode(AbstractKeyGenerator.class);
        int[] result = abstractKeyGenerator.getKeyByteOffsets(0);
        assertNull("result", result);
    }
    
    public void testGetKeySizeInBytesWithAggressiveMocks() throws Throwable {
        AbstractKeyGenerator abstractKeyGenerator = (AbstractKeyGenerator) Mockingbird.getProxyObject(AbstractKeyGenerator.class, true);
        Mockingbird.enterTestMode(AbstractKeyGenerator.class);
        int result = abstractKeyGenerator.getKeySizeInBytes();
        assertEquals("result", 0, result);
    }
    
    public void testSetProperty() throws Throwable {
        int[] lens = new int[0];
        AbstractKeyGenerator multiDimKeyVarLengthGenerator = new MultiDimKeyVarLengthGenerator(lens);
        multiDimKeyVarLengthGenerator.setProperty(new Integer(100), "testString");
        assertEquals("(MultiDimKeyVarLengthGenerator) multiDimKeyVarLengthGenerator.getDimCount()", 0, ((MultiDimKeyVarLengthGenerator) multiDimKeyVarLengthGenerator).getDimCount());
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException() throws Throwable {
        byte[] buffer1 = new byte[3];
        int[] lens = new int[0];
        byte[] buffer2 = new byte[1];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 0, 100, buffer2, 1000, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1000", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[4];
        byte[] buffer2 = new byte[1];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 100, 1000, buffer2, 0, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer1 = new byte[3];
        byte[] buffer2 = new byte[3];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 0, 100, buffer2, 1, 1000);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException() throws Throwable {
        byte[] buffer1 = new byte[3];
        int[] lens = new int[0];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, 0, 100, (byte[]) null, 1000, 1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException1() throws Throwable {
        byte[] buffer1 = new byte[3];
        int[] lens = new int[0];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare(buffer1, (byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException2() throws Throwable {
        int[] lens = new int[0];
        byte[] buffer2 = new byte[4];
        try {
            new MultiDimKeyVarLengthGenerator(lens).compare((byte[]) null, buffer2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractKeyGenerator.class, ex);
        }
    }
}

