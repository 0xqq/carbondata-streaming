/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:33:24 PM
 * Time to generate: 02:34.161 seconds
 *
 */

package com.huawei.unibi.molap.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.Map;
import java.util.Properties;
import mondrian.olap.MondrianPropertiesBase;

public class MolapPropertiesAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapProperties.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testUrlPropertySourceConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "<init>", new Class[] {URL.class}, null, new Object[] {new URL("http://06:!pbQ!VjQJ@ruhwf.ibsn.net:20473/9/7_bgk6_/")});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddProperty() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("testMolapPropertiesKey", "testMolapPropertiesValue");
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testGetInstance() throws Throwable {
        MolapProperties result = MolapProperties.getInstance();
        assertNotNull("result", result);
    }
    
    public void testGetProperty() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        Object result = callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "getProperty", new Class[] {String.class}, molapProperties, new Object[] {"testMolapPropertiesKey"});
        assertNull("result", result);
    }
    
    public void testGetProperty1() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        String result = molapProperties.getProperty("molap.keystore.type", "testMolapPropertiesDefaultValue");
        assertEquals("result", "COMPRESSED_SINGLE_ARRAY", result);
    }
    
    public void testGetProperty2() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        String result = molapProperties.getProperty("testMolapPropertiesKey", "testMolapPropertiesDefaultValue");
        assertEquals("result", "testMolapPropertiesDefaultValue", result);
    }
    
    public void testLoadProperties() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testLoadPropertiesWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testLoadPropertiesWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setConstructorForException(FileInputStream.class, "<init>(java.io.File)", (Throwable) Mockingbird.getProxyObject(FileNotFoundException.class));
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testLoadPropertiesWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testLoadPropertiesWithAggressiveMocks3() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", new Object[] {fileInputStream}, iOException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testLoadWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(MondrianPropertiesBase.PropertySource.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(propertySource.openStream(), null);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setException(false, properties, "load", "(java.io.InputStream)void", new Object[] {null}, iOException, 1);
        Mockingbird.setReturnValue(propertySource.getDescription(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "load", new Class[] {MondrianPropertiesBase.PropertySource.class}, molapProperties, new Object[] {propertySource});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testPopulate() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.populate();
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testPopulateWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        URI uRI = (URI) Mockingbird.getProxyObject(URI.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "isFile", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "toURI", "()java.net.URI", new Object[] {}, uRI, 1);
        Mockingbird.setReturnValue(false, uRI, "toURL", "()java.net.URL", new Object[] {}, Mockingbird.getProxyObject(URL.class), 1);
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), "<init>(java.net.URL)", propertySource);
        InputStream stream = (InputStream) callPrivateMethod("mondrian.olap.MondrianPropertiesBase$PropertySource", "openStream", new Class[] {}, propertySource, new Object[] {});
        Mockingbird.setReturnValue(stream, null);
        Mockingbird.setReturnValue(false, properties, "load", "(java.io.InputStream)void", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        molapProperties.populate();
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testPopulateWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        URI uRI = (URI) Mockingbird.getProxyObject(URI.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "isFile", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "toURI", "()java.net.URI", new Object[] {}, uRI, 1);
        Mockingbird.setException(false, uRI, "toURL", "()java.net.URL", new Object[] {}, (Throwable) Mockingbird.getProxyObject(MalformedURLException.class), 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "warn", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "warn", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        molapProperties.populate();
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testUrlPropertySourceGetDescriptionWithAggressiveMocks() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        setPrivateField(propertySource, "url", uRL);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "toExternalForm", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "getDescription", new Class[] {}, propertySource, new Object[] {});
        assertEquals("result", "", result);
    }
    
    public void testUrlPropertySourceIsStaleWithAggressiveMocks() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        URLConnection uRLConnection = (URLConnection) Mockingbird.getProxyObject(URLConnection.class);
        setPrivateField(propertySource, "url", uRL);
        setPrivateField(propertySource, "lastModified", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openConnection", "()java.net.URLConnection", new Object[] {}, uRLConnection, 1);
        Mockingbird.setReturnValue(false, uRLConnection, "getLastModified", "()long", new Object[] {}, new Long(1L), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "isStale", new Class[] {}, propertySource, new Object[] {})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testUrlPropertySourceIsStaleWithAggressiveMocks1() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        URLConnection uRLConnection = (URLConnection) Mockingbird.getProxyObject(URLConnection.class);
        setPrivateField(propertySource, "url", uRL);
        setPrivateField(propertySource, "lastModified", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openConnection", "()java.net.URLConnection", new Object[] {}, uRLConnection, 1);
        Mockingbird.setReturnValue(false, uRLConnection, "getLastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "isStale", new Class[] {}, propertySource, new Object[] {})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testUrlPropertySourceOpenStreamWithAggressiveMocks() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        URLConnection uRLConnection = (URLConnection) Mockingbird.getProxyObject(URLConnection.class);
        setPrivateField(propertySource, "url", uRL);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openConnection", "()java.net.URLConnection", new Object[] {}, uRLConnection, 1);
        Mockingbird.setReturnValue(false, uRLConnection, "getLastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, uRLConnection, "getInputStream", "()java.io.InputStream", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        InputStream result = (InputStream) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "openStream", new Class[] {}, propertySource, new Object[] {});
        assertNull("result", result);
    }
    
    public void testValidateAndLoadDefaultProperties() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("molap.number.of.cores", "testMolapPropertiesValue");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateAndLoadDefaultProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateAndLoadDefaultProperties1() throws Throwable {
        MolapProperties privateField = (MolapProperties) getPrivateField(MolapProperties.class, "molapPropertiesInstance");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateAndLoadDefaultProperties", new Class[] {}, privateField, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("privateFieldMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("privateFieldMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateAndLoadDefaultProperties2() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateAndLoadDefaultProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateAndLoadDefaultProperties3() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("molap.max.file.size", "testMolapPropertiesValue");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateAndLoadDefaultProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateAndLoadDefaultProperties4() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("molap.cardinality.increment.value", "testMolapPropertiesValue");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateAndLoadDefaultProperties", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateBatchSize() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateBatchSize", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateBatchSizeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.batch.size", "1000"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(100001), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.batch.size", "1000"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateBatchSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateBatchSizeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.batch.size", "1000"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(4), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.batch.size", "1000"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateBatchSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateCardinalityIncrementValue() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("molap.cardinality.increment.value", "testMolapPropertiesValue");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateCardinalityIncrementValue", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateCardinalityIncrementValue1() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateCardinalityIncrementValue", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateCardinalityIncrementValueWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.cardinality.increment.value", "10"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(31), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.cardinality.increment.value", "10"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateCardinalityIncrementValue", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateCardinalityIncrementValueWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.cardinality.increment.value", "10"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.cardinality.increment.value", "10"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateCardinalityIncrementValue", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateLeafNodeSize() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateLeafNodeSize", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateLeafNodeSizeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.leaf.node.size", "8192"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(8193), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.leaf.node.size", "8192"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateLeafNodeSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateLeafNodeSizeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.leaf.node.size", "8192"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(4), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.leaf.node.size", "8192"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateLeafNodeSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateLeafNodeSizeWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.leaf.node.size", "8192"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.leaf.node.size", "8192"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateLeafNodeSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateMaxFileSize() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateMaxFileSize", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateMaxFileSizeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.max.file.size", "100"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1001), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.max.file.size", "100"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateMaxFileSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateMaxFileSizeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.max.file.size", "100"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.max.file.size", "100"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateMaxFileSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateNumCores() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateNumCores", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateNumCores1() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        molapProperties.addProperty("molap.number.of.cores", "testMolapPropertiesValue");
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateNumCores", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 4, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateNumCoresWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.number.of.cores", "2"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(17), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.number.of.cores", "2"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateNumCores", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateNumCoresWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.number.of.cores", "2"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.number.of.cores", "2"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateNumCores", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateSortSize() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateSortSize", new Class[] {}, molapProperties, new Object[] {});
        boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
    }
    
    public void testValidateSortSizeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.sort.size", "100000"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1000001), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.sort.size", "100000"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateSortSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateSortSizeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.sort.size", "100000"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(1808), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.sort.size", "100000"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateSortSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testValidateSortSizeWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Properties properties = (Properties) Mockingbird.getProxyObject(Properties.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapProperties.class, "molapProperties", properties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, properties, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"molap.sort.size", "100000"}, "", 1);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, properties, "setProperty", "(java.lang.String,java.lang.String)java.lang.Object", new Object[] {"molap.sort.size", "100000"}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "validateSortSize", new Class[] {}, molapProperties, new Object[] {});
        assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
        assertNotNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
    }
    
    public void testAddPropertyThrowsNullPointerException() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        try {
            molapProperties.addProperty(null, "testMolapPropertiesValue");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
        }
    }
    
    public void testGetPropertyThrowsNullPointerException() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "getProperty", new Class[] {String.class}, molapProperties, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetPropertyThrowsNullPointerException1() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        try {
            molapProperties.getProperty(null, "testMolapPropertiesDefaultValue");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testLoadPropertiesThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        setPrivateField(MolapProperties.class, "molapProperties", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapProperties.class, ex);
            boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
            assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
            assertNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
        }
    }
    
    public void testLoadPropertiesThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapProperties.class, "molapProperties");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(MolapProperties.class, "molapProperties", null);
        setPrivateField(MolapProperties.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapProperties.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapProperties.class, ex);
            assertNotNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
            assertNull("molapPropertiesMolapProperties.molapProperties", getPrivateField(MolapProperties.class, "molapProperties"));
        }
    }
    
    public void testLoadPropertiesThrowsThrowableWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapProperties.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        setPrivateField(MolapProperties.class, "LOGGER", null);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setConstructorForException(FileInputStream.class, "<init>(java.io.File)", (Throwable) Mockingbird.getProxyObject(FileNotFoundException.class));
        Mockingbird.enterTestMode(MolapProperties.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "loadProperties", new Class[] {}, molapProperties, new Object[] {});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapProperties.class, ex);
            assertNull("molapPropertiesMolapProperties.LOGGER", getPrivateField(MolapProperties.class, "LOGGER"));
            assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
        }
    }
    
    public void testLoadThrowsNullPointerException() throws Throwable {
        MolapProperties molapProperties = (MolapProperties) callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "<init>", new Class[] {}, null, new Object[] {});
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(MondrianPropertiesBase.PropertySource.class);
        Mockingbird.enterRecordingMode();
        Object stream = callPrivateMethod("mondrian.olap.MondrianPropertiesBase$PropertySource", "openStream", new Class[] {}, propertySource, new Object[] {});
        Mockingbird.setException(stream, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapProperties.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties", "load", new Class[] {MondrianPropertiesBase.PropertySource.class}, molapProperties, new Object[] {propertySource});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("molapPropertiesMolapProperties.molapProperties.size()", 3, ((Map) getPrivateField(MolapProperties.class, "molapProperties")).size());
            boolean actual = ((LogService) getPrivateField(MolapProperties.class, "LOGGER")).isDebugEnabled();
            assertTrue("molapPropertiesMolapProperties.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testUrlPropertySourceGetConnectionThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        RuntimeException runtimeException = (RuntimeException) Mockingbird.getProxyObject(RuntimeException.class);
        setPrivateField(propertySource, "url", uRL);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, uRL, "openConnection", "()java.net.URLConnection", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Object.class, "newInternal", "(java.lang.Throwable,java.lang.String)java.lang.RuntimeException", runtimeException, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "getConnection", new Class[] {}, propertySource, new Object[] {});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URL.class, ex);
        }
    }
    
    public void testUrlPropertySourceOpenStreamThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        MondrianPropertiesBase.PropertySource propertySource = (MondrianPropertiesBase.PropertySource) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"), true);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        URLConnection uRLConnection = (URLConnection) Mockingbird.getProxyObject(URLConnection.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        RuntimeException runtimeException = (RuntimeException) Mockingbird.getProxyObject(RuntimeException.class);
        setPrivateField(propertySource, "url", uRL);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, uRL, "openConnection", "()java.net.URLConnection", new Object[] {}, uRLConnection, 1);
        Mockingbird.setReturnValue(false, uRLConnection, "getLastModified", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setException(false, uRLConnection, "getInputStream", "()java.io.InputStream", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Object.class, "newInternal", "(java.lang.Throwable,java.lang.String)java.lang.RuntimeException", runtimeException, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource"));
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapProperties$UrlPropertySource", "openStream", new Class[] {}, propertySource, new Object[] {});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URL.class, ex);
        }
    }
}

