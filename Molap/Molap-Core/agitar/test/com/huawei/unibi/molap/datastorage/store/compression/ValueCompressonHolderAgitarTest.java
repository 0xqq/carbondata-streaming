/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:36:14 PM
 * Time to generate: 00:15.022 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.compression;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinFloat;

public class ValueCompressonHolderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ValueCompressonHolder.class;
    }
    
    public void testConstructor() throws Throwable {
        new ValueCompressonHolder();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testUnCompress() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "doubleCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "doubleCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_DOUBLE, unCompressValue, bytes);
        assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertNotNull("ValueCompressonHolder.doubleCompressor", getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompress1() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "byteCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "byteCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_BYTE, unCompressValue, bytes);
        assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertNotNull("ValueCompressonHolder.byteCompressor", getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompress2() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "shortCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "shortCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_SHORT, unCompressValue, bytes);
        assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertNotNull("ValueCompressonHolder.shortCompressor", getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompress3() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "intCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "intCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_INT, unCompressValue, bytes);
        assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertNotNull("ValueCompressonHolder.intCompressor", getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompress4() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "longCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "longCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_LONG, unCompressValue, bytes);
        assertNotNull("ValueCompressonHolder.longCompressor", getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompress5() throws Throwable {
        storeStaticField(ValueCompressonHolder.class, "floatCompressor");
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        setPrivateField(ValueCompressonHolder.class, "floatCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), null);
        unCompressValue.setValue((Object) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(ValueCompressonHolder.class);
        ValueCompressonHolder.unCompress(ValueCompressionUtil.DataType.DATA_FLOAT, unCompressValue, bytes);
        assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
        assertNotNull("ValueCompressonHolder.floatCompressor", getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
        assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
        assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
        assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
        assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
    }
    
    public void testUnCompressThrowsNullPointerException() throws Throwable {
        byte[] data = new byte[0];
        ValueCompressonHolder.UnCompressValue value = new UnCompressMaxMinFloat();
        try {
            ValueCompressonHolder.unCompress(null, value, data);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressonHolder.class, ex);
            assertEquals("ValueCompressonHolder.longCompressor", SnappyCompression.SnappyLongCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "longCompressor"));
            assertEquals("ValueCompressonHolder.floatCompressor", SnappyCompression.SnappyFloatCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "floatCompressor"));
            assertEquals("ValueCompressonHolder.intCompressor", SnappyCompression.SnappyIntCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "intCompressor"));
            assertEquals("ValueCompressonHolder.doubleCompressor", SnappyCompression.SnappyDoubleCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "doubleCompressor"));
            assertEquals("ValueCompressonHolder.shortCompressor", SnappyCompression.SnappyShortCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "shortCompressor"));
            assertEquals("ValueCompressonHolder.byteCompressor", SnappyCompression.SnappyByteCompression.INSTANCE, getPrivateField(ValueCompressonHolder.class, "byteCompressor"));
        }
    }
}

