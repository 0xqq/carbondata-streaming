/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:30:09 PM
 * Time to generate: 00:33.968 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.util.MolapCoreLogEvent;
import java.io.FileInputStream;
import java.io.FilePermission;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class FileHolderImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FileHolderImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
    }
    
    public void testConstructor1() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl(100);
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
    }
    
    public void testFinish() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        fileHolderImpl.finish();
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
    }
    
    public void testFinishWithAggressiveMocks() throws Throwable {
        storeStaticField(FileHolderImpl.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        FileChannel fileChannel2 = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        FileChannel fileChannel3 = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        FileChannel fileChannel4 = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        setPrivateField(fileHolderImpl, "fileNameAndStreamCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        setPrivateField(FileHolderImpl.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), fileChannel);
        Mockingbird.setReturnValue(false, fileChannel, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), fileChannel2);
        Mockingbird.setException(false, fileChannel2, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), fileChannel3);
        Mockingbird.setException(false, fileChannel3, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), fileChannel4);
        Mockingbird.setReturnValue(false, fileChannel4, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(FileHolderImpl.class);
        fileHolderImpl.finish();
        assertNotNull("fileHolderImplFileHolderImpl.LOGGER", getPrivateField(FileHolderImpl.class, "LOGGER"));
        assertNotNull("fileHolderImpl.fileNameAndStreamCache", getPrivateField(fileHolderImpl, "fileNameAndStreamCache"));
    }
    
    public void testGetFileSizeWithAggressiveMocks() throws Throwable {
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        setPrivateField(fileHolderImpl, "fileNameAndStreamCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), fileChannel);
        Mockingbird.setReturnValue(fileChannel.size(), 0L);
        Mockingbird.enterTestMode(FileHolderImpl.class);
        long result = fileHolderImpl.getFileSize("");
        assertEquals("result", 0L, result);
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        assertNotNull("fileHolderImpl.fileNameAndStreamCache", getPrivateField(fileHolderImpl, "fileNameAndStreamCache"));
    }
    
    public void testGetFileSizeWithAggressiveMocks1() throws Throwable {
        storeStaticField(FileHolderImpl.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(fileHolderImpl, "fileNameAndStreamCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), fileChannel);
        setPrivateField(FileHolderImpl.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setException(fileChannel.size(), iOException);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(FileHolderImpl.class);
        long result = fileHolderImpl.getFileSize("");
        assertEquals("result", 0L, result);
        assertNotNull("fileHolderImplFileHolderImpl.LOGGER", getPrivateField(FileHolderImpl.class, "LOGGER"));
        assertNotNull("fileHolderImpl.fileNameAndStreamCache", getPrivateField(fileHolderImpl, "fileNameAndStreamCache"));
    }
    
    public void testRead() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        ByteBuffer result = (ByteBuffer) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl", "read", new Class[] {FileChannel.class, int.class, long.class}, fileHolderImpl, new Object[] {null, new Integer(100), new Long(100L)});
        boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, result, new Object[] {})).booleanValue();
        assertFalse("result.isDirect()", actual);
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadByteArray() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        byte[] result = fileHolderImpl.readByteArray("testFileHolderImplFilePath", 100L, 0);
        assertEquals("result.length", 0, result.length);
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadByteArray1() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        byte[] result = fileHolderImpl.readByteArray("testFileHolderImplFilePath", 100L, 100);
        assertEquals("result.length", 100, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadByteArrayWithAggressiveMocks() throws Throwable {
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        byte[] bytes = new byte[0];
        setPrivateField(fileHolderImpl, "fileNameAndStreamCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", fileChannel, 1);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.position(0L), null);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer, "array", "()byte[]", new Object[] {}, bytes, 1);
        Mockingbird.enterTestMode(FileHolderImpl.class);
        byte[] result = fileHolderImpl.readByteArray("", 0L, 0);
        assertEquals("result.length", 0, result.length);
        assertNotNull("fileHolderImpl.fileNameAndStreamCache", getPrivateField(fileHolderImpl, "fileNameAndStreamCache"));
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadDouble() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        long result = fileHolderImpl.readDouble("testFileHolderImplFilePath", 100L);
        assertEquals("result", 0L, result);
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadInt() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        int result = fileHolderImpl.readInt("testFileHolderImplFilePath", 100L);
        assertEquals("result", 0, result);
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testReadIntWithAggressiveMocks() throws Throwable {
        storeStaticField(FileHolderImpl.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(fileHolderImpl, "fileNameAndStreamCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(FileHolderImpl.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.position(0L), null);
        Mockingbird.setException(fileChannel.read(byteBuffer), iOException);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 0);
        Mockingbird.enterTestMode(FileHolderImpl.class);
        int result = fileHolderImpl.readInt("", 0L);
        assertEquals("result", 0, result);
        assertNotNull("fileHolderImpl.fileNameAndStreamCache", getPrivateField(fileHolderImpl, "fileNameAndStreamCache"));
        assertNotNull("fileHolderImplFileHolderImpl.LOGGER", getPrivateField(FileHolderImpl.class, "LOGGER"));
    }
    
    public void testUpdateCache() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        Object result = callPrivateMethod("com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl", "updateCache", new Class[] {String.class}, fileHolderImpl, new Object[] {"testFileHolderImplFilePath"});
        assertNull("result", result);
        assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new FileHolderImpl(-1);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Illegal initial capacity: -1", ex.getMessage());
            assertThrownBy(HashMap.class, ex);
        }
    }
    
    public void testGetFileSizeThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            fileHolderImpl.getFileSize("testFileHolderImplFilePath");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileHolderImpl.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testReadByteArrayThrowsIllegalArgumentException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            fileHolderImpl.readByteArray("testFileHolderImplFilePath", 100L, -1);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testReadByteArrayThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            fileHolderImpl.readByteArray(null, 100L, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testReadDoubleThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            fileHolderImpl.readDouble(null, 100L);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testReadIntThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            fileHolderImpl.readInt(null, 100L);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testUpdateCacheThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolderImpl = new FileHolderImpl();
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl", "updateCache", new Class[] {String.class}, fileHolderImpl, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertEquals("fileHolderImpl.fileNameAndStreamCache.size()", 0, ((Map) getPrivateField(fileHolderImpl, "fileNameAndStreamCache")).size());
            assertTrue("fileHolderImplFileHolderImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(FileHolderImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
}

