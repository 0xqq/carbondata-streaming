/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:03 PM
 * Time to generate: 00:26.074 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.data.compressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneInt;

public class AbstractHeavyCompressedDoubleArrayDataStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractHeavyCompressedDoubleArrayDataStore.class;
    }
    
    public void testClear() throws Throwable {
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        heavyCompressedDoubleArrayDataInMemoryStore.clear();
        Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
        assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 1000, datastore.length);
    }
    
    public void testGetLength() throws Throwable {
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 0);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        short result = heavyCompressedDoubleArrayDataInMemoryStore.getLength();
        assertEquals("result", (short)0, result);
    }
    
    public void testGetLength1() throws Throwable {
        short result = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000).getLength();
        assertEquals("result", (short)0, result);
    }
    
    public void testGetLength2() throws Throwable {
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        valueCompressionModel.setUnCompressValues(unCompressValues);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        short result = heavyCompressedDoubleArrayDataInMemoryStore.getLength();
        assertEquals("result", (short)1, result);
    }
    
    public void testGetWritableMeasureDataArray() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNoneInt();
        unCompressValues[1] = new UnCompressNonDecimalMaxMinLong();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[3];
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testAbstractHeavyCompressedDoubleArrayDataStoreFileName");
        ValueCompressonHolder.UnCompressValue[] unCompressValues2 = new ValueCompressonHolder.UnCompressValue[0];
        compressionModel.setUnCompressValues(unCompressValues2);
        byte[][] result = heavyCompressedDoubleArrayDataFileStore.getWritableMeasureDataArray();
        assertEquals("result.length", 2, result.length);
        assertNull("result[0]", result[0]);
    }
    
    public void testGetWritableMeasureDataArray1() throws Throwable {
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 0);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        byte[][] result = heavyCompressedDoubleArrayDataInMemoryStore.getWritableMeasureDataArray();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testPut() throws Throwable {
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1);
        double[] value = new double[2];
        heavyCompressedDoubleArrayDataInMemoryStore.put(0, value);
        Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
        assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 1, datastore.length);
    }
    
    public void testPut1() throws Throwable {
        double[] value = new double[2];
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 0);
        heavyCompressedDoubleArrayDataInMemoryStore.put(100, value);
        Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
        assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 0, datastore.length);
    }
    
    public void testPut2() throws Throwable {
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1, valueCompressionModel);
        double[] value = new double[2];
        heavyCompressedDoubleArrayDataInMemoryStore.put(0, value);
        double[] value2 = new double[3];
        heavyCompressedDoubleArrayDataInMemoryStore.put(0, value2);
        Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
        assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 1, datastore.length);
    }
    
    public void testGetWritableMeasureDataArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[0];
        compressionModel.setUnCompressValues(unCompressValues);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel);
        ValueCompressonHolder.UnCompressValue compressNone = ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_SHORT);
        ValueCompressonHolder.UnCompressValue[] unCompressValues2 = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues2[0] = compressNone;
        compressionModel.setUnCompressValues(unCompressValues2);
        try {
            heavyCompressedDoubleArrayDataFileStore.getWritableMeasureDataArray();
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            ValueCompressonHolder.UnCompressValue[] values = ((HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore).values;
            assertEquals("(HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore.values.length", 0, values.length);
        }
    }
    
    public void testGetWritableMeasureDataArrayThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 0, compressionModel);
        try {
            heavyCompressedDoubleArrayDataFileStore.getWritableMeasureDataArray();
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            ValueCompressonHolder.UnCompressValue[] values = ((HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore).values;
            assertEquals("(HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore.values.length", 100, values.length);
        }
    }
    
    public void testGetWritableMeasureDataArrayThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressMaxMinDefault();
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        int[] ints = new int[1];
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        valueCompressionModel.setUnCompressValues(unCompressValues);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.getWritableMeasureDataArray();
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            ValueCompressonHolder.UnCompressValue[] values = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).values;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.values.length", 1, values.length);
        }
    }
    
    public void testGetWritableMeasureDataArrayThrowsNullPointerException() throws Throwable {
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[3];
        unCompressValues[0] = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        unCompressValues[1] = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        unCompressValues[2] = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        Mockingbird.setReturnValue(valueCompressionModel.getUnCompressValues(), unCompressValues);
        Mockingbird.enterTestMode(AbstractHeavyCompressedDoubleArrayDataStore.class);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        Mockingbird.enterRecordingMode();
        ValueCompressonHolder.UnCompressValue[] unCompressValues2 = new ValueCompressonHolder.UnCompressValue[0];
        Mockingbird.setReturnValue(valueCompressionModel.getUnCompressValues(), unCompressValues2);
        Mockingbird.enterTestMode(AbstractHeavyCompressedDoubleArrayDataStore.class);
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.getWritableMeasureDataArray();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            ValueCompressonHolder.UnCompressValue[] values = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).values;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.values.length", 3, values.length);
        }
    }
    
    public void testGetWritableMeasureDataArrayThrowsNullPointerException1() throws Throwable {
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000, valueCompressionModel);
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.getWritableMeasureDataArray();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            ValueCompressonHolder.UnCompressValue[] values = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).values;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.values.length", 100, values.length);
        }
    }
    
    public void testGetWritableMeasureDataArrayThrowsNullPointerException2() throws Throwable {
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000);
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.getWritableMeasureDataArray();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object object = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).values;
            assertNull("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.values", object);
        }
    }
    
    public void testPutThrowsArrayIndexOutOfBoundsException() throws Throwable {
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1);
        double[] value = new double[2];
        heavyCompressedDoubleArrayDataInMemoryStore.put(0, value);
        double[] value2 = new double[2];
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.put(100, value2);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 1, datastore.length);
        }
    }
    
    public void testPutThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(100, 1000);
        double[] value = new double[4];
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.put(0, value);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "4", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 1000, datastore.length);
        }
    }
    
    public void testPutThrowsNegativeArraySizeException() throws Throwable {
        double[] doubles = new double[2];
        int[] ints = new int[1];
        double[] value = new double[1];
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {value, doubles, ints, new Integer(0)});
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataInMemoryStore = new HeavyCompressedDoubleArrayDataInMemoryStore(-1, 100, valueCompressionModel);
        try {
            heavyCompressedDoubleArrayDataInMemoryStore.put(100, value);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object[] datastore = ((HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore).datastore;
            assertEquals("(HeavyCompressedDoubleArrayDataInMemoryStore) heavyCompressedDoubleArrayDataInMemoryStore.datastore.length", 100, datastore.length);
        }
    }
    
    public void testPutThrowsNullPointerException() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel);
        try {
            heavyCompressedDoubleArrayDataFileStore.put(100, (double[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object[] datastore = ((HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore).datastore;
            assertEquals("(HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore.datastore.length", 1000, datastore.length);
        }
    }
    
    public void testPutThrowsNullPointerException1() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testAbstractHeavyCompressedDoubleArrayDataStoreMeasureMetaDataFileLocation", 100);
        long[] measuresOffsetsArray = new long[1];
        int[] measuresLengthArray = new int[0];
        AbstractHeavyCompressedDoubleArrayDataStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testAbstractHeavyCompressedDoubleArrayDataStoreFileName");
        double[] value = new double[3];
        try {
            heavyCompressedDoubleArrayDataFileStore.put(100, value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
            Object object = ((HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore).datastore;
            assertNull("(HeavyCompressedDoubleArrayDataFileStore) heavyCompressedDoubleArrayDataFileStore.datastore", object);
        }
    }
}

