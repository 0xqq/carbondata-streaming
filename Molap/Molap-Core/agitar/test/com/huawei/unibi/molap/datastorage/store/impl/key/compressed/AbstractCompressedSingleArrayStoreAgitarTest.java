/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:28:54 PM
 * Time to generate: 00:21.353 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.key.compressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.compression.Compressor;

public class AbstractCompressedSingleArrayStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractCompressedSingleArrayStore.class;
    }
    
    public void testClear() throws Throwable {
        AbstractCompressedSingleArrayStore compressedSingleArrayKeyInMemoryStore = new CompressedSingleArrayKeyInMemoryStore(100, 1000);
        compressedSingleArrayKeyInMemoryStore.clear();
        byte[] datastore = ((CompressedSingleArrayKeyInMemoryStore) compressedSingleArrayKeyInMemoryStore).datastore;
        assertEquals("(CompressedSingleArrayKeyInMemoryStore) compressedSingleArrayKeyInMemoryStore.datastore.length", 100000, datastore.length);
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        storeStaticField(AbstractCompressedSingleArrayStore.class, "compressor");
        AbstractCompressedSingleArrayStore abstractCompressedSingleArrayStore = (AbstractCompressedSingleArrayStore) Mockingbird.getProxyObject(AbstractCompressedSingleArrayStore.class, true);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes2 = new byte[0];
        abstractCompressedSingleArrayStore.datastore = bytes;
        setPrivateField(abstractCompressedSingleArrayStore, "sizeOfEachElement", new Integer(0));
        setPrivateField(AbstractCompressedSingleArrayStore.class, "compressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.unCompress(bytes), bytes2);
        Mockingbird.enterTestMode(AbstractCompressedSingleArrayStore.class);
        byte[] result = abstractCompressedSingleArrayStore.get(0, null);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetWritableKeyArrayWithAggressiveMocks() throws Throwable {
        storeStaticField(AbstractCompressedSingleArrayStore.class, "compressor");
        AbstractCompressedSingleArrayStore abstractCompressedSingleArrayStore = (AbstractCompressedSingleArrayStore) Mockingbird.getProxyObject(AbstractCompressedSingleArrayStore.class, true);
        byte[] bytes = new byte[0];
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes2 = new byte[0];
        abstractCompressedSingleArrayStore.datastore = bytes;
        setPrivateField(AbstractCompressedSingleArrayStore.class, "compressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.compress(bytes), bytes2);
        Mockingbird.enterTestMode(AbstractCompressedSingleArrayStore.class);
        byte[] result = abstractCompressedSingleArrayStore.getWritableKeyArray();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testPut() throws Throwable {
        AbstractCompressedSingleArrayStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(100, 0, 100L, "testAbstractCompressedSingleArrayStoreFilePath", 1000);
        compressedSingleArrayKeyFileStore.clear();
        byte[] value = new byte[1];
        compressedSingleArrayKeyFileStore.put(100, value);
        int actual = ((CompressedSingleArrayKeyFileStore) compressedSingleArrayKeyFileStore).sizeOfEachElement;
        assertEquals("(CompressedSingleArrayKeyFileStore) compressedSingleArrayKeyFileStore.sizeOfEachElement", 0, actual);
        byte[] datastore = ((CompressedSingleArrayKeyFileStore) compressedSingleArrayKeyFileStore).datastore;
        assertEquals("(CompressedSingleArrayKeyFileStore) compressedSingleArrayKeyFileStore.datastore.length", 0, datastore.length);
    }
    
    public void testPutThrowsArrayIndexOutOfBoundsException() throws Throwable {
        byte[] value = new byte[0];
        try {
            new CompressedSingleArrayKeyInMemoryStore(100, 1000).put(100, value);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
        }
    }
    
    public void testPutThrowsNullPointerException() throws Throwable {
        AbstractCompressedSingleArrayStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(100, 1000, 100L, "testAbstractCompressedSingleArrayStoreFilePath", 0);
        byte[] value = new byte[46];
        try {
            compressedSingleArrayKeyFileStore.put(100, value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
        }
    }
}

