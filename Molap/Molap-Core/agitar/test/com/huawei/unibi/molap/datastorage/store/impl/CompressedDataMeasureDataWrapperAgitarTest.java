/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:21 PM
 * Time to generate: 00:15.507 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;

public class CompressedDataMeasureDataWrapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CompressedDataMeasureDataWrapper.class;
    }
    
    public void testConstructor() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] values = new ValueCompressonHolder.UnCompressValue[1];
        int[] decimal = new int[1];
        double[] maxValue = new double[3];
        CompressedDataMeasureDataWrapper compressedDataMeasureDataWrapper = new CompressedDataMeasureDataWrapper(values, decimal, maxValue);
        assertSame("compressedDataMeasureDataWrapper.maxValue", maxValue, getPrivateField(compressedDataMeasureDataWrapper, "maxValue"));
        assertSame("compressedDataMeasureDataWrapper.decimal", decimal, getPrivateField(compressedDataMeasureDataWrapper, "decimal"));
        assertSame("compressedDataMeasureDataWrapper.values", values, getPrivateField(compressedDataMeasureDataWrapper, "values"));
    }
    
    public void testGet() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] values = new ValueCompressonHolder.UnCompressValue[0];
        int[] decimal = new int[0];
        double[] maxValue = new double[2];
        double[] result = new CompressedDataMeasureDataWrapper(values, decimal, maxValue).get(100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] values = new ValueCompressonHolder.UnCompressValue[0];
        double[] maxValue = new double[0];
        try {
            new CompressedDataMeasureDataWrapper(values, decimal, maxValue).get(100, 1000);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1000", ex.getMessage());
            assertThrownBy(CompressedDataMeasureDataWrapper.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        double[] maxValue = new double[0];
        int[] decimal = new int[4];
        ValueCompressonHolder.UnCompressValue[] values = new ValueCompressonHolder.UnCompressValue[3];
        try {
            new CompressedDataMeasureDataWrapper(values, decimal, maxValue).get(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CompressedDataMeasureDataWrapper.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        double[] maxValue = new double[3];
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] values = new ValueCompressonHolder.UnCompressValue[3];
        try {
            new CompressedDataMeasureDataWrapper(values, decimal, maxValue).get(100, 0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CompressedDataMeasureDataWrapper.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException1() throws Throwable {
        int[] decimal = new int[1];
        double[] maxValue = new double[0];
        try {
            new CompressedDataMeasureDataWrapper(null, decimal, maxValue).get(100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CompressedDataMeasureDataWrapper.class, ex);
        }
    }
}

