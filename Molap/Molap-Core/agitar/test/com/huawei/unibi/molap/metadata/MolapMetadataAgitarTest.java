/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:32:33 PM
 * Time to generate: 01:46.139 seconds
 *
 */

package com.huawei.unibi.molap.metadata;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.factory.KeyGeneratorFactory;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import mondrian.olap.LevelType;
import mondrian.olap.MondrianDef;
import mondrian.olap.Property;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.SqlStatement;
import mondrian.spi.Dialect;
import org.eigenbase.xom.NodeDef;

public class MolapMetadataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapMetadata.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "<init>", new Class[] {}, null, new Object[] {});
        assertEquals("molapMetadata.metaData.size()", 0, ((Collection) getPrivateField(molapMetadata, "metaData")).size());
    }
    
    public void testCubeConstructor() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        assertEquals("cube.measures.size()", 0, ((Map) getPrivateField(cube, "measures")).size());
        assertEquals("cube.factCountColumnMapping.size()", 0, ((Map) getPrivateField(cube, "factCountColumnMapping")).size());
        assertEquals("cube.getName()", "testCubeName", cube.getName());
        assertEquals("cube.getMode()", "file", cube.getMode());
        assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
        assertEquals("cube.metaTables.size()", 0, ((Map) getPrivateField(cube, "metaTables")).size());
    }
    
    public void testDimensionConstructor() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testDimensionName");
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName", cube);
        assertEquals("dimension.colName", "testDimensionColName", dimension.colName);
        assertSame("dimension.getCube()", cube, dimension.getCube());
        assertEquals("dimension.keyOrdinal", 100, dimension.keyOrdinal);
        assertEquals("dimension.noOfbits", 32, dimension.noOfbits);
        assertEquals("dimension.name", "testDimensionName", dimension.name);
        assertEquals("dimension.propertyCount", 0, dimension.propertyCount);
    }
    
    public void testDimensionConstructor1() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName");
        assertEquals("dimension.colName", "testDimensionColName", dimension.colName);
        assertEquals("dimension.keyOrdinal", 100, dimension.keyOrdinal);
        assertEquals("dimension.noOfbits", 32, dimension.noOfbits);
        assertEquals("dimension.name", "testDimensionName", dimension.name);
        assertEquals("dimension.propertyCount", 0, dimension.propertyCount);
    }
    
    public void testDimensionConstructor2() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        assertEquals("dimension.noOfbits", 32, dimension.noOfbits);
        assertEquals("dimension.propertyCount", 0, dimension.propertyCount);
    }
    
    public void testMeasureConstructor() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testMeasureName");
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", "testMeasureAggClassName", "testMeasureName", SqlStatement.Type.DOUBLE, cube);
        assertEquals("measure.getAggName()", "testMeasureAggName", measure.getAggName());
        assertEquals("measure.colName", "testMeasureColName", measure.colName);
        assertEquals("measure.keyOrdinal", 100, measure.keyOrdinal);
        assertSame("measure.getCube()", cube, measure.getCube());
        assertEquals("measure.noOfbits", 32, measure.noOfbits);
        assertEquals("measure.getAggClassName()", "testMeasureAggClassName", measure.getAggClassName());
        assertEquals("measure.dataType", SqlStatement.Type.DOUBLE, measure.dataType);
        assertEquals("measure.name", "testMeasureName", measure.name);
        assertEquals("measure.propertyCount", 0, measure.propertyCount);
    }
    
    public void testMeasureConstructor1() throws Throwable {
        MolapMetadata.Measure measure = (MolapMetadata.Measure) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Measure", "<init>", new Class[] {}, null, new Object[] {});
        assertEquals("measure.noOfbits", 32, measure.noOfbits);
        assertEquals("measure.propertyCount", 0, measure.propertyCount);
    }
    
    public void testCubeGetAggDimension() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.getDimensions("testString");
        MolapMetadata.Dimension result = cube.getAggDimension("testCubeColName", "testString");
        assertNull("result", result);
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetAggDimensionWithAggressiveMocks() throws Throwable {
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        setPrivateField(cube, "dimensions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.enterNormalMode();
        dimension.setAggColumn("");
        dimension2.setAggColumn("");
        dimension3.setAggColumn("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension3);
        Mockingbird.enterTestMode(MolapMetadata.Cube.class);
        MolapMetadata.Dimension result = cube.getAggDimension("X", "");
        assertNull("result.getName()", result.getName());
        assertNotNull("cube.dimensions", getPrivateField(cube, "dimensions"));
    }
    
    public void testCubeGetDimension() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.getDimensions("testString");
        MolapMetadata.Dimension result = cube.getDimension("testCubeColName", "testString");
        assertNull("result", result);
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetDimension1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.getDimensions("testCubeTable");
        MolapMetadata.Dimension result = cube.getDimension("testCubeColName");
        assertNull("result", result);
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetDimension2() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        MolapMetadata.Dimension result = cube.getDimension("testCubeColName");
        assertNull("result", result);
        assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetDimensionWithAggressiveMocks() throws Throwable {
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        setPrivateField(cube, "dimensions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        dimension2.setColName("");
        dimension3.setColName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension3);
        Mockingbird.enterTestMode(MolapMetadata.Cube.class);
        MolapMetadata.Dimension result = cube.getDimension("X", "");
        assertNull("result.getName()", result.getName());
        assertNotNull("cube.dimensions", getPrivateField(cube, "dimensions"));
    }
    
    public void testCubeGetDimensionWithAggressiveMocks1() throws Throwable {
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        setPrivateField(cube, "dimensions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        dimension2.setColName("");
        dimension3.setColName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), list);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), list2);
        Mockingbird.setReturnValue(list2.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), list3);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), dimension);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), dimension2);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), dimension3);
        Mockingbird.enterTestMode(MolapMetadata.Cube.class);
        MolapMetadata.Dimension result = cube.getDimension("X");
        assertNull("result.getName()", result.getName());
        assertNotNull("cube.dimensions", getPrivateField(cube, "dimensions"));
    }
    
    public void testCubeGetDimensions() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        ArrayList result = (ArrayList) cube.getDimensions("testCubeTable");
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCubeGetDimensions1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        ArrayList dimensions = (ArrayList) cube.getDimensions("testString");
        ArrayList result = (ArrayList) cube.getDimensions("testString");
        assertSame("result", dimensions, result);
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetFactCountColMapping() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        String result = cube.getFactCountColMapping("testCubeTableName");
        assertNull("result", result);
        assertEquals("cube.factCountColumnMapping.size()", 0, ((Map) getPrivateField(cube, "factCountColumnMapping")).size());
    }
    
    public void testCubeGetKeyGenerator() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.getDimensions("testString");
        MultiDimKeyVarLengthGenerator result = (MultiDimKeyVarLengthGenerator) cube.getKeyGenerator("testString");
        assertEquals("result.getDimCount()", 0, result.getDimCount());
        assertEquals("cube.dimensions.size()", 1, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeGetKeyGeneratorWithAggressiveMocks() throws Throwable {
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        setPrivateField(cube, "dimensions", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.enterNormalMode();
        dimension.setNoOfbits(0);
        dimension2.setNoOfbits(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(0), dimension);
        Mockingbird.setReturnValue(list.get(1), dimension2);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        Mockingbird.enterTestMode(MolapMetadata.Cube.class);
        KeyGenerator result = cube.getKeyGenerator("");
        assertNull("result", result);
        assertNotNull("cube.dimensions", getPrivateField(cube, "dimensions"));
    }
    
    public void testCubeGetMeasure() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.getMeasures("testString");
        MolapMetadata.Measure result = cube.getMeasure("testString", "testCubeName");
        assertNull("result", result);
        assertEquals("cube.measures.size()", 1, ((Map) getPrivateField(cube, "measures")).size());
    }
    
    public void testCubeGetMeasureWithAggressiveMocks() throws Throwable {
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(cube, "measures", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        measure.name = "";
        measure2.name = "";
        measure3.name = "X";
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure3);
        Mockingbird.enterTestMode(MolapMetadata.Cube.class);
        MolapMetadata.Measure result = cube.getMeasure("", "X");
        assertNull("result.getAggName()", result.getAggName());
        assertNotNull("cube.measures", getPrivateField(cube, "measures"));
    }
    
    public void testCubeGetMeasures() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        ArrayList result = (ArrayList) cube.getMeasures("testCubeTable");
        assertEquals("cube.measures.size()", 1, ((Map) getPrivateField(cube, "measures")).size());
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCubeGetMeasures1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        ArrayList measures = (ArrayList) cube.getMeasures("testString");
        ArrayList result = (ArrayList) cube.getMeasures("testString");
        assertSame("result", measures, result);
        assertEquals("cube.measures.size()", 1, ((Map) getPrivateField(cube, "measures")).size());
    }
    
    public void testCubeGetMetaTableColumns() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        LinkedHashSet metaTableColumns = (LinkedHashSet) cube.getMetaTableColumns("testString");
        LinkedHashSet result = (LinkedHashSet) cube.getMetaTableColumns("testString");
        assertSame("result", metaTableColumns, result);
        assertEquals("cube.metaTables.size()", 1, ((Map) getPrivateField(cube, "metaTables")).size());
    }
    
    public void testCubeGetMetaTableColumns1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        LinkedHashSet result = (LinkedHashSet) cube.getMetaTableColumns("testCubeTable");
        assertEquals("cube.metaTables.size()", 1, ((Map) getPrivateField(cube, "metaTables")).size());
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCubeGetMetaTableNames() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        AbstractSet result = (AbstractSet) cube.getMetaTableNames();
        assertEquals("result.size()", 0, result.size());
        assertEquals("cube.metaTables.size()", 0, ((Map) getPrivateField(cube, "metaTables")).size());
    }
    
    public void testCubeGetTablesList() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        AbstractSet result = (AbstractSet) cube.getTablesList();
        assertEquals("result.size()", 0, result.size());
        assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
    }
    
    public void testCubeSetFactTableName() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.setFactTableName("testCubeFactTableName");
        assertEquals("cube.getFactTableName()", "testCubeFactTableName", cube.getFactTableName());
    }
    
    public void testCubeSetMode() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.setMode("testCubeMode");
        assertEquals("cube.getMode()", "testCubeMode", cube.getMode());
    }
    
    public void testCubeSetName() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.setName("testCubeName1");
        assertEquals("cube.getName()", "testCubeName1", cube.getName());
    }
    
    public void testCubeSetSchemaName() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        cube.setSchemaName("testCubeSchemaName");
        assertEquals("cube.getSchemaName()", "testCubeSchemaName", cube.getSchemaName());
    }
    
    public void testDimensionEquals() throws Throwable {
        MolapMetadata.Measure obj = new MolapMetadata.Measure("testString", 100, "testDimensionAggName", "testDimensionAggClassName", "testDimensionName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testDimensionName"));
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testString", 100, "testDimensionName", new MolapMetadata.Cube("testDimensionName1"));
        boolean result = dimension.equals(obj);
        assertTrue("result", result);
    }
    
    public void testDimensionEquals1() throws Throwable {
        MolapMetadata.Measure obj = new MolapMetadata.Measure("testDimensionColName", 100, "testDimensionAggName", "testDimensionAggClassName", "testDimensionName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testDimensionName"));
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName1", 100, "testDimensionName", new MolapMetadata.Cube("testDimensionName1"));
        boolean result = dimension.equals(obj);
        assertFalse("result", result);
    }
    
    public void testDimensionEquals2() throws Throwable {
        boolean result = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName").equals(new Integer(2));
        assertFalse("result", result);
    }
    
    public void testDimensionGetColName() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setColName("testDimensionColName");
        String result = dimension.getColName();
        assertEquals("result", "testDimensionColName", result);
    }
    
    public void testDimensionGetColName1() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        String result = dimension.getColName();
        assertNull("result", result);
    }
    
    public void testDimensionGetCopy() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        MolapMetadata.Dimension result = dimension.getCopy();
        assertEquals("result.getTotalAttributeCount()", 0, result.getTotalAttributeCount());
        assertNull("dimension.colName", dimension.colName);
        assertEquals("dimension.keyOrdinal", 0, dimension.keyOrdinal);
        assertNull("dimension.getTableName()", dimension.getTableName());
        assertEquals("dimension.noOfbits", 32, dimension.noOfbits);
        assertNull("dimension.dataType", dimension.dataType);
        assertNull("dimension.name", dimension.name);
        assertEquals("dimension.propertyCount", 0, dimension.propertyCount);
        assertEquals("dimension.schemaOrdinal", 0, dimension.schemaOrdinal);
        assertNull("dimension.levelType", dimension.levelType);
        assertNull("dimension.propertyTypes", dimension.propertyTypes);
        assertFalse("dimension.hasOrdinalCol", dimension.hasOrdinalCol);
    }
    
    public void testDimensionGetDataType() throws Throwable {
        SqlStatement.Type result = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName").getDataType();
        assertNull("result", result);
    }
    
    public void testDimensionGetDataType1() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName");
        dimension.setDataType(SqlStatement.Type.LONG);
        SqlStatement.Type result = dimension.getDataType();
        assertSame("result", SqlStatement.Type.LONG, result);
    }
    
    public void testDimensionGetLevelType() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        LevelType result = dimension.getLevelType();
        assertNull("result", result);
    }
    
    public void testDimensionGetLevelType1() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setLevelType(LevelType.TimeHalfYears);
        LevelType result = dimension.getLevelType();
        assertSame("result", LevelType.TimeHalfYears, result);
    }
    
    public void testDimensionGetName() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName", new MolapMetadata.Cube("testDimensionName"));
        String result = dimension.getName();
        assertEquals("result", "testDimensionName", result);
    }
    
    public void testDimensionGetNoOfbits() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        int result = dimension.getNoOfbits();
        assertEquals("result", 32, result);
    }
    
    public void testDimensionGetOrdinal() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        int result = dimension.getOrdinal();
        assertEquals("result", 0, result);
    }
    
    public void testDimensionGetPropertyCount() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setPropertyCount(100);
        int result = dimension.getPropertyCount();
        assertEquals("result", 100, result);
    }
    
    public void testDimensionGetPropertyCount1() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        int result = dimension.getPropertyCount();
        assertEquals("result", 0, result);
    }
    
    public void testDimensionGetPropertyTypes() throws Throwable {
        SqlStatement.Type[] propertyTypes = new SqlStatement.Type[0];
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName");
        dimension.setPropertyTypes(propertyTypes);
        SqlStatement.Type[] result = dimension.getPropertyTypes();
        assertSame("result", propertyTypes, result);
    }
    
    public void testDimensionGetSchemaOrdinal() throws Throwable {
        MolapMetadata.Dimension measure = new MolapMetadata.Measure("testDimensionColName", 100, "testDimensionAggName", "testDimensionAggClassName", "testDimensionName", SqlStatement.Type.OBJECT, null);
        measure.setSchemaOrdinal(100);
        int result = measure.getSchemaOrdinal();
        assertEquals("result", 100, result);
    }
    
    public void testDimensionGetSchemaOrdinal1() throws Throwable {
        MolapMetadata.Dimension measure = new MolapMetadata.Measure("testDimensionColName", 100, "testDimensionAggName", "testDimensionAggClassName", "testDimensionName", SqlStatement.Type.OBJECT, null);
        int result = measure.getSchemaOrdinal();
        assertEquals("result", 0, result);
    }
    
    public void testDimensionGetTotalAttributeCount() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setPropertyCount(100);
        int result = dimension.getTotalAttributeCount();
        assertEquals("result", 100, result);
    }
    
    public void testDimensionGetTotalAttributeCount1() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        int result = dimension.getTotalAttributeCount();
        assertEquals("result", 0, result);
    }
    
    public void testDimensionGetTotalAttributeCountWithAggressiveMocks() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class, true);
        dimension.setPropertyCount(0);
        dimension.setOrdinalCol(true);
        Mockingbird.enterTestMode(MolapMetadata.Dimension.class);
        int result = dimension.getTotalAttributeCount();
        assertEquals("result", 1, result);
    }
    
    public void testDimensionHasOrdinalCol() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = dimension.hasOrdinalCol();
        assertFalse("result", result);
    }
    
    public void testDimensionHashCode() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testDimensionColName", 100, "testDimensionName", new MolapMetadata.Cube("testDimensionName"));
        int result = dimension.hashCode();
        assertEquals("result", -364035945, result);
        assertEquals("dimension.colName", "testDimensionColName", dimension.colName);
    }
    
    public void testDimensionSetActualCol() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setActualCol(true);
        assertTrue("dimension.isActualCol()", dimension.isActualCol());
    }
    
    public void testDimensionSetAggColumn() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setAggColumn("testDimensionAggColumn");
        assertEquals("dimension.getAggColumn()", "testDimensionAggColumn", dimension.getAggColumn());
    }
    
    public void testDimensionSetColName() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setColName("testDimensionColName");
        assertEquals("dimension.colName", "testDimensionColName", dimension.colName);
    }
    
    public void testDimensionSetCube() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testDimensionName");
        dimension.setCube(cube);
        assertSame("dimension.getCube()", cube, dimension.getCube());
    }
    
    public void testDimensionSetDataType() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setDataType(SqlStatement.Type.INT);
        assertEquals("dimension.dataType", SqlStatement.Type.INT, dimension.dataType);
    }
    
    public void testDimensionSetLevelType() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setLevelType(LevelType.TimeMonths);
        assertEquals("dimension.levelType", LevelType.TimeMonths, dimension.levelType);
    }
    
    public void testDimensionSetName() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setName("testDimensionName");
        assertEquals("dimension.name", "testDimensionName", dimension.name);
    }
    
    public void testDimensionSetNoOfbits() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setNoOfbits(100);
        assertEquals("dimension.noOfbits", 100, dimension.noOfbits);
    }
    
    public void testDimensionSetOrdinal() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setOrdinal(100);
        assertEquals("dimension.keyOrdinal", 100, dimension.keyOrdinal);
    }
    
    public void testDimensionSetOrdinalCol() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setOrdinalCol(true);
        assertTrue("dimension.hasOrdinalCol", dimension.hasOrdinalCol);
    }
    
    public void testDimensionSetPropertyCount() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setPropertyCount(100);
        assertEquals("dimension.propertyCount", 100, dimension.propertyCount);
    }
    
    public void testDimensionSetPropertyTypes() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        SqlStatement.Type[] propertyTypes = new SqlStatement.Type[1];
        dimension.setPropertyTypes(propertyTypes);
        assertSame("dimension.propertyTypes", propertyTypes, dimension.propertyTypes);
    }
    
    public void testDimensionSetSchemaOrdinal() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setSchemaOrdinal(100);
        assertEquals("dimension.schemaOrdinal", 100, dimension.schemaOrdinal);
    }
    
    public void testDimensionSetTableName() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        dimension.setTableName("testDimensionTableName");
        assertEquals("dimension.getTableName()", "testDimensionTableName", dimension.getTableName());
    }
    
    public void testDimensionSetTableNameWithAggressiveMocks() throws Throwable {
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class, true);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "contains", "(java.lang.CharSequence)boolean", new Object[] {"."}, Boolean.TRUE, 1);
        strings[1] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.enterTestMode(MolapMetadata.Dimension.class);
        dimension.setTableName("");
        assertNotNull("dimension.getTableName()", dimension.getTableName());
    }
    
    public void testFormDimensionWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MondrianDef.DimensionUsage dimensionUsage = (MondrianDef.DimensionUsage) Mockingbird.getProxyObject(MondrianDef.DimensionUsage.class);
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(MondrianDef.Dimension.class, "<init>()", new MondrianDef.Dimension());
        dimensionUsage.foreignKey = "";
        dimension.caption = "";
        dimension.annotations = null;
        dimension.description = "";
        dimension.hierarchies = hierarchys;
        dimension.highCardinality = null;
        dimension.type = "";
        dimension.usagePrefix = "";
        dimension.visible = null;
        Mockingbird.setReturnValue(dimensionUsage.getName(), "");
        Mockingbird.enterTestMode(MolapMetadata.class);
        MondrianDef.Dimension result = (MondrianDef.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "formDimension", new Class[] {NodeDef.class, MondrianDef.Dimension.class}, molapMetadata, new Object[] {dimensionUsage, dimension});
        assertEquals("result.getName()", "Dimension", result.getName());
    }
    
    public void testFormDimensionsWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        NodeDef[] nodeDefs = new NodeDef[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        NodeDef[] nodeDefs2 = new NodeDef[0];
        NodeDef[] nodeDefs3 = new NodeDef[2];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Table table2 = new MondrianDef.Table();
        dimension.name = "";
        dimension.foreignKey = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        nodeDefs[0] = hierarchy;
        nodeDefs[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy2.name = null;
        nodeDefs3[0] = table;
        nodeDefs3[1] = table2;
        table.name = "";
        table2.name = "";
        Mockingbird.setReturnValue(dimension.getChildren(), nodeDefs);
        Mockingbird.setReturnValue(false, hierarchy, "getChildren", "()org.eigenbase.xom.NodeDef[]", nodeDefs2, 1);
        Mockingbird.setReturnValue(false, hierarchy2, "getChildren", "()org.eigenbase.xom.NodeDef[]", nodeDefs3, 1);
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", null, 1);
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", null, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "formDimensions", new Class[] {MolapMetadata.Cube.class, ArrayList.class, Map.class, Set.class, NodeDef.class, Map.class}, molapMetadata, new Object[] {cube, null, null, set, dimension, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFormDimensionsWithAggressiveMocks1() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        NodeDef[] nodeDefs = new NodeDef[2];
        NodeDef nodeDef = (NodeDef) Mockingbird.getProxyObject(NodeDef.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.RelationOrJoin relationOrJoin = (MondrianDef.RelationOrJoin) Mockingbird.getProxyObject(MondrianDef.RelationOrJoin.class);
        NodeDef[] nodeDefs2 = new NodeDef[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Table table = new MondrianDef.Table();
        dimension.name = "";
        dimension.foreignKey = "";
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        nodeDefs[0] = nodeDef;
        nodeDefs[1] = hierarchy;
        hierarchy.name = null;
        hierarchy.relation = relationOrJoin;
        nodeDefs2[0] = level;
        nodeDefs2[1] = table;
        level.name = "";
        level.column = "";
        table.name = "";
        Mockingbird.setReturnValue(dimension.getChildren(), nodeDefs);
        Mockingbird.setReturnValue(false, hierarchy, "getChildren", "()org.eigenbase.xom.NodeDef[]", nodeDefs2, 1);
        Mockingbird.setReturnValue(false, relationOrJoin, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", null, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "formDimensions", new Class[] {MolapMetadata.Cube.class, ArrayList.class, Map.class, Set.class, NodeDef.class, Map.class}, molapMetadata, new Object[] {cube, arrayList, map, set, dimension, map2});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFormDimensionsWithAggressiveMocks2() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        NodeDef[] nodeDefs = new NodeDef[2];
        NodeDef nodeDef = (NodeDef) Mockingbird.getProxyObject(NodeDef.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        NodeDef[] nodeDefs2 = new NodeDef[2];
        NodeDef nodeDef2 = (NodeDef) Mockingbird.getProxyObject(NodeDef.class);
        MondrianDef.Table table = new MondrianDef.Table();
        dimension.name = "";
        dimension.foreignKey = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        nodeDefs[0] = nodeDef;
        nodeDefs[1] = hierarchy;
        hierarchy.name = null;
        nodeDefs2[0] = nodeDef2;
        nodeDefs2[1] = table;
        table.name = "";
        Mockingbird.setReturnValue(dimension.getChildren(), nodeDefs);
        Mockingbird.setReturnValue(false, hierarchy, "getChildren", "()org.eigenbase.xom.NodeDef[]", nodeDefs2, 1);
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", null, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "formDimensions", new Class[] {MolapMetadata.Cube.class, ArrayList.class, Map.class, Set.class, NodeDef.class, Map.class}, molapMetadata, new Object[] {cube, null, null, set, dimension, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFormDimensionsWithAggressiveMocks3() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        NodeDef[] nodeDefs = new NodeDef[2];
        NodeDef nodeDef = (NodeDef) Mockingbird.getProxyObject(NodeDef.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.RelationOrJoin relationOrJoin = (MondrianDef.RelationOrJoin) Mockingbird.getProxyObject(MondrianDef.RelationOrJoin.class);
        NodeDef[] nodeDefs2 = new NodeDef[2];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level level = new MondrianDef.Level();
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        dimension.name = "";
        dimension.foreignKey = "";
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        nodeDefs[0] = nodeDef;
        nodeDefs[1] = hierarchy;
        hierarchy.name = null;
        hierarchy.relation = relationOrJoin;
        nodeDefs2[0] = table;
        nodeDefs2[1] = level;
        table.name = "";
        level.name = "";
        level.column = "";
        Mockingbird.setReturnValue(dimension.getChildren(), nodeDefs);
        Mockingbird.setReturnValue(false, hierarchy, "getChildren", "()org.eigenbase.xom.NodeDef[]", nodeDefs2, 1);
        Mockingbird.setReturnValue(cube.getMetaTableColumns(""), set2);
        Mockingbird.setReturnValue(false, relationOrJoin, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, set2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "formDimensions", new Class[] {MolapMetadata.Cube.class, ArrayList.class, Map.class, Set.class, NodeDef.class, Map.class}, molapMetadata, new Object[] {cube, arrayList, map, set, dimension, map2});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCube() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "<init>", new Class[] {}, null, new Object[] {});
        MolapMetadata.Cube result = molapMetadata.getCube("testMolapMetadataCubeUniqueName");
        assertNull("result", result);
        assertEquals("molapMetadata.metaData.size()", 0, ((Collection) getPrivateField(molapMetadata, "metaData")).size());
    }
    
    public void testGetCubeWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Cube cube2 = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Cube cube3 = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        setPrivateField(molapMetadata, "metaData", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        cube.setName("");
        cube2.setName("");
        cube3.setName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube3);
        Mockingbird.enterTestMode(MolapMetadata.class);
        MolapMetadata.Cube result = molapMetadata.getCube("X");
        assertEquals("result.getName()", "X", result.getName());
        assertNotNull("molapMetadata.metaData", getPrivateField(molapMetadata, "metaData"));
    }
    
    public void testGetDBDataType() throws Throwable {
        String result = MolapMetadata.getDBDataType("Time", false);
        assertEquals("result", "TIME", result);
    }
    
    public void testGetDBDataType1() throws Throwable {
        String result = MolapMetadata.getDBDataType("testMolapMetadataType", false);
        assertEquals("result", "varchar(50)", result);
    }
    
    public void testGetDBDataType2() throws Throwable {
        String result = MolapMetadata.getDBDataType("testMolapMetadataType", true);
        assertEquals("result", "varchar(50)", result);
    }
    
    public void testGetDBDataType3() throws Throwable {
        String result = MolapMetadata.getDBDataType("Time", true);
        assertEquals("result", "TIME", result);
    }
    
    public void testGetDBDataType4() throws Throwable {
        storeStaticField(MolapMetadata.class, "dbTypeMapping");
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        setPrivateField(MolapMetadata.class, "dbTypeMapping", hashMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        String result = MolapMetadata.getDBDataType("String", true);
        assertEquals("result", "varchar(50)", result);
    }
    
    public void testGetDimensionFromDimensionUsageWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MondrianDef.Schema schema = (MondrianDef.Schema) Mockingbird.getProxyObject(MondrianDef.Schema.class);
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[2];
        MondrianDef.DimensionUsage dimensionUsage = new MondrianDef.DimensionUsage();
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Dimension dimension2 = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        schema.dimensions = dimensions;
        dimensionUsage.source = "X";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        dimension.name = "";
        dimension2.name = "";
        Mockingbird.enterTestMode(MolapMetadata.class);
        MondrianDef.Dimension result = (MondrianDef.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "getDimensionFromDimensionUsage", new Class[] {MondrianDef.Schema.class, NodeDef.class}, molapMetadata, new Object[] {schema, dimensionUsage});
        assertNull("result", result);
    }
    
    public void testGetInstance() throws Throwable {
        MolapMetadata result = MolapMetadata.getInstance();
        assertNotNull("result", result);
    }
    
    public void testGetInstance1() throws Throwable {
        storeStaticField(MolapMetadata.class, "metadata");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(MolapMetadata.class, "<init>()", Mockingbird.getProxyObject(MolapMetadata.class, true));
        setPrivateField(MolapMetadata.class, "metadata", null);
        Mockingbird.enterTestMode(MolapMetadata.class);
        MolapMetadata result = MolapMetadata.getInstance();
        assertNotNull("result", result);
        assertNotNull("MolapMetadata.metadata", getPrivateField(MolapMetadata.class, "metadata"));
    }
    
    public void testHasNameColumn() throws Throwable {
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(level.getNameExp(), expression);
        Mockingbird.enterTestMode(MolapMetadata.class);
        boolean result = MolapMetadata.hasNameColumn(level);
        assertTrue("result", result);
    }
    
    public void testHasNameColumn1() throws Throwable {
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(level.getNameExp(), null);
        Mockingbird.enterTestMode(MolapMetadata.class);
        boolean result = MolapMetadata.hasNameColumn(level);
        assertFalse("result", result);
    }
    
    public void testHasNameColumn2() throws Throwable {
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapLevel, "nameExp", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        MolapMetadata.hasNameColumn(rolapLevel);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testHasNameColumn3() throws Throwable {
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapLevel, "nameExp", null);
        boolean result = MolapMetadata.hasNameColumn(rolapLevel);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn() throws Throwable {
        boolean result = MolapMetadata.hasOrdinalColumn(new MondrianDef.Level());
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn1() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = "";
        level.column = "testString";
        boolean result = MolapMetadata.hasOrdinalColumn(level);
        assertTrue("result", result);
    }
    
    public void testHasOrdinalColumn2() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.FALSE);
        boolean result = MolapMetadata.hasOrdinalColumn((MondrianDef.Level) null);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn3() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        level.column = "";
        level.ordinalColumn = "";
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.TRUE);
        boolean result = MolapMetadata.hasOrdinalColumn(level);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn4() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        setPrivateField(rolapLevel, "keyExp", expression);
        setPrivateField(rolapLevel, "ordinalExp", expression2);
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(expression.equals(expression2), false);
        Mockingbird.enterTestMode(MolapMetadata.class);
        MolapMetadata.hasOrdinalColumn(rolapLevel);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testHasOrdinalColumn5() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.FALSE);
        boolean result = MolapMetadata.hasOrdinalColumn((RolapLevel) null);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn6() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapLevel, "ordinalExp", null);
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.TRUE);
        boolean result = MolapMetadata.hasOrdinalColumn(rolapLevel);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn7() throws Throwable {
        storeStaticField(MolapMetadata.class, "assignOrderKeys");
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        setPrivateField(rolapLevel, "keyExp", expression);
        setPrivateField(rolapLevel, "ordinalExp", expression);
        setPrivateField(MolapMetadata.class, "assignOrderKeys", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(expression.equals(expression), true);
        Mockingbird.enterTestMode(MolapMetadata.class);
        boolean result = MolapMetadata.hasOrdinalColumn(rolapLevel);
        assertFalse("result", result);
    }
    
    public void testMakeSQLDataTye() throws Throwable {
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye("testMolapMetadataType");
        assertEquals("result", SqlStatement.Type.OBJECT, result);
    }
    
    public void testMakeSQLDataTye1() throws Throwable {
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Dialect.Datatype.Numeric);
        assertEquals("result", SqlStatement.Type.DOUBLE, result);
    }
    
    public void testMakeSQLDataTye2() throws Throwable {
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Dialect.Datatype.Timestamp);
        assertEquals("result", SqlStatement.Type.OBJECT, result);
    }
    
    public void testMakeSQLDataTye3() throws Throwable {
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Property.Datatype.TYPE_STRING);
        assertEquals("result", SqlStatement.Type.STRING, result);
    }
    
    public void testMakeSQLDataTye4() throws Throwable {
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Property.Datatype.TYPE_TIMESTAMP);
        assertEquals("result", SqlStatement.Type.OBJECT, result);
    }
    
    public void testMakeSQLDataTye5() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "STRING");
        setPrivateField(SqlStatement.Type.class, "STRING", null);
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Dialect.Datatype.String);
        assertNull("result", result);
    }
    
    public void testMakeSQLDataTye6() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "INT");
        setPrivateField(SqlStatement.Type.class, "INT", null);
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Dialect.Datatype.Integer);
        assertNull("result", result);
    }
    
    public void testMakeSQLDataTye7() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        setPrivateField(SqlStatement.Type.class, "DOUBLE", null);
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Property.Datatype.TYPE_NUMERIC);
        assertNull("result", result);
    }
    
    public void testMakeSQLDataTye8() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "INT");
        setPrivateField(SqlStatement.Type.class, "INT", null);
        SqlStatement.Type result = MolapMetadata.makeSQLDataTye(Property.Datatype.TYPE_BOOLEAN);
        assertNull("result", result);
    }
    
    public void testMeasureEquals() throws Throwable {
        MolapMetadata.Measure obj = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", "testMeasureAggClassName", "testMeasureName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testMeasureName"));
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testMeasureEquals1() throws Throwable {
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", "testMeasureAggClassName", "testMeasureName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testMeasureName"));
        boolean result = measure.equals(null);
        assertFalse("result", result);
    }
    
    public void testMeasureEqualsWithAggressiveMocks() throws Throwable {
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class, true);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.Dimension.class, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(MolapMetadata.Measure.class);
        boolean result = measure.equals(dimension);
        assertFalse("result", result);
    }
    
    public void testMeasureGetAggClassName() throws Throwable {
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", null, "testMeasureName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testMeasureName"));
        String result = measure.getAggClassName();
        assertEquals("result", "", result);
    }
    
    public void testMeasureGetAggClassName1() throws Throwable {
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", "testMeasureAggClassName", "testMeasureName", SqlStatement.Type.DOUBLE, new MolapMetadata.Cube("testMeasureName"));
        String result = measure.getAggClassName();
        assertEquals("result", "testMeasureAggClassName", result);
    }
    
    public void testMeasureGetCopyWithAggressiveMocks() throws Throwable {
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class, true);
        SqlStatement.Type[] types = new SqlStatement.Type[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(MolapMetadata.Measure.class, "<init>()", Mockingbird.getProxyObject(MolapMetadata.Measure.class, true));
        Mockingbird.enterNormalMode();
        measure.setAggName("");
        measure.dataType = null;
        measure.colName = "";
        measure.levelType = null;
        measure.name = "";
        measure.keyOrdinal = 0;
        measure.schemaOrdinal = 0;
        measure.hasOrdinalCol = false;
        measure.noOfbits = 0;
        measure.propertyCount = 0;
        measure.propertyTypes = types;
        Mockingbird.enterTestMode(MolapMetadata.Measure.class);
        MolapMetadata.Measure result = measure.getCopy();
        assertEquals("result.getAggClassName()", "", result.getAggClassName());
        assertEquals("measure.getAggName()", "", measure.getAggName());
        assertEquals("measure.colName", "", measure.colName);
        assertEquals("measure.keyOrdinal", 0, measure.keyOrdinal);
        assertEquals("measure.noOfbits", 0, measure.noOfbits);
        assertNull("measure.dataType", measure.dataType);
        assertEquals("measure.name", "", measure.name);
        assertEquals("measure.propertyCount", 0, measure.propertyCount);
        assertEquals("measure.schemaOrdinal", 0, measure.schemaOrdinal);
        assertNull("measure.levelType", measure.levelType);
        assertEquals("measure.propertyTypes.length", 0, measure.propertyTypes.length);
        assertFalse("measure.hasOrdinalCol", measure.hasOrdinalCol);
    }
    
    public void testMeasureHashCode() throws Throwable {
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMeasureColName", 100, "testMeasureAggName", "testMeasureAggClassName", "testMeasureName", SqlStatement.Type.OBJECT, new MolapMetadata.Cube("testMeasureName"));
        int result = measure.hashCode();
        assertEquals("result", 187180575, result);
        assertEquals("measure.colName", "testMeasureColName", measure.colName);
    }
    
    public void testMeasureSetAggNameWithAggressiveMocks() throws Throwable {
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class, true);
        Mockingbird.enterTestMode(MolapMetadata.Measure.class);
        measure.setAggName("");
        assertEquals("measure.getAggName()", "", measure.getAggName());
    }
    
    public void testProcessAggregateTableWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[2];
        MondrianDef.AggMeasure[] aggMeasures = new MondrianDef.AggMeasure[2];
        MondrianDef.AggFactCount aggFactCount = new MondrianDef.AggFactCount();
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.AggLevel aggLevel = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.AggLevel aggLevel2 = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MondrianDef.AggMeasure aggMeasure = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.AggMeasure aggMeasure2 = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        aggName.name = "";
        aggName.levels = aggLevels;
        aggName.measures = aggMeasures;
        aggName.factcount = aggFactCount;
        setPrivateField(cube, "factCountColumnMapping", map);
        aggFactCount.column = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        aggLevels[0] = aggLevel;
        aggLevels[1] = aggLevel2;
        aggLevel.name = "";
        aggLevel.column = "";
        aggLevel2.name = "";
        aggLevel2.column = "";
        aggMeasures[0] = aggMeasure;
        aggMeasures[1] = aggMeasure2;
        aggMeasure.name = "";
        aggMeasure.column = "";
        aggMeasure2.name = "";
        aggMeasure2.column = "";
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", set, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(dimension.getCopy(), dimension2);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.add(dimension2), false);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension3, 1);
        Mockingbird.setReturnValue(dimension3.getCopy(), dimension4);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.add(dimension4), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", measure, 1);
        Mockingbird.setReturnValue(measure.getCopy(), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list4, 1);
        Mockingbird.setReturnValue(list4.add(measure2), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", measure3, 1);
        Mockingbird.setReturnValue(measure3.getCopy(), measure4);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list5, 1);
        Mockingbird.setReturnValue(list5.size(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list6, 1);
        Mockingbird.setReturnValue(list6.add(measure4), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        molapMetadata.processAggregateTable(aggName, cube, (Map) map2, (Map) map3);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessAggregateTableWithAggressiveMocks1() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[2];
        MondrianDef.AggMeasure[] aggMeasures = new MondrianDef.AggMeasure[2];
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        MondrianDef.AggLevel aggLevel = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.AggLevel aggLevel2 = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MondrianDef.AggMeasure aggMeasure = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.AggMeasure aggMeasure2 = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        aggName.name = "";
        aggName.levels = aggLevels;
        aggName.measures = aggMeasures;
        aggName.factcount = null;
        setPrivateField(cube, "factCountColumnMapping", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        aggLevels[0] = aggLevel;
        aggLevels[1] = aggLevel2;
        aggLevel.name = "";
        aggLevel.column = "";
        aggLevel2.name = "";
        aggLevel2.column = "";
        aggMeasures[0] = aggMeasure;
        aggMeasures[1] = aggMeasure2;
        aggMeasure.name = "";
        aggMeasure.column = "";
        aggMeasure2.name = "";
        aggMeasure2.column = "";
        Mockingbird.setReturnValue(false, cube, "getMetaTableColumns", "(java.lang.String)java.util.Set", set, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(dimension.getCopy(), dimension2);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.add(dimension2), false);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension3, 1);
        Mockingbird.setReturnValue(dimension3.getCopy(), dimension4);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.add(dimension4), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", measure, 1);
        Mockingbird.setReturnValue(measure.getCopy(), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list4, 1);
        Mockingbird.setReturnValue(list4.add(measure2), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", measure3, 1);
        Mockingbird.setReturnValue(measure3.getCopy(), measure4);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list5, 1);
        Mockingbird.setReturnValue(list5.size(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list6, 1);
        Mockingbird.setReturnValue(list6.add(measure4), false);
        Mockingbird.setReturnValue(false, set, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapMetadata.class);
        molapMetadata.processAggregateTable(aggName, cube, (Map) map2, (Map) map3);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRemoveCube() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "<init>", new Class[] {}, null, new Object[] {});
        MolapMetadata.Cube result = molapMetadata.removeCube("testMolapMetadataCubeUniqueName");
        assertNull("result", result);
        assertEquals("molapMetadata.metaData.size()", 0, ((Collection) getPrivateField(molapMetadata, "metaData")).size());
    }
    
    public void testRemoveCubeWithAggressiveMocks() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Cube cube2 = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        setPrivateField(molapMetadata, "metaData", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        cube.setName("");
        cube2.setName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapMetadata.class);
        MolapMetadata.Cube result = molapMetadata.removeCube("X");
        assertNull("result", result);
        assertNotNull("molapMetadata.metaData", getPrivateField(molapMetadata, "metaData"));
    }
    
    public void testRemoveCubeWithAggressiveMocks1() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Cube cube2 = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Cube cube3 = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        setPrivateField(molapMetadata, "metaData", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        cube.setName("");
        cube2.setName("");
        cube3.setName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cube3);
        Mockingbird.setReturnValue(list.remove(cube3), false);
        Mockingbird.enterTestMode(MolapMetadata.class);
        MolapMetadata.Cube result = molapMetadata.removeCube("X");
        assertEquals("result.getName()", "X", result.getName());
        assertNotNull("molapMetadata.metaData", getPrivateField(molapMetadata, "metaData"));
    }
    
    public void testCubeGetAggDimensionThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        try {
            cube.getAggDimension("testCubeColName", "testCubeTable");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.Cube.class, ex);
            assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
        }
    }
    
    public void testCubeGetDimensionThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        try {
            cube.getDimension("testCubeColName", "testCubeTable");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.Cube.class, ex);
            assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
        }
    }
    
    public void testCubeGetKeyGeneratorThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        try {
            cube.getKeyGenerator("testCubeTable");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.Cube.class, ex);
            assertEquals("cube.dimensions.size()", 0, ((Map) getPrivateField(cube, "dimensions")).size());
        }
    }
    
    public void testCubeGetMeasureThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeName");
        try {
            cube.getMeasure("testCubeTable", "testCubeName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.Cube.class, ex);
            assertEquals("cube.measures.size()", 0, ((Map) getPrivateField(cube, "measures")).size());
        }
    }
    
    public void testGetDimensionFromDimensionUsageThrowsNullPointerException() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "<init>", new Class[] {}, null, new Object[] {});
        NodeDef ordinalExpression = new MondrianDef.OrdinalExpression();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "getDimensionFromDimensionUsage", new Class[] {MondrianDef.Schema.class, NodeDef.class}, molapMetadata, new Object[] {new MondrianDef.Schema(), ordinalExpression});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
            assertEquals("(MondrianDef.OrdinalExpression) ordinalExpression.getName()", "OrdinalExpression", ((MondrianDef.OrdinalExpression) ordinalExpression).getName());
        }
    }
    
    public void testGetDimensionFromDimensionUsageThrowsNullPointerException1() throws Throwable {
        MolapMetadata molapMetadata = (MolapMetadata) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "<init>", new Class[] {}, null, new Object[] {});
        NodeDef join = new MondrianDef.Join();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata", "getDimensionFromDimensionUsage", new Class[] {MondrianDef.Schema.class, NodeDef.class}, molapMetadata, new Object[] {null, join});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
            assertEquals("(MondrianDef.Join) join.getName()", "Join", ((MondrianDef.Join) join).getName());
        }
    }
    
    public void testHasOrdinalColumnThrowsNullPointerException() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = "";
        try {
            MolapMetadata.hasOrdinalColumn(level);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
        }
    }
    
    public void testHasOrdinalColumnThrowsNullPointerException1() throws Throwable {
        try {
            MolapMetadata.hasOrdinalColumn((MondrianDef.Level) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
        }
    }
    
    public void testLoadThrowsNullPointerException() throws Throwable {
        MolapMetadata instance = MolapMetadata.getInstance();
        Map cubeMap = new HashMap(100, 100.0F);
        cubeMap.put("testString", (Object) null);
        try {
            instance.load(cubeMap);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
            assertEquals("instance.metaData.size()", 0, ((Collection) getPrivateField(instance, "metaData")).size());
            assertEquals("(HashMap) cubeMap.size()", 1, cubeMap.size());
        }
    }
    
    public void testMakeSQLDataTyeThrowsNullPointerException() throws Throwable {
        try {
            MolapMetadata.makeSQLDataTye((Dialect.Datatype) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
        }
    }
    
    public void testMakeSQLDataTyeThrowsNullPointerException1() throws Throwable {
        try {
            MolapMetadata.makeSQLDataTye((Property.Datatype) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
        }
    }
}

