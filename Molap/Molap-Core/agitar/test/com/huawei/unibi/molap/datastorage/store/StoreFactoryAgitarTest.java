/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:33:08 PM
 * Time to generate: 00:25.026 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.datastorage.store.impl.data.compressed.AbstractHeavyCompressedDoubleArrayDataStore;
import com.huawei.unibi.molap.datastorage.store.impl.data.compressed.HeavyCompressedDoubleArrayDataFileStore;
import com.huawei.unibi.molap.datastorage.store.impl.data.compressed.HeavyCompressedDoubleArrayDataInMemoryStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.compressed.CompressedSingleArrayKeyFileStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.compressed.CompressedSingleArrayKeyInMemoryStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.uncompressed.AbstractSingleArrayKeyStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.uncompressed.SingleArrayKeyFileStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.uncompressed.SingleArrayKeyInMemoryStore;
import java.nio.ByteBuffer;

public class StoreFactoryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return StoreFactory.class;
    }
    
    public void testConstructor() throws Throwable {
        new StoreFactory();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateDataStore() throws Throwable {
        HeavyCompressedDoubleArrayDataInMemoryStore result = (HeavyCompressedDoubleArrayDataInMemoryStore) StoreFactory.createDataStore(100, 1000);
        assertNotNull("result", result);
    }
    
    public void testCreateDataStore1() throws Throwable {
        long[] offset = new long[3];
        int[] length = new int[1];
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        HeavyCompressedDoubleArrayDataFileStore result = (HeavyCompressedDoubleArrayDataFileStore) StoreFactory.createDataStore(100, 1000, true, compressionModel, offset, length, "testStoreFactoryFilePath", new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testCreateDataStore2() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinLong();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] offset = new long[5];
        int[] length = new int[1];
        HeavyCompressedDoubleArrayDataInMemoryStore result = (HeavyCompressedDoubleArrayDataInMemoryStore) StoreFactory.createDataStore(100, 1000, false, compressionModel, offset, length, "testStoreFactoryFilePath", new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testCreateDataStore3() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        HeavyCompressedDoubleArrayDataInMemoryStore result = (HeavyCompressedDoubleArrayDataInMemoryStore) StoreFactory.createDataStore(100, 1000, compressionModel);
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore() throws Throwable {
        SingleArrayKeyInMemoryStore result = (SingleArrayKeyInMemoryStore) StoreFactory.createKeyStore(0, 100, false);
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore1() throws Throwable {
        CompressedSingleArrayKeyInMemoryStore result = (CompressedSingleArrayKeyInMemoryStore) StoreFactory.createKeyStore(100, 1000, true);
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore2() throws Throwable {
        SingleArrayKeyInMemoryStore result = (SingleArrayKeyInMemoryStore) StoreFactory.createKeyStore(100, 1000, false, false, 100L, "testStoreFactoryFileName", 0, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore3() throws Throwable {
        CompressedSingleArrayKeyFileStore result = (CompressedSingleArrayKeyFileStore) StoreFactory.createKeyStore(100, 1000, true, true, 100L, "testStoreFactoryFileName", 0, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore4() throws Throwable {
        CompressedSingleArrayKeyInMemoryStore result = (CompressedSingleArrayKeyInMemoryStore) StoreFactory.createKeyStore(100, 1000, true, false, 100L, "testStoreFactoryFileName", 0, new FileHolderImpl(100));
        assertNotNull("result", result);
    }
    
    public void testCreateKeyStore5() throws Throwable {
        SingleArrayKeyFileStore result = (SingleArrayKeyFileStore) StoreFactory.createKeyStore(100, 1000, false, true, 100L, "testStoreFactoryFileName", 0, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testStoreTypeValueOf() throws Throwable {
        StoreFactory.StoreType result = StoreFactory.StoreType.valueOf("COMPRESSED_SINGLE_ARRAY");
        assertEquals("result", StoreFactory.StoreType.COMPRESSED_SINGLE_ARRAY, result);
    }
    
    public void testStoreTypeValues() throws Throwable {
        StoreFactory.StoreType[] result = StoreFactory.StoreType.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", StoreFactory.StoreType.SINGLE_ARRAY, result[0]);
    }
    
    public void testCreateDataStoreThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] offset = new long[0];
        int[] length = new int[2];
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        try {
            StoreFactory.createDataStore(100, 1000, false, compressionModel, offset, length, "testStoreFactoryFilePath", new FileHolderImpl(100));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataInMemoryStore.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsIllegalArgumentException() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinLong();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] offset = new long[5];
        int[] length = new int[1];
        length[0] = -3;
        try {
            StoreFactory.createDataStore(100, 1000, false, compressionModel, offset, length, "testStoreFactoryFilePath", new FileHolderImpl());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsNegativeArraySizeException() throws Throwable {
        try {
            StoreFactory.createDataStore(100, -1);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsNegativeArraySizeException1() throws Throwable {
        long[] offset = new long[1];
        int[] length = new int[1];
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testStoreFactoryMeasureMetaDataFileLocation", 100);
        try {
            StoreFactory.createDataStore(100, -1, true, compressionModel, offset, length, "testStoreFactoryFilePath", new FileHolderImpl());
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsNegativeArraySizeException2() throws Throwable {
        try {
            StoreFactory.createDataStore(100, -1, new ValueCompressionModel());
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsNullPointerException() throws Throwable {
        long[] offset = new long[2];
        int[] length = new int[1];
        try {
            StoreFactory.createDataStore(100, 1000, false, new ValueCompressionModel(), offset, length, "testStoreFactoryFilePath", new FileHolderImpl());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testCreateDataStoreThrowsNullPointerException1() throws Throwable {
        try {
            StoreFactory.createDataStore(100, 1000, new ValueCompressionModel());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testCreateKeyStoreThrowsIllegalArgumentException() throws Throwable {
        try {
            StoreFactory.createKeyStore(0, 100, true, false, 100L, "testStoreFactoryFileName", -1, new FileHolderImpl());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testCreateKeyStoreThrowsNegativeArraySizeException() throws Throwable {
        try {
            StoreFactory.createKeyStore(-1, 100, false);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractSingleArrayKeyStore.class, ex);
        }
    }
    
    public void testCreateKeyStoreThrowsNegativeArraySizeException1() throws Throwable {
        try {
            StoreFactory.createKeyStore(100, -1, false, false, 100L, "testStoreFactoryFileName", 1000, new FileHolderImpl(100));
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractSingleArrayKeyStore.class, ex);
        }
    }
    
    public void testCreateKeyStoreThrowsNullPointerException() throws Throwable {
        try {
            StoreFactory.createKeyStore(0, 100, false, false, 100L, "testStoreFactoryFileName", 1000, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SingleArrayKeyInMemoryStore.class, ex);
        }
    }
    
    public void testStoreTypeValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            StoreFactory.StoreType.valueOf("testStoreTypeParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.unibi.molap.datastorage.store.StoreFactory$StoreType.testStoreTypeParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testStoreTypeValueOfThrowsNullPointerException() throws Throwable {
        try {
            StoreFactory.StoreType.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
}

