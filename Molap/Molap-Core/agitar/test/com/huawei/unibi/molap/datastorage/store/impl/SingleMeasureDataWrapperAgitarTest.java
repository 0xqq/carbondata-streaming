/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:32:25 PM
 * Time to generate: 00:13.710 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl;

import com.agitar.lib.junit.AgitarTestCase;

public class SingleMeasureDataWrapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SingleMeasureDataWrapper.class;
    }
    
    public void testConstructor() throws Throwable {
        double[] data = new double[0];
        SingleMeasureDataWrapper singleMeasureDataWrapper = new SingleMeasureDataWrapper(data, (short)100);
        assertEquals("singleMeasureDataWrapper.sizeOfEachElement", (short)100, ((Number) getPrivateField(singleMeasureDataWrapper, "sizeOfEachElement")).shortValue());
        assertSame("singleMeasureDataWrapper.data", data, getPrivateField(singleMeasureDataWrapper, "data"));
    }
    
    public void testGet() throws Throwable {
        double[] data = new double[1];
        double[] result = new SingleMeasureDataWrapper(data, (short)0).get(100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGet1() throws Throwable {
        double[] data = new double[3];
        double[] result = new SingleMeasureDataWrapper(data, (short)1).get(0);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0.0, result[0], 1.0E-6);
    }
    
    public void testGet2() throws Throwable {
        double[] data = new double[2];
        data[0] = 2.6410880088806152;
        double result = new SingleMeasureDataWrapper(data, (short)0).get(100, 0);
        assertEquals("result", 2.6410880088806152, result, 1.0E-6);
    }
    
    public void testGet3() throws Throwable {
        double[] data = new double[3];
        double result = new SingleMeasureDataWrapper(data, (short)1).get(4, -2);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException() throws Throwable {
        double[] data = new double[3];
        try {
            new SingleMeasureDataWrapper(data, (short)100).get(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        double[] data = new double[0];
        try {
            new SingleMeasureDataWrapper(data, (short)100).get(100, 1000);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "11000", ex.getMessage());
            assertThrownBy(SingleMeasureDataWrapper.class, ex);
        }
    }
    
    public void testGetThrowsNegativeArraySizeException() throws Throwable {
        double[] data = new double[3];
        try {
            new SingleMeasureDataWrapper(data, (short)-1).get(100);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SingleMeasureDataWrapper.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        try {
            new SingleMeasureDataWrapper(null, (short)100).get(100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException1() throws Throwable {
        try {
            new SingleMeasureDataWrapper(null, (short)100).get(100, 1000);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SingleMeasureDataWrapper.class, ex);
        }
    }
}

