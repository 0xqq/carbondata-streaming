/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:36:48 PM
 * Time to generate: 05:57.030 seconds
 *
 */

package com.huawei.unibi.molap.metadata;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import mondrian.olap.MondrianDef;

public class MolapSchemaReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapSchemaReader.class;
    }
    
    public void testConstructor() throws Throwable {
        new MolapSchemaReader();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGeneratePropertyString() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[2];
        MondrianDef.Property property = new MondrianDef.Property();
        MondrianDef.Property property2 = new MondrianDef.Property();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        hierarchy.levels = levels;
        levels[0] = level;
        levels[1] = level2;
        level.ordinalColumn = null;
        level.nameColumn = null;
        level.properties = propertys;
        level.column = "";
        propertys[0] = property;
        propertys[1] = property2;
        property.column = "";
        property.type = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        property2.column = "";
        property2.type = "";
        level2.ordinalColumn = null;
        level2.nameColumn = "";
        level2.properties = propertys2;
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(-1), hierarchy})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testGeneratePropertyString1() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[2];
        MondrianDef.Property property = new MondrianDef.Property();
        MondrianDef.Property property2 = new MondrianDef.Property();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        hierarchy.levels = levels;
        levels[0] = level;
        levels[1] = level2;
        level.ordinalColumn = null;
        level.column = "";
        level.nameColumn = "X";
        level.properties = propertys;
        propertys[0] = property;
        propertys[1] = property2;
        property.column = "";
        property.type = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        property2.column = "";
        property2.type = "";
        level2.ordinalColumn = null;
        level2.nameColumn = "";
        level2.properties = propertys2;
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(-1), hierarchy})).intValue();
        assertEquals("result", 2, result);
    }
    
    public void testGeneratePropertyString2() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[2];
        MondrianDef.Property property = new MondrianDef.Property();
        MondrianDef.Property property2 = new MondrianDef.Property();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        hierarchy.levels = levels;
        levels[0] = level;
        levels[1] = level2;
        level.column = "";
        level.ordinalColumn = "X";
        level.nameColumn = "X";
        level.properties = propertys;
        propertys[0] = property;
        propertys[1] = property2;
        property.column = "";
        property.type = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        property2.column = "";
        property2.type = "";
        level2.ordinalColumn = null;
        level2.nameColumn = "";
        level2.properties = propertys2;
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(2), hierarchy})).intValue();
        assertEquals("result", 6, result);
    }
    
    public void testGetAggTable() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.AggTable[] aggTables = new MondrianDef.AggTable[2];
        cube.fact = table;
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        table.aggTables = aggTables;
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(arrayList.add(hashMap), false);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(arrayList.add(hashMap2), false);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        List result = MolapSchemaReader.getAggTable(cube);
        assertNotNull("result", result);
    }
    
    public void testGetAggTableMeasureString() throws Throwable {
        MondrianDef.AggMeasure[] measures = new MondrianDef.AggMeasure[1];
        measures[0] = new MondrianDef.AggMeasure();
        String result = MolapSchemaReader.getAggTableMeasureString(measures);
        assertEquals("result", "null:null", result);
    }
    
    public void testGetAggTableMeasureString1() throws Throwable {
        MondrianDef.AggMeasure[] measures = new MondrianDef.AggMeasure[2];
        measures[0] = new MondrianDef.AggMeasure();
        measures[1] = new MondrianDef.AggMeasure();
        String result = MolapSchemaReader.getAggTableMeasureString(measures);
        assertEquals("result", "null:null,null:null", result);
    }
    
    public void testGetAggTableMeasureString2() throws Throwable {
        MondrianDef.AggMeasure[] measures = new MondrianDef.AggMeasure[0];
        String result = MolapSchemaReader.getAggTableMeasureString(measures);
        assertEquals("result", "", result);
    }
    
    public void testGetCardinalities() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        LinkedHashMap result = (LinkedHashMap) MolapSchemaReader.getCardinalities(dimensions);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetCardinalities1() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        LinkedHashMap linkedHashMap = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", linkedHashMap);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        level.levelCardinality = null;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        level2.column = "";
        level2.levelCardinality = null;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        Map result = MolapSchemaReader.getCardinalities(cubeDimensions);
        assertNotNull("result", result);
    }
    
    public void testGetCubeDimensions() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.dimensions = cubeDimensions;
        cube.fact = new MondrianDef.Table();
        String[] result = MolapSchemaReader.getCubeDimensions(cube);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetCubeDimensions1() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        MondrianDef.Hierarchy hierarchy2 = new MondrianDef.Hierarchy();
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        String[] strings = new String[0];
        cube.fact = table;
        cube.dimensions = cubeDimensions;
        table.name = "";
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table2;
        hierarchy.levels = levels;
        table2.name = "";
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        level2.column = "";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.name = "";
        property2.name = "";
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", strings, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String[] result = MolapSchemaReader.getCubeDimensions(cube);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetCubeMeasureAggregatorDetails() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.AggTable[] aggTables = new MondrianDef.AggTable[2];
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggName aggName2 = new MondrianDef.AggName();
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        cube.fact = table;
        table.aggTables = aggTables;
        aggTables[0] = aggName;
        aggTables[1] = aggName2;
        aggName.name = "";
        aggName2.name = "";
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"X", cube});
        assertNotNull("result", result);
    }
    
    public void testGetCubeMeasureAggregatorDetails1() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        MondrianDef.AggTable[] aggTables = new MondrianDef.AggTable[3];
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggName aggName2 = new MondrianDef.AggName();
        MondrianDef.AggName aggName3 = new MondrianDef.AggName();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        MondrianDef.AggMeasure[] aggMeasures = new MondrianDef.AggMeasure[2];
        MondrianDef.AggMeasure aggMeasure = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.AggMeasure aggMeasure2 = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.Measure measure = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Measure measure2 = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        String[] strings = new String[2];
        String[] strings2 = new String[2];
        cube.fact = table;
        cube.measures = measures;
        table.aggTables = aggTables;
        aggTables[0] = aggName;
        aggTables[1] = aggName2;
        aggTables[2] = aggName3;
        aggName.name = "";
        aggName2.name = "";
        aggName3.name = "X";
        aggName3.measures = aggMeasures;
        aggMeasures[0] = aggMeasure;
        aggMeasures[1] = aggMeasure2;
        measures[0] = measure;
        measures[1] = measure2;
        aggMeasure.name = "";
        aggMeasure.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        strings[1] = "";
        measure.aggregator = "";
        measure.name = "";
        aggMeasure2.name = "";
        strings2[1] = "";
        measure2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"X", cube});
        assertNotNull("result", result);
    }
    
    public void testGetCubeMeasureAggregatorDetails2() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        MondrianDef.AggTable[] aggTables = new MondrianDef.AggTable[3];
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggName aggName2 = new MondrianDef.AggName();
        MondrianDef.AggName aggName3 = new MondrianDef.AggName();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        MondrianDef.AggMeasure[] aggMeasures = new MondrianDef.AggMeasure[2];
        MondrianDef.AggMeasure aggMeasure = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.AggMeasure aggMeasure2 = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.Measure measure = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Measure measure2 = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        String[] strings = new String[2];
        cube.fact = table;
        cube.measures = measures;
        table.aggTables = aggTables;
        aggTables[0] = aggName;
        aggTables[1] = aggName2;
        aggTables[2] = aggName3;
        aggName.name = "";
        aggName2.name = "";
        aggName3.name = "X";
        aggName3.measures = aggMeasures;
        aggMeasures[0] = aggMeasure;
        aggMeasures[1] = aggMeasure2;
        measures[0] = measure;
        measures[1] = measure2;
        aggMeasure.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", null, 1);
        aggMeasure2.name = "";
        strings[1] = "";
        measure.name = "";
        measure2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"X", cube});
        assertNotNull("result", result);
    }
    
    public void testGetCubeMeasureAggregatorDetails3() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        MondrianDef.AggTable[] aggTables = new MondrianDef.AggTable[3];
        MondrianDef.AggName aggName = new MondrianDef.AggName();
        MondrianDef.AggName aggName2 = new MondrianDef.AggName();
        MondrianDef.AggName aggName3 = new MondrianDef.AggName();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        MondrianDef.AggMeasure[] aggMeasures = new MondrianDef.AggMeasure[2];
        MondrianDef.AggMeasure aggMeasure = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.AggMeasure aggMeasure2 = (MondrianDef.AggMeasure) Mockingbird.getProxyObject(MondrianDef.AggMeasure.class);
        MondrianDef.Measure measure = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Measure measure2 = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        String[] strings = new String[0];
        String[] strings2 = new String[2];
        cube.fact = table;
        cube.measures = measures;
        table.aggTables = aggTables;
        aggTables[0] = aggName;
        aggTables[1] = aggName2;
        aggTables[2] = aggName3;
        aggName.name = "";
        aggName2.name = "";
        aggName3.name = "X";
        aggName3.measures = aggMeasures;
        aggMeasures[0] = aggMeasure;
        aggMeasures[1] = aggMeasure2;
        measures[0] = measure;
        measures[1] = measure2;
        aggMeasure.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        aggMeasure2.name = "";
        strings2[1] = "";
        measure.name = "";
        measure2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"X", cube});
        assertNotNull("result", result);
    }
    
    public void testGetCubeMeasures() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        measures[0] = new MondrianDef.Measure();
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.measures = measures;
        ArrayList result = (ArrayList) MolapSchemaReader.getCubeMeasures(cube);
        assertEquals("result.size()", 3, result.size());
    }
    
    public void testGetCubeMeasures1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.measures = measures;
        ArrayList result = (ArrayList) MolapSchemaReader.getCubeMeasures(cube);
        assertEquals("result.size()", 3, result.size());
    }
    
    public void testGetCubeMeasuresAndDataType() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        measures[0] = new MondrianDef.Measure();
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.measures = measures;
        LinkedHashMap result = (LinkedHashMap) MolapSchemaReader.getCubeMeasuresAndDataType(cube);
        assertEquals("result.size()", 1, result.size());
        assertNull("(LinkedHashMap) result.get(null)", result.get(null));
    }
    
    public void testGetCubeMeasuresAndDataType1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.measures = measures;
        LinkedHashMap result = (LinkedHashMap) MolapSchemaReader.getCubeMeasuresAndDataType(cube);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetDimensionSQLQueries() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Table table2 = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.levels = levels;
        hierarchy.relation = table;
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        hierarchy2.name = "";
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        table2.name = "";
        levels2[1] = level2;
        levels2[0] = level3;
        levels2[2] = level4;
        level3.nameColumn = "";
        level3.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level2.column = "";
        level2.nameColumn = "";
        level2.properties = propertys3;
        level4.column = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table2, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(arrayList.size(), 3);
        Mockingbird.setReturnValue(arrayList.get(1), "");
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getDimensionSQLQueries(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetDimensionSQLQueries1() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Table table2 = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.levels = levels;
        hierarchy.relation = table;
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        level.column = "";
        level.ordinalColumn = null;
        level.nameColumn = "";
        level.properties = propertys;
        hierarchy2.name = "";
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        table2.name = "";
        levels2[1] = level2;
        levels2[0] = level3;
        levels2[2] = level4;
        level3.nameColumn = "";
        level3.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level2.column = "";
        level2.nameColumn = "";
        level2.properties = propertys3;
        level4.column = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table2, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(arrayList.size(), 3);
        Mockingbird.setReturnValue(arrayList.get(1), "");
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getDimensionSQLQueries(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetDimensionSQLQueries2() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Table table2 = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.levels = levels;
        hierarchy.relation = table;
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = null;
        level.properties = propertys;
        hierarchy2.name = "";
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        table2.name = "";
        levels2[1] = level2;
        levels2[0] = level3;
        levels2[2] = level4;
        level3.nameColumn = "";
        level3.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level2.column = "";
        level2.nameColumn = "";
        level2.properties = propertys3;
        level4.column = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table2, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(arrayList.size(), 3);
        Mockingbird.setReturnValue(arrayList.get(1), "");
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getDimensionSQLQueries(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetDimensionSQLQueries3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Table table2 = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.levels = levels;
        hierarchy.relation = table;
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        hierarchy2.name = "";
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        table2.name = "";
        levels2[1] = level2;
        levels2[0] = level3;
        levels2[2] = level4;
        level3.nameColumn = "";
        level3.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        level2.column = "";
        level2.nameColumn = null;
        level2.properties = propertys3;
        level4.column = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table2, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(arrayList.size(), 3);
        Mockingbird.setReturnValue(arrayList.get(1), "");
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getDimensionSQLQueries(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetDimensionSQLQueries4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Table table = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Table table2 = (MondrianDef.Table) Mockingbird.getProxyObject(MondrianDef.Table.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.levels = levels;
        hierarchy.relation = table;
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        levels[1] = level2;
        level.column = "";
        level.nameColumn = "";
        level.properties = propertys;
        level.ordinalColumn = null;
        level2.column = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        hierarchy2.name = "";
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        table2.name = "";
        levels2[0] = level3;
        levels2[1] = level4;
        level3.nameColumn = "";
        level3.properties = propertys3;
        level3.column = "X";
        level3.ordinalColumn = "";
        level4.column = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, table2, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(arrayList.size(), 3);
        Mockingbird.setReturnValue(arrayList.get(1), "");
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getDimensionSQLQueries(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetDimensionString() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        int result = MolapSchemaReader.getDimensionString(dimensions, new StringBuilder(), 100);
        assertEquals("result", 100, result);
    }
    
    public void testGetDimensionString1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        int result = MolapSchemaReader.getDimensionString(dimensions, new StringBuilder("testMolapSchemaReaderParam1"), 0);
        assertEquals("result", 0, result);
    }
    
    public void testGetDimensionString2() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        level.levelCardinality = null;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        level2.column = "";
        level2.levelCardinality = null;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = MolapSchemaReader.getDimensionString(cubeDimensions, stringBuilder, 1);
        assertEquals("result", 3, result);
    }
    
    public void testGetDimensionString3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.name = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = null;
        hierarchy.levels = levels;
        hierarchy2.relation = table;
        hierarchy2.levels = levels2;
        table.name = "";
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        level.levelCardinality = null;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        level2.column = "";
        level2.levelCardinality = null;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = MolapSchemaReader.getDimensionString(cubeDimensions, stringBuilder, 1);
        assertEquals("result", 3, result);
    }
    
    public void testGetDimensionString4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        level.levelCardinality = null;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        level2.column = "";
        level2.levelCardinality = null;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, ",", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = MolapSchemaReader.getDimensionString(cubeDimensions, stringBuilder, 1);
        assertEquals("result", 3, result);
    }
    
    public void testGetDimensionStringForAgg() throws Throwable {
        StringBuilder dimString = new StringBuilder();
        dimString.append(100);
        String[] dimensions = new String[2];
        int result = MolapSchemaReader.getDimensionStringForAgg(dimensions, dimString, 100, new HashMap(100, 100.0F));
        assertEquals("result", 102, result);
    }
    
    public void testGetDimensionStringForAgg1() throws Throwable {
        StringBuilder dimString = new StringBuilder();
        dimString.append(' ');
        dimString.deleteCharAt(0);
        String[] dimensions = new String[1];
        int result = MolapSchemaReader.getDimensionStringForAgg(dimensions, dimString, 100, new HashMap(100, 100.0F));
        assertEquals("result", 101, result);
    }
    
    public void testGetDimensionTable() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[3];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension3 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[3];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy3 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[0];
        MondrianDef.Level[] levels3 = new MondrianDef.Level[3];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cube.dimensions = cubeDimensions;
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        cubeDimensions[2] = dimension3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        dimension.name = "";
        dimension2.name = "";
        dimension3.name = "X";
        dimension3.hierarchies = hierarchys;
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchys[2] = hierarchy3;
        hierarchy.levels = levels;
        hierarchy2.levels = levels2;
        hierarchy3.levels = levels3;
        hierarchy3.relation = table;
        levels3[0] = level;
        levels3[1] = level2;
        levels3[2] = level3;
        level.name = "";
        level2.name = "";
        level3.name = "X";
        level3.column = "";
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"", "", cube});
        assertNotNull("result", result);
    }
    
    public void testGetDimensionTable1() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[3];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension3 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[3];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy3 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[0];
        MondrianDef.Level[] levels3 = new MondrianDef.Level[3];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cube.dimensions = cubeDimensions;
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        cubeDimensions[2] = dimension3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        dimension.name = "";
        dimension2.name = "";
        dimension3.hierarchies = hierarchys;
        dimension3.name = "X";
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchys[2] = hierarchy3;
        hierarchy.levels = levels;
        hierarchy2.levels = levels2;
        hierarchy3.levels = levels3;
        hierarchy3.relation = null;
        levels3[0] = level;
        levels3[1] = level2;
        levels3[2] = level3;
        level.name = "";
        level2.name = "";
        level3.name = "X";
        level3.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, "", "substring", "(int,int)java.lang.String", new Object[] {new Integer(1), new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"", "", cube});
        assertNotNull("result", result);
    }
    
    public void testGetDimensionTable2() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[3];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension3 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[3];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy3 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[3];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cube.dimensions = cubeDimensions;
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        cubeDimensions[2] = dimension3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        dimension.name = "";
        dimension2.name = "";
        dimension3.name = "X";
        dimension3.hierarchies = hierarchys;
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchys[2] = hierarchy3;
        hierarchy.name = "";
        hierarchy2.name = "";
        hierarchy3.name = "X";
        hierarchy3.levels = levels;
        hierarchy3.relation = table;
        levels[0] = level;
        levels[1] = level2;
        levels[2] = level3;
        level.name = "";
        level2.name = "";
        level3.name = "X";
        level3.column = "";
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"", "", "", cube});
        assertNotNull("result", result);
    }
    
    public void testGetDimensionTable3() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[3];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension3 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[3];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy3 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[3];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        cube.dimensions = cubeDimensions;
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        cubeDimensions[2] = dimension3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        dimension.name = "";
        dimension2.name = "";
        dimension3.hierarchies = hierarchys;
        dimension3.name = "X";
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchys[2] = hierarchy3;
        hierarchy.name = "";
        hierarchy2.name = "";
        hierarchy3.name = "X";
        hierarchy3.levels = levels;
        hierarchy3.relation = null;
        levels[0] = level;
        levels[1] = level2;
        levels[2] = level3;
        level.name = "";
        level2.name = "";
        level3.name = "X";
        level3.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"["}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"]"}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"", "", "", cube});
        assertNotNull("result", result);
    }
    
    public void testGetDimensions() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        String[] strings = new String[0];
        cube.fact = table;
        cube.dimensions = cubeDimensions;
        table.name = "";
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table2;
        hierarchy.levels = levels;
        table2.name = "";
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level;
        levels2[1] = level2;
        level.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        level2.column = "";
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", strings, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String[] result = MolapSchemaReader.getDimensions(cube);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetFactTableName() throws Throwable {
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.fact = new MondrianDef.Table();
        String result = MolapSchemaReader.getFactTableName(cube);
        assertNull("result", result);
    }
    
    public void testGetHierarchyString() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        String result = MolapSchemaReader.getHierarchyString(dimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetHierarchyString1() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.name = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.relation = table;
        hierarchy.levels = levels;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        table.name = "";
        hierarchy2.name = "";
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getHierarchyString(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetHierarchyString2() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.name = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy.relation = table;
        hierarchy.levels = levels;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "trim", "()java.lang.String", new Object[] {}, "X", 1);
        table.name = "";
        hierarchy2.name = "";
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getHierarchyString(cubeDimensions);
        assertNotNull("result", result);
    }
    
    public void testGetHierarchyString3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[0];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.name = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = null;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        hierarchy2.name = null;
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "&", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getHierarchyString(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetHierarchyString4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[0];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.name = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.name = null;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        hierarchy2.name = null;
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "A", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getHierarchyString(cubeDimensions);
        assertEquals("result", "A", result);
    }
    
    public void testGetLevelsWithTableName() throws Throwable {
        MondrianDef.AggLevel aggLevel = new MondrianDef.AggLevel();
        aggLevel.name = "n;";
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[1];
        aggLevels[0] = aggLevel;
        String[] result = (String[]) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, new MondrianDef.Cube()});
        assertEquals("result.length", 1, result.length);
        assertNull("(String[]) result[0]", ((String[]) result)[0]);
    }
    
    public void testGetLevelsWithTableName1() throws Throwable {
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[0];
        String[] result = (String[]) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, new MondrianDef.Cube()});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetLevelsWithTableName2() throws Throwable {
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[2];
        MondrianDef.AggLevel aggLevel = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.AggLevel aggLevel2 = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.Cube cube = new MondrianDef.Cube();
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        String[] strings = new String[3];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        String[] strings2 = new String[0];
        aggLevels[0] = aggLevel;
        aggLevels[1] = aggLevel2;
        cube.dimensions = cubeDimensions;
        aggLevel.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        strings[0] = "";
        strings[1] = "";
        strings[2] = "";
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.name = "";
        dimension2.name = "X";
        dimension2.hierarchies = hierarchys;
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchy.name = "";
        hierarchy2.name = "X";
        hierarchy2.levels = levels;
        levels[0] = level;
        levels[1] = level2;
        level.name = "";
        level2.name = "";
        aggLevel2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String[] result = (String[]) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, cube});
        assertEquals("result.length", 2, result.length);
        assertEquals("(String[]) result[0]", "", ((String[]) result)[0]);
    }
    
    public void testGetLevelsWithTableName3() throws Throwable {
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[2];
        MondrianDef.AggLevel aggLevel = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.AggLevel aggLevel2 = (MondrianDef.AggLevel) Mockingbird.getProxyObject(MondrianDef.AggLevel.class);
        MondrianDef.Cube cube = new MondrianDef.Cube();
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        String[] strings = new String[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        String[] strings2 = new String[0];
        aggLevels[0] = aggLevel;
        aggLevels[1] = aggLevel2;
        cube.dimensions = cubeDimensions;
        aggLevel.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        strings[0] = "";
        strings[1] = "";
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.name = "";
        dimension2.name = "X";
        dimension2.hierarchies = hierarchys;
        hierarchys[0] = hierarchy;
        hierarchys[1] = hierarchy2;
        hierarchy.levels = levels;
        hierarchy2.levels = levels2;
        levels2[0] = level;
        levels2[1] = level2;
        level.name = "";
        level2.name = "";
        aggLevel2.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String[] result = (String[]) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, cube});
        assertEquals("result.length", 2, result.length);
        assertEquals("(String[]) result[0]", "", ((String[]) result)[0]);
    }
    
    public void testGetMeasureString() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        measures[0] = new MondrianDef.Measure();
        String result = MolapSchemaReader.getMeasureString(measures, 100);
        assertEquals("result", "null:100", result);
    }
    
    public void testGetMeasureString1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        measures[0] = new MondrianDef.Measure();
        measures[1] = new MondrianDef.Measure();
        String result = MolapSchemaReader.getMeasureString(measures, 100);
        assertEquals("result", "null:100,null:101", result);
    }
    
    public void testGetMeasureString2() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        String result = MolapSchemaReader.getMeasureString(measures, 100);
        assertEquals("result", "", result);
    }
    
    public void testGetMeasureStringForAgg() throws Throwable {
        String[] measures = new String[1];
        String result = MolapSchemaReader.getMeasureStringForAgg(measures, 100);
        assertEquals("result", "null:100", result);
    }
    
    public void testGetMeasureStringForAgg1() throws Throwable {
        String[] measures = new String[5];
        String result = MolapSchemaReader.getMeasureStringForAgg(measures, 100);
        assertEquals("result", "null:100,null:101,null:102,null:103,null:104", result);
    }
    
    public void testGetMeasureStringForAgg2() throws Throwable {
        String[] measures = new String[0];
        String result = MolapSchemaReader.getMeasureStringForAgg(measures, 100);
        assertEquals("result", "", result);
    }
    
    public void testGetMeasures() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        measures[0] = new MondrianDef.Measure();
        String[] result = MolapSchemaReader.getMeasures(measures);
        assertEquals("result.length", 1, result.length);
        assertNull("result[0]", result[0]);
    }
    
    public void testGetMeasures1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        String[] result = MolapSchemaReader.getMeasures(measures);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetMondrianCube() throws Throwable {
        MondrianDef.Schema schema = new MondrianDef.Schema();
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[2];
        cubes[0] = new MondrianDef.Cube();
        cubes[1] = new MondrianDef.Cube();
        schema.cubes = cubes;
        MondrianDef.Cube result = MolapSchemaReader.getMondrianCube(schema, "testMolapSchemaReaderCubeName");
        assertNull("result", result);
    }
    
    public void testGetMondrianCube1() throws Throwable {
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[0];
        MondrianDef.Schema schema = new MondrianDef.Schema();
        schema.cubes = cubes;
        MondrianDef.Cube result = MolapSchemaReader.getMondrianCube(schema, "testMolapSchemaReaderCubeName");
        assertNull("result", result);
    }
    
    public void testGetMondrianCube2() throws Throwable {
        MondrianDef.Schema schema = (MondrianDef.Schema) Mockingbird.getProxyObject(MondrianDef.Schema.class);
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[3];
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Cube cube2 = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        MondrianDef.Cube cube3 = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        schema.cubes = cubes;
        schema.name = "";
        cubes[0] = cube;
        cubes[1] = cube2;
        cubes[2] = cube3;
        cube.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        cube2.name = "";
        cube3.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        MondrianDef.Cube result = MolapSchemaReader.getMondrianCube(schema, "X");
        assertNotNull("result", result);
    }
    
    public void testGetMondrianCubes() throws Throwable {
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[0];
        MondrianDef.Schema schema = new MondrianDef.Schema();
        schema.cubes = cubes;
        MondrianDef.Cube[] result = MolapSchemaReader.getMondrianCubes(schema);
        assertSame("result", cubes, result);
    }
    
    public void testGetMondrianCubes1() throws Throwable {
        MondrianDef.Schema schema = (MondrianDef.Schema) Mockingbird.getProxyObject(MondrianDef.Schema.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        MondrianDef.Cube[] result = MolapSchemaReader.getMondrianCubes(schema);
        assertNull("result", result);
    }
    
    public void testGetPropertyString() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        int result = MolapSchemaReader.getPropertyString(dimensions, new StringBuilder(), 100);
        assertEquals("result", 100, result);
    }
    
    public void testGetPropertyString1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        int result = MolapSchemaReader.getPropertyString(dimensions, new StringBuilder(), 0);
        assertEquals("result", 0, result);
    }
    
    public void testGetPropertyString2() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        int result = MolapSchemaReader.getPropertyString(dimensions, new StringBuilder("testMolapSchemaReaderParam1"), 100);
        assertEquals("result", 100, result);
    }
    
    public void testGetPropertyString3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        MondrianDef.Hierarchy hierarchy2 = new MondrianDef.Hierarchy();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[1];
        MondrianDef.Property property = new MondrianDef.Property();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.levels = levels;
        hierarchy2.levels = levels2;
        levels2[0] = level;
        levels2[1] = level2;
        level.nameColumn = null;
        level.properties = propertys;
        level.column = "";
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean2, 1);
        propertys[0] = property;
        property.column = "";
        property.type = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = MolapSchemaReader.getPropertyString(cubeDimensions, stringBuilder, 0);
        assertEquals("result", 1, result);
    }
    
    public void testGetPropertyString4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        MondrianDef.Hierarchy hierarchy2 = new MondrianDef.Hierarchy();
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[2];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[1];
        MondrianDef.Property property = new MondrianDef.Property();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[1];
        MondrianDef.Property property2 = new MondrianDef.Property();
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.levels = levels;
        hierarchy2.levels = levels2;
        levels2[0] = level;
        levels2[1] = level2;
        level.nameColumn = null;
        level.properties = propertys;
        level.column = "";
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean2, 1);
        propertys[0] = property;
        property.column = "";
        property.type = "";
        level2.nameColumn = null;
        level2.properties = propertys2;
        level2.column = "";
        propertys2[0] = property2;
        property2.column = "";
        property2.type = "";
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, MolapMetadata.class, "getDBDataType", "(java.lang.String,boolean)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, stringBuilder, "toString", "()java.lang.String", new Object[] {}, "&", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        int result = MolapSchemaReader.getPropertyString(cubeDimensions, stringBuilder, 1);
        assertEquals("result", 3, result);
    }
    
    public void testGetPropetiesQuerypart() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder("testMolapSchemaReaderParam1");
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[0];
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName"});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 27, actual);
    }
    
    public void testGetPropetiesQuerypart1() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.ordinalColumn = null;
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypart2() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = null;
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypart3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.ordinalColumn = null;
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypart4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = null;
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypartWithQuotes() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[0];
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(' ');
        stringBuilder.insert(0, 100);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName"});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 4, actual);
    }
    
    public void testGetPropetiesQuerypartWithQuotes1() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = null;
        hierarchy.levels = levels;
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypartWithQuotes2() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.ordinalColumn = null;
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypartWithQuotes3() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = null;
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = null;
        hierarchy2.levels = levels2;
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypartWithQuotes4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.ordinalColumn = null;
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetPropetiesQuerypartWithQuotes5() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Level level = new MondrianDef.Level();
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = new MondrianDef.Level();
        MondrianDef.Level level3 = new MondrianDef.Level();
        MondrianDef.Level level4 = new MondrianDef.Level();
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        hierarchy.levels = levels;
        table.name = "";
        levels[0] = level;
        level.column = "X";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        hierarchy2.relation = table2;
        hierarchy2.levels = levels2;
        table2.name = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "X";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.column = "X";
        level3.ordinalColumn = "";
        level3.nameColumn = null;
        level3.properties = propertys3;
        level4.column = "X";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys4[0] = property;
        propertys4[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetQueryForDimension() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[0];
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {cubeDimensions, new StringBuilder("testMolapSchemaReaderParam1"), "testMolapSchemaReaderFactTableName", Boolean.TRUE})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testGetTableInputSQLQuery() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        String result = MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\n FROM testMolapSchemaReaderFactTableName ", result);
    }
    
    public void testGetTableInputSQLQuery1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        measures[0] = new MondrianDef.Measure();
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        String result = MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\n,testMolapSchemaReaderFactTableName.null\r\n FROM testMolapSchemaReaderFactTableName ", result);
    }
    
    public void testGetTableInputSQLQuery2() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        String result = MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n FROM \"testMolapSchemaReaderFactTableName\" ", result);
    }
    
    public void testGetTableInputSQLQuery3() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        String result = MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n FROM \"testMolapSchemaReaderFactTableName\" ", result);
    }
    
    public void testGetTableInputSQLQuery4() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        MondrianDef.Measure measure = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Measure measure2 = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property3 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property4 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        measures[0] = measure;
        measures[1] = measure2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.foreignKey = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.levels = levels;
        hierarchy.relation = table;
        hierarchy.primaryKey = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        table.name = "";
        levels[0] = level;
        level.column = "";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        hierarchy2.levels = levels2;
        hierarchy2.relation = null;
        hierarchy2.primaryKey = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.column = "";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        propertys4[0] = property3;
        propertys4[1] = property4;
        property3.column = "";
        property4.column = "";
        measure.column = "";
        measure2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level2}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level3}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level4}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getTableInputSQLQuery(cubeDimensions, measures, "", false);
        assertEquals("result", "", result);
    }
    
    public void testGetTableInputSQLQuery5() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        MondrianDef.Measure measure = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Measure measure2 = (MondrianDef.Measure) Mockingbird.getProxyObject(MondrianDef.Measure.class);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Level[] levels2 = new MondrianDef.Level[3];
        MondrianDef.Table table2 = new MondrianDef.Table();
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level3 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level4 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys3 = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys4 = new MondrianDef.Property[0];
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        measures[0] = measure;
        measures[1] = measure2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        dimension2.foreignKey = "";
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.levels = levels;
        hierarchy.relation = table;
        hierarchy.primaryKey = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        table.name = "";
        levels[0] = level;
        level.column = "";
        level.ordinalColumn = "";
        level.nameColumn = "";
        level.properties = propertys;
        hierarchy2.levels = levels2;
        hierarchy2.relation = table2;
        hierarchy2.primaryKey = "";
        table2.name = "";
        levels2[0] = level2;
        levels2[1] = level3;
        levels2[2] = level4;
        level2.column = "";
        level2.ordinalColumn = "";
        level2.nameColumn = "";
        level2.properties = propertys2;
        level3.column = "";
        level3.ordinalColumn = "";
        level3.nameColumn = "";
        level3.properties = propertys3;
        level4.column = "";
        level4.ordinalColumn = "";
        level4.nameColumn = "";
        level4.properties = propertys4;
        measure.column = "";
        measure2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level2}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level3}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapSchemaReader.class, "hasOrdinalColumn", "(mondrian.olap.MondrianDef$Level)boolean", new Object[] {level4}, boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"line.separator"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getTableInputSQLQuery(cubeDimensions, measures, "", true);
        assertEquals("result", "", result);
    }
    
    public void testGetTableInputSQLQueryForAGG() throws Throwable {
        String[] aggDim = new String[1];
        String[] measures = new String[4];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\nnull,\r\nnull,\r\nnull,\r\nnull,\r\nnull\r\n FROM testMolapSchemaReaderFactTableName", result);
    }
    
    public void testGetTableInputSQLQueryForAGG1() throws Throwable {
        String[] measures = new String[1];
        String[] aggDim = new String[1];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\nnull,\r\nnull\r\n FROM testMolapSchemaReaderFactTableName", result);
    }
    
    public void testGetTableInputSQLQueryForAGG2() throws Throwable {
        String[] aggDim = new String[1];
        String[] measures = new String[1];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n\"null\",\r\n\"null\"\r\n FROM \"testMolapSchemaReaderFactTableName\"", result);
    }
    
    public void testGetTableInputSQLQueryForAGG3() throws Throwable {
        String[] aggDim = new String[0];
        String[] measures = new String[2];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n\"null\",\r\n\"null\"\r\n FROM \"testMolapSchemaReaderFactTableName\"", result);
    }
    
    public void testGetTableInputSQLQueryForAGG4() throws Throwable {
        String[] aggDim = new String[1];
        String[] measures = new String[3];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n\"null\",\r\n\"null\",\r\n\"null\",\r\n\"null\"\r\n FROM \"testMolapSchemaReaderFactTableName\"", result);
    }
    
    public void testGetTableInputSQLQueryForAGG5() throws Throwable {
        String[] aggDim = new String[0];
        String[] measures = new String[1];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
        assertEquals("result", "SELECT \r\n\"null\"\r\n FROM \"testMolapSchemaReaderFactTableName\"", result);
    }
    
    public void testGetTableInputSQLQueryForAGG6() throws Throwable {
        String[] aggDim = new String[0];
        String[] measures = new String[1];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\nnull\r\n FROM testMolapSchemaReaderFactTableName", result);
    }
    
    public void testGetTableInputSQLQueryForAGG7() throws Throwable {
        String[] measures = new String[2];
        String[] aggDim = new String[0];
        String result = MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
        assertEquals("result", "SELECT \r\nnull,\r\nnull\r\n FROM testMolapSchemaReaderFactTableName", result);
    }
    
    public void testGetTableNameString() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Dimension dimension2 = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Hierarchy[] hierarchys2 = new MondrianDef.Hierarchy[2];
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Hierarchy hierarchy2 = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Table table2 = new MondrianDef.Table();
        cubeDimensions[0] = dimension;
        cubeDimensions[1] = dimension2;
        dimension.hierarchies = hierarchys;
        dimension2.hierarchies = hierarchys2;
        hierarchys2[0] = hierarchy;
        hierarchys2[1] = hierarchy2;
        hierarchy.relation = table;
        table.name = "";
        hierarchy2.relation = table2;
        table2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "lastIndexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = MolapSchemaReader.getTableNameString(cubeDimensions);
        assertEquals("result", "", result);
    }
    
    public void testGetTableNames() throws Throwable {
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", hierarchy});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetTableNames1() throws Throwable {
        MondrianDef.Level[] levels = new MondrianDef.Level[0];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        hierarchy.relation = new MondrianDef.Table();
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", hierarchy});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testHasOrdinalColumn() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = "testString";
        level.column = "testString";
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {level})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn1() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = null;
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {level})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumn2() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = "";
        level.column = "~\u0003\u001CXQ\u00166$G@;\u0000KbJe<nH";
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {level})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testPerpareMetaHeirString() throws Throwable {
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        dimension.name = "";
        hierarchy.relation = null;
        hierarchy.name = null;
        hierarchy.levels = levels;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        levels[1] = level2;
        level.column = "";
        level.ordinalColumn = "X";
        level.nameColumn = "";
        level.properties = propertys;
        level2.column = "";
        level2.ordinalColumn = "X";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {dimension, hierarchy});
        assertEquals("result", "", result);
    }
    
    public void testPerpareMetaHeirString1() throws Throwable {
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        dimension.name = "";
        hierarchy.relation = table;
        hierarchy.name = null;
        hierarchy.levels = levels;
        table.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        levels[1] = level2;
        level.column = "";
        level.ordinalColumn = null;
        level.nameColumn = "";
        level.properties = propertys;
        level2.column = "";
        level2.ordinalColumn = "X";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {dimension, hierarchy});
        assertEquals("result", "", result);
    }
    
    public void testPerpareMetaHeirString2() throws Throwable {
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        MondrianDef.Level[] levels = new MondrianDef.Level[2];
        MondrianDef.Level level = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Level level2 = (MondrianDef.Level) Mockingbird.getProxyObject(MondrianDef.Level.class);
        MondrianDef.Property[] propertys = new MondrianDef.Property[0];
        MondrianDef.Property[] propertys2 = new MondrianDef.Property[2];
        MondrianDef.Property property = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        MondrianDef.Property property2 = (MondrianDef.Property) Mockingbird.getProxyObject(MondrianDef.Property.class);
        dimension.name = "";
        hierarchy.relation = table;
        hierarchy.name = null;
        hierarchy.levels = levels;
        table.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        levels[0] = level;
        levels[1] = level2;
        level.column = "";
        level.ordinalColumn = "X";
        level.nameColumn = null;
        level.properties = propertys;
        level2.column = "";
        level2.ordinalColumn = "X";
        level2.nameColumn = "";
        level2.properties = propertys2;
        propertys2[0] = property;
        propertys2[1] = property2;
        property.column = "";
        property2.column = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        String result = (String) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {dimension, hierarchy});
        assertEquals("result", "", result);
    }
    
    public void testGeneratePropertyStringThrowsNullPointerException() throws Throwable {
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        StringBuilder stringBuilder = (StringBuilder) Mockingbird.getProxyObject(StringBuilder.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(100), hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 0, actual);
        }
    }
    
    public void testGeneratePropertyStringThrowsNullPointerException1() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder("testMolapSchemaReaderParam1");
        char[] chars = new char[0];
        stringBuilder.append(chars);
        MondrianDef.Level[] levels = new MondrianDef.Level[1];
        levels[0] = new MondrianDef.Level();
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(100), hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 27, actual);
        }
    }
    
    public void testGeneratePropertyStringThrowsNullPointerException2() throws Throwable {
        MondrianDef.Level[] levels = new MondrianDef.Level[3];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        StringBuilder stringBuilder = new StringBuilder("testMolapSchemaReaderParam1");
        Mockingbird.enterRecordingMode();
        boolean ordinalColumn = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {null})).booleanValue();
        Mockingbird.setException(ordinalColumn, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {stringBuilder, new Integer(100), hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 27, actual);
        }
    }
    
    public void testGetAggTableMeasureStringThrowsNullPointerException() throws Throwable {
        MondrianDef.AggMeasure[] measures = new MondrianDef.AggMeasure[2];
        measures[0] = new MondrianDef.AggMeasure();
        try {
            MolapSchemaReader.getAggTableMeasureString(measures);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetAggTableMeasureStringThrowsNullPointerException1() throws Throwable {
        MondrianDef.AggMeasure[] measures = new MondrianDef.AggMeasure[2];
        try {
            MolapSchemaReader.getAggTableMeasureString(measures);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetAggTableMeasureStringThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getAggTableMeasureString((MondrianDef.AggMeasure[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetAggTableThrowsNullPointerException() throws Throwable {
        try {
            MolapSchemaReader.getAggTable(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetAggTableThrowsNullPointerException1() throws Throwable {
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getAggTable(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetAggTableThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getAggTable(new MondrianDef.Cube());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCardinalitiesThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = new MondrianDef.DimensionUsage();
        try {
            MolapSchemaReader.getCardinalities(dimensions);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCardinalitiesThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[2];
        try {
            MolapSchemaReader.getCardinalities(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCardinalitiesThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getCardinalities((MondrianDef.CubeDimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCardinalitiesThrowsNullPointerException2() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        hierarchys[0] = new MondrianDef.Hierarchy();
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[2];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getCardinalities(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCardinalitiesThrowsNullPointerException3() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[2];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getCardinalities(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeDimensionsThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[2];
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.dimensions = cubeDimensions;
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getCubeDimensions(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeDimensionsThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getCubeDimensions(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasureAggregatorDetailsThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderAggTableName", null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasureAggregatorDetailsThrowsNullPointerException1() throws Throwable {
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.fact = new MondrianDef.Table();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderAggTableName", cube});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasureAggregatorDetailsThrowsNullPointerException2() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getCubeMeasureAggregatorDetails", new Class[] {String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderAggTableName", cube});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresAndDataTypeThrowsNullPointerException() throws Throwable {
        try {
            MolapSchemaReader.getCubeMeasuresAndDataType(new MondrianDef.Cube());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresAndDataTypeThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getCubeMeasuresAndDataType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresAndDataTypeThrowsNullPointerException2() throws Throwable {
        MondrianDef.Cube cube = new MondrianDef.Cube();
        MondrianDef.Measure[] measures = new MondrianDef.Measure[3];
        cube.measures = measures;
        try {
            MolapSchemaReader.getCubeMeasuresAndDataType(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresThrowsNullPointerException() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.measures = measures;
        try {
            MolapSchemaReader.getCubeMeasures(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getCubeMeasures(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetCubeMeasuresThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getCubeMeasures(new MondrianDef.Cube());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[1];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[3];
        dimensions[0] = new MondrianDef.VirtualCubeDimension();
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsNullPointerException() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[1];
        hierarchys[0] = new MondrianDef.Hierarchy();
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[2];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsNullPointerException1() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[1];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[3];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getDimensionSQLQueries((MondrianDef.CubeDimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionSQLQueriesThrowsNullPointerException3() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.Dimension[2];
        try {
            MolapSchemaReader.getDimensionSQLQueries(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionStringForAggThrowsArrayIndexOutOfBoundsException() throws Throwable {
        StringBuilder dimString = new StringBuilder();
        Map dimCardinalities = new HashMap(100, 100.0F);
        dimString.append(100);
        String[] dimensions = new String[0];
        try {
            MolapSchemaReader.getDimensionStringForAgg(dimensions, dimString, 100, dimCardinalities);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            assertEquals("(HashMap) dimCardinalities.size()", 0, dimCardinalities.size());
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 3, actual);
        }
    }
    
    public void testGetDimensionStringForAggThrowsNullPointerException() throws Throwable {
        Map dimCardinalities = new HashMap(100, 100.0F);
        String[] dimensions = new String[2];
        try {
            MolapSchemaReader.getDimensionStringForAgg(dimensions, null, 100, dimCardinalities);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            assertEquals("(HashMap) dimCardinalities.size()", 0, dimCardinalities.size());
        }
    }
    
    public void testGetDimensionStringForAggThrowsNullPointerException1() throws Throwable {
        StringBuilder dimString = new StringBuilder();
        Map dimCardinalities = new HashMap(100, 100.0F);
        dimString.append(100);
        try {
            MolapSchemaReader.getDimensionStringForAgg((String[]) null, dimString, 100, dimCardinalities);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            assertEquals("(HashMap) dimCardinalities.size()", 0, dimCardinalities.size());
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 3, actual);
        }
    }
    
    public void testGetDimensionStringForAggThrowsNullPointerException2() throws Throwable {
        String[] dimensions = new String[1];
        StringBuilder dimString = new StringBuilder();
        try {
            MolapSchemaReader.getDimensionStringForAgg(dimensions, dimString, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 9, actual);
        }
    }
    
    public void testGetDimensionStringForAggThrowsNullPointerException3() throws Throwable {
        String[] dimensions = new String[3];
        StringBuilder dimString = new StringBuilder("testMolapSchemaReaderParam1");
        try {
            MolapSchemaReader.getDimensionStringForAgg(dimensions, dimString, 100, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 36, actual);
        }
    }
    
    public void testGetDimensionStringThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = new MondrianDef.VirtualCubeDimension();
        StringBuilder dimString = new StringBuilder("testString");
        dimString.insert(0, 100);
        try {
            MolapSchemaReader.getDimensionString(dimensions, dimString, 100);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 13, actual);
        }
    }
    
    public void testGetDimensionStringThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        StringBuilder dimString = new StringBuilder();
        try {
            MolapSchemaReader.getDimensionString(dimensions, dimString, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 0, actual);
        }
    }
    
    public void testGetDimensionStringThrowsNullPointerException1() throws Throwable {
        StringBuilder dimString = (StringBuilder) Mockingbird.getProxyObject(StringBuilder.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getDimensionString((MondrianDef.CubeDimension[]) null, dimString, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, dimString, new Object[] {})).intValue();
            assertEquals("dimString.length()", 0, actual);
        }
    }
    
    public void testGetDimensionStringThrowsNullPointerException2() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getDimensionString(dimensions, null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionTableThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderDimName", "testMolapSchemaReaderLevelName", null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionTableThrowsNullPointerException1() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"]", "]", cube});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionTableThrowsStringIndexOutOfBoundsException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderDimName", "testMolapSchemaReaderLevelName", new MondrianDef.Cube()});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testGetDimensionTableThrowsStringIndexOutOfBoundsException1() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"]", "testMolapSchemaReaderHierName", "testMolapSchemaReaderLevelName", cube});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testGetDimensionTableThrowsStringIndexOutOfBoundsException2() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"testMolapSchemaReaderDimName", "testMolapSchemaReaderHierName", "testMolapSchemaReaderLevelName", new MondrianDef.Cube()});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testGetDimensionsThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = new MondrianDef.DimensionUsage();
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.dimensions = cubeDimensions;
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getDimensions(cube);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionsThrowsNullPointerException() throws Throwable {
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getDimensions(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionsThrowsNullPointerException1() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = dimension;
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.dimensions = cubeDimensions;
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getDimensions(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionsThrowsNullPointerException2() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        hierarchys[0] = new MondrianDef.Hierarchy();
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = dimension;
        MondrianDef.Cube cube = new MondrianDef.Cube();
        cube.dimensions = cubeDimensions;
        cube.fact = new MondrianDef.Table();
        try {
            MolapSchemaReader.getDimensions(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetDimensionsThrowsNullPointerException3() throws Throwable {
        try {
            MolapSchemaReader.getDimensions(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetFactTableNameThrowsNullPointerException() throws Throwable {
        MondrianDef.Cube cube = (MondrianDef.Cube) Mockingbird.getProxyObject(MondrianDef.Cube.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getFactTableName(cube);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetFactTableNameThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getFactTableName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetHierarchyStringThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = new MondrianDef.DimensionUsage();
        try {
            MolapSchemaReader.getHierarchyString(dimensions);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetHierarchyStringThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        try {
            MolapSchemaReader.getHierarchyString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetHierarchyStringThrowsNullPointerException1() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        hierarchys[0] = new MondrianDef.Hierarchy();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[4];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getHierarchyString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetHierarchyStringThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getHierarchyString((MondrianDef.CubeDimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsNullPointerException() throws Throwable {
        MondrianDef.AggLevel aggLevel = new MondrianDef.AggLevel();
        aggLevel.name = "\\.";
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[7];
        aggLevels[0] = aggLevel;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, new MondrianDef.Cube()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsNullPointerException1() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {null, new MondrianDef.Cube()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsNullPointerException2() throws Throwable {
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, new MondrianDef.Cube()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsNullPointerException3() throws Throwable {
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[2];
        aggLevels[0] = new MondrianDef.AggLevel();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, new MondrianDef.Cube()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsStringIndexOutOfBoundsException() throws Throwable {
        MondrianDef.AggLevel aggLevel = new MondrianDef.AggLevel();
        aggLevel.name = "Z|";
        MondrianDef.AggLevel aggLevel2 = new MondrianDef.AggLevel();
        aggLevel2.name = "1Vm{/@%CdEqYd%)Gho\t}Vie\n8.[ejKMEzp\"^gQF";
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[5];
        aggLevels[0] = aggLevel;
        aggLevels[1] = aggLevel2;
        MondrianDef.Cube cube = new MondrianDef.Cube();
        Mockingbird.enterRecordingMode();
        Object dimensionTable = callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"1Vm{/@%CdEqYd%)Gho\t}Vie\n8", "[ejKMEzp\"^gQF", cube});
        Mockingbird.setException(dimensionTable, (Throwable) Mockingbird.getProxyObject(StringIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, cube});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetLevelsWithTableNameThrowsStringIndexOutOfBoundsException1() throws Throwable {
        MondrianDef.AggLevel aggLevel = new MondrianDef.AggLevel();
        aggLevel.name = "1C._";
        MondrianDef.AggLevel[] aggLevels = new MondrianDef.AggLevel[8];
        aggLevels[0] = aggLevel;
        MondrianDef.Cube cube = new MondrianDef.Cube();
        Mockingbird.enterRecordingMode();
        Object dimensionTable = callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getDimensionTable", new Class[] {String.class, String.class, MondrianDef.Cube.class}, null, new Object[] {"1C", "_", cube});
        Mockingbird.setException(dimensionTable, (Throwable) Mockingbird.getProxyObject(StringIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getLevelsWithTableName", new Class[] {MondrianDef.AggLevel[].class, MondrianDef.Cube.class}, null, new Object[] {aggLevels, cube});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetMeasureStringForAggThrowsNullPointerException() throws Throwable {
        try {
            MolapSchemaReader.getMeasureStringForAgg((String[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMeasureStringThrowsNullPointerException() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[3];
        measures[0] = new MondrianDef.Measure();
        measures[1] = new MondrianDef.Measure();
        try {
            MolapSchemaReader.getMeasureString(measures, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMeasureStringThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getMeasureString((MondrianDef.Measure[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMeasureStringThrowsNullPointerException2() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[3];
        try {
            MolapSchemaReader.getMeasureString(measures, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMeasuresThrowsNullPointerException() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[2];
        try {
            MolapSchemaReader.getMeasures(measures);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMeasuresThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getMeasures((MondrianDef.Measure[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMetaHeirStringThrowsNullPointerException() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        hierarchys[0] = hierarchy;
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[4];
        dimensions[0] = dimension;
        Mockingbird.enterRecordingMode();
        Object metaHeirString = callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {dimension, hierarchy});
        Mockingbird.setException(metaHeirString, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getMetaHeirString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetMetaHeirStringThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getMetaHeirString((MondrianDef.CubeDimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMetaHeirStringThrowsNullPointerException2() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        try {
            MolapSchemaReader.getMetaHeirString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMetaHeirStringThrowsStringIndexOutOfBoundsException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getMetaHeirString(dimensions);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
        }
    }
    
    public void testGetMondrianCubeThrowsNullPointerException() throws Throwable {
        MondrianDef.Schema schema = new MondrianDef.Schema();
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[2];
        cubes[0] = new MondrianDef.Cube();
        schema.cubes = cubes;
        try {
            MolapSchemaReader.getMondrianCube(schema, "testMolapSchemaReaderCubeName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMondrianCubeThrowsNullPointerException1() throws Throwable {
        MondrianDef.Schema schema = (MondrianDef.Schema) Mockingbird.getProxyObject(MondrianDef.Schema.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getMondrianCube(schema, "testMolapSchemaReaderCubeName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMondrianCubeThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getMondrianCube(null, "testMolapSchemaReaderCubeName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMondrianCubeThrowsNullPointerException3() throws Throwable {
        MondrianDef.Cube[] cubes = new MondrianDef.Cube[5];
        MondrianDef.Schema schema = new MondrianDef.Schema();
        schema.cubes = cubes;
        try {
            MolapSchemaReader.getMondrianCube(schema, "testMolapSchemaReaderCubeName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetMondrianCubesThrowsNullPointerException() throws Throwable {
        try {
            MolapSchemaReader.getMondrianCubes(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropertyStringThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = new MondrianDef.VirtualCubeDimension();
        StringBuilder propString = new StringBuilder();
        propString.append("testMolapSchemaReaderParam1");
        try {
            MolapSchemaReader.getPropertyString(dimensions, propString, 100);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropertyStringThrowsNullPointerException() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[5];
        hierarchys[0] = hierarchy;
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[4];
        dimensions[0] = dimension;
        StringBuilder propString = new StringBuilder();
        propString.append(true);
        Mockingbird.enterRecordingMode();
        int propertyString = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "generatePropertyString", new Class[] {StringBuilder.class, int.class, MondrianDef.Hierarchy.class}, null, new Object[] {propString, new Integer(-100), hierarchy})).intValue();
        Mockingbird.setException(propertyString, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getPropertyString(dimensions, propString, -100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetPropertyStringThrowsNullPointerException1() throws Throwable {
        try {
            MolapSchemaReader.getPropertyString((MondrianDef.CubeDimension[]) null, new StringBuilder(), 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropertyStringThrowsNullPointerException2() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getPropertyString(dimensions, null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropertyStringThrowsNullPointerException3() throws Throwable {
        StringBuilder propString = new StringBuilder("testMolapSchemaReaderParam1");
        propString.insert(0, 100.0F);
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.Dimension[2];
        try {
            MolapSchemaReader.getPropertyString(dimensions, propString, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropertyStringThrowsNullPointerException4() throws Throwable {
        StringBuilder propString = new StringBuilder("testMolapSchemaReaderParam1");
        propString.append(100L);
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[4];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getPropertyString(dimensions, propString, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetPropetiesQuerypartThrowsNullPointerException() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(' ');
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[2];
        dimension.hierarchies = hierarchys;
        stringBuilder.deleteCharAt(0);
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = dimension;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 0, actual);
        }
    }
    
    public void testGetPropetiesQuerypartThrowsNullPointerException1() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(' ');
        stringBuilder.insert(0, 100);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {null, stringBuilder, "testMolapSchemaReaderFactTableName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 4, actual);
        }
    }
    
    public void testGetPropetiesQuerypartWithQuotesThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        StringBuilder stringBuilder = new StringBuilder();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 0, actual);
        }
    }
    
    public void testGetPropetiesQuerypartWithQuotesThrowsNullPointerException1() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        char[] chars = new char[1];
        stringBuilder.insert(0, chars);
        stringBuilder.append(' ');
        stringBuilder.insert(0, 100.0F);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {null, stringBuilder, "testMolapSchemaReaderFactTableName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 7, actual);
        }
    }
    
    public void testGetPropetiesQuerypartWithQuotesThrowsNullPointerException2() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[2];
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = dimension;
        StringBuilder stringBuilder = new StringBuilder();
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 0, actual);
        }
    }
    
    public void testGetQueryForDimensionThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] cubeDimensions = new MondrianDef.CubeDimension[1];
        cubeDimensions[0] = new MondrianDef.VirtualCubeDimension();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(100L);
        stringBuilder.insert(0, 100.0F);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {cubeDimensions, stringBuilder, "testMolapSchemaReaderFactTableName", Boolean.TRUE});
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 8, actual);
        }
    }
    
    public void testGetQueryForDimensionThrowsNullPointerException() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[1];
        hierarchys[0] = new MondrianDef.Hierarchy();
        dimension.hierarchies = hierarchys;
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[2];
        dimensions[0] = dimension;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, stringBuilder, "testMolapSchemaReaderFactTableName", Boolean.FALSE});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 6, actual);
        }
    }
    
    public void testGetQueryForDimensionThrowsNullPointerException1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.Dimension[2];
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, stringBuilder, "testMolapSchemaReaderFactTableName", Boolean.TRUE});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 4, actual);
        }
    }
    
    public void testGetQueryForDimensionThrowsNullPointerException2() throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {null, stringBuilder, "testMolapSchemaReaderFactTableName", Boolean.TRUE});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 4, actual);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsArrayIndexOutOfBoundsException() throws Throwable {
        String[] aggDim = new String[4];
        String[] measures = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        String[] aggDim = new String[4];
        String[] measures = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        String[] measures = new String[0];
        String[] aggDim = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", false);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        String[] measures = new String[0];
        String[] aggDim = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsNullPointerException() throws Throwable {
        String[] aggDim = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG(aggDim, (String[]) null, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryForAGGThrowsNullPointerException1() throws Throwable {
        String[] measures = new String[0];
        try {
            MolapSchemaReader.getTableInputSQLQueryForAGG((String[]) null, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[4];
        Mockingbird.enterRecordingMode();
        int queryForDimension = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3", Boolean.TRUE})).intValue();
        Mockingbird.setException(true, queryForDimension, (Throwable) Mockingbird.getProxyObject(ClassCastException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsClassCastException1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        Mockingbird.enterRecordingMode();
        int queryForDimension = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3", Boolean.TRUE})).intValue();
        Mockingbird.setException(true, queryForDimension, (Throwable) Mockingbird.getProxyObject(ClassCastException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[1];
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException1() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.Dimension[0];
        Mockingbird.enterRecordingMode();
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypart", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3"});
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException2() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        Mockingbird.enterRecordingMode();
        callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getPropetiesQuerypartWithQuotes", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3"});
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException3() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        Mockingbird.enterRecordingMode();
        int queryForDimension = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3", Boolean.TRUE})).intValue();
        Mockingbird.setException(true, queryForDimension, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException4() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery((MondrianDef.CubeDimension[]) null, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException5() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        Mockingbird.enterRecordingMode();
        int queryForDimension = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3", Boolean.TRUE})).intValue();
        Mockingbird.setException(true, queryForDimension, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableInputSQLQueryThrowsNullPointerException6() throws Throwable {
        MondrianDef.Measure[] measures = new MondrianDef.Measure[0];
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        Mockingbird.enterRecordingMode();
        int queryForDimension = ((Number) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getQueryForDimension", new Class[] {MondrianDef.CubeDimension[].class, StringBuilder.class, String.class, boolean.class}, null, new Object[] {dimensions, null, "testMolapSchemaReaderParam3", Boolean.TRUE})).intValue();
        Mockingbird.setException(true, queryForDimension, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            MolapSchemaReader.getTableInputSQLQuery(dimensions, measures, "testMolapSchemaReaderFactTableName", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetTableNameStringThrowsClassCastException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = new MondrianDef.VirtualCubeDimension();
        try {
            MolapSchemaReader.getTableNameString(dimensions);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNameStringThrowsNullPointerException() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        try {
            MolapSchemaReader.getTableNameString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNameStringThrowsNullPointerException1() throws Throwable {
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[1];
        hierarchys[0] = new MondrianDef.Hierarchy();
        dimension.hierarchies = hierarchys;
        MondrianDef.Dimension[] dimensions = new MondrianDef.Dimension[2];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getTableNameString(dimensions);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNameStringThrowsNullPointerException2() throws Throwable {
        try {
            MolapSchemaReader.getTableNameString((MondrianDef.CubeDimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNameStringThrowsStringIndexOutOfBoundsException() throws Throwable {
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.hierarchies = hierarchys;
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[1];
        dimensions[0] = dimension;
        try {
            MolapSchemaReader.getTableNameString(dimensions);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
        }
    }
    
    public void testGetTableNameStringThrowsStringIndexOutOfBoundsException1() throws Throwable {
        MondrianDef.CubeDimension[] dimensions = new MondrianDef.CubeDimension[0];
        try {
            MolapSchemaReader.getTableNameString(dimensions);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
        }
    }
    
    public void testGetTableNamesThrowsNullPointerException() throws Throwable {
        MondrianDef.Level[] levels = new MondrianDef.Level[3];
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNamesThrowsNullPointerException1() throws Throwable {
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNamesThrowsNullPointerException2() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testGetTableNamesThrowsNullPointerException3() throws Throwable {
        MondrianDef.Level[] levels = new MondrianDef.Level[3];
        levels[0] = new MondrianDef.Level();
        MondrianDef.Hierarchy hierarchy = new MondrianDef.Hierarchy();
        hierarchy.levels = levels;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "getTableNames", new Class[] {String.class, MondrianDef.Hierarchy.class}, null, new Object[] {"testMolapSchemaReaderFactTable", hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testHasOrdinalColumnThrowsNullPointerException() throws Throwable {
        MondrianDef.Level level = new MondrianDef.Level();
        level.ordinalColumn = "";
        level.column = null;
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {level});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testHasOrdinalColumnThrowsNullPointerException1() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "hasOrdinalColumn", new Class[] {MondrianDef.Level.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testLoadXMLThrowsNoClassDefFoundError() throws Throwable {
        try {
            MolapSchemaReader.loadXML("testMolapSchemaReaderCatalogUrl");
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertEquals("ex.getMessage()", "org/olap4j/mdx/IdentifierSegment", ex.getMessage());
            assertThrownBy(Class.class, ex);
        }
    }
    
    public void testPerpareMetaHeirStringThrowsNullPointerException() throws Throwable {
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {null, hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testPerpareMetaHeirStringThrowsNullPointerException1() throws Throwable {
        MondrianDef.Dimension dimension = (MondrianDef.Dimension) Mockingbird.getProxyObject(MondrianDef.Dimension.class);
        MondrianDef.Hierarchy hierarchy = (MondrianDef.Hierarchy) Mockingbird.getProxyObject(MondrianDef.Hierarchy.class);
        Mockingbird.enterTestMode(MolapSchemaReader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {dimension, hierarchy});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
    
    public void testPerpareMetaHeirStringThrowsNullPointerException2() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.metadata.MolapSchemaReader", "perpareMetaHeirString", new Class[] {MondrianDef.Dimension.class, MondrianDef.Hierarchy.class}, null, new Object[] {new MondrianDef.Dimension(), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSchemaReader.class, ex);
        }
    }
}

