/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:32:03 PM
 * Time to generate: 00:19.165 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.key.uncompressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import java.io.File;
import java.nio.ByteBuffer;

public class SingleArrayKeyFileStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SingleArrayKeyFileStore.class;
    }
    
    public void testConstructor() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(0, 100, 100L, "testSingleArrayKeyFileStoreFilePath", 1000);
        assertEquals("singleArrayKeyFileStore.filePath", "testSingleArrayKeyFileStoreFilePath", getPrivateField(singleArrayKeyFileStore, "filePath"));
        assertEquals("singleArrayKeyFileStore.totalNumberOfElements", 0, singleArrayKeyFileStore.totalNumberOfElements);
        assertEquals("singleArrayKeyFileStore.offset", 100L, ((Number) getPrivateField(singleArrayKeyFileStore, "offset")).longValue());
        assertEquals("singleArrayKeyFileStore.length", 1000, ((Number) getPrivateField(singleArrayKeyFileStore, "length")).intValue());
        assertNull("singleArrayKeyFileStore.datastore", singleArrayKeyFileStore.datastore);
        assertEquals("singleArrayKeyFileStore.sizeOfEachElement", 100, singleArrayKeyFileStore.sizeOfEachElement);
    }
    
    public void testConstructor1() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(0, 100);
        assertEquals("singleArrayKeyFileStore.totalNumberOfElements", 0, singleArrayKeyFileStore.totalNumberOfElements);
        assertEquals("singleArrayKeyFileStore.datastore.length", 0, singleArrayKeyFileStore.datastore.length);
        assertEquals("singleArrayKeyFileStore.sizeOfEachElement", 100, singleArrayKeyFileStore.sizeOfEachElement);
    }
    
    public void testGet() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(100, 1, 100L, "testSingleArrayKeyFileStoreFilePath", 1000);
        byte[] result = singleArrayKeyFileStore.get(100, new FileHolderImpl());
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGet1() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl(100);
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(100, 0, 100L, "testSingleArrayKeyFileStoreFilePath", 1000);
        byte[] result = singleArrayKeyFileStore.get(100, fileHolder);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetBackArray() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(0, 100, 100L, "testSingleArrayKeyFileStoreFilePath", 0);
        byte[] result = singleArrayKeyFileStore.getBackArray(new FileHolderImpl(100));
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetBackArray1() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(100, 1000, 100L, "testSingleArrayKeyFileStoreFilePath", 1);
        byte[] result = singleArrayKeyFileStore.getBackArray(new FileHolderImpl());
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            new SingleArrayKeyFileStore(100, -1, 100L, "testSingleArrayKeyFileStoreFilePath", 1000);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractSingleArrayKeyStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException1() throws Throwable {
        try {
            new SingleArrayKeyFileStore(-1, 100);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractSingleArrayKeyStore.class, ex);
        }
    }
    
    public void testGetBackArrayThrowsIllegalArgumentException() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(100, 1000, 100L, "testSingleArrayKeyFileStoreFilePath", -1);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            singleArrayKeyFileStore.getBackArray(fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testGetBackArrayThrowsNullPointerException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        try {
            new SingleArrayKeyFileStore(100, 1000).getBackArray(fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(100, 1000, 100L, "testSingleArrayKeyFileStoreFilePath", 0);
        try {
            singleArrayKeyFileStore.get(100, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(0, 100, 100L, "testSingleArrayKeyFileStoreFilePath", -1);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            singleArrayKeyFileStore.get(100, fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testGetThrowsNegativeArraySizeException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        SingleArrayKeyFileStore singleArrayKeyFileStore = new SingleArrayKeyFileStore(0, -1, 100L, "testSingleArrayKeyFileStoreFilePath", 100);
        try {
            singleArrayKeyFileStore.get(100, fileHolder);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SingleArrayKeyFileStore.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        try {
            new SingleArrayKeyFileStore(0, 100, 100L, null, 1000).get(100, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
}

