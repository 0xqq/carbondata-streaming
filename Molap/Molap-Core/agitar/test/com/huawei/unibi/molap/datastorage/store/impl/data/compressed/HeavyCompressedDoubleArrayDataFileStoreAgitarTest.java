/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:30:11 PM
 * Time to generate: 00:23.855 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.data.compressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.MeasureDataWrapper;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinFloat;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneFloat;
import com.huawei.unibi.molap.datastorage.store.impl.CompressedDataMeasureDataWrapper;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import java.nio.ByteBuffer;

public class HeavyCompressedDoubleArrayDataFileStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HeavyCompressedDoubleArrayDataFileStore.class;
    }
    
    public void testConstructor() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.elementSize", 1000, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "elementSize")).intValue());
        assertEquals("heavyCompressedDoubleArrayDataFileStore.datastore.length", 1000, heavyCompressedDoubleArrayDataFileStore.datastore.length);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.totalSize", 100, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "totalSize")).intValue());
        assertSame("heavyCompressedDoubleArrayDataFileStore.compressionModel", compressionModel, heavyCompressedDoubleArrayDataFileStore.compressionModel);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.values.length", 2, heavyCompressedDoubleArrayDataFileStore.values.length);
    }
    
    public void testConstructor1() throws Throwable {
        int[] measuresLengthArray = new int[2];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[0];
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        Object actual = getPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresOffsetsArray");
        assertSame("heavyCompressedDoubleArrayDataFileStore.measuresOffsetsArray", measuresOffsetsArray, actual);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.elementSize", 1000, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "elementSize")).intValue());
        assertEquals("heavyCompressedDoubleArrayDataFileStore.fileName", "testHeavyCompressedDoubleArrayDataFileStoreFileName", getPrivateField(heavyCompressedDoubleArrayDataFileStore, "fileName"));
        assertNull("heavyCompressedDoubleArrayDataFileStore.datastore", heavyCompressedDoubleArrayDataFileStore.datastore);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.totalSize", 100, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "totalSize")).intValue());
        assertSame("heavyCompressedDoubleArrayDataFileStore.compressionModel", compressionModel, heavyCompressedDoubleArrayDataFileStore.compressionModel);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.values.length", 0, heavyCompressedDoubleArrayDataFileStore.values.length);
        assertSame("heavyCompressedDoubleArrayDataFileStore.measuresLengthArray", measuresLengthArray, getPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresLengthArray"));
    }
    
    public void testConstructor2() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinFloat();
        unCompressValues[1] = new UnCompressNoneFloat();
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[3];
        int[] measuresLengthArray = new int[3];
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        Object actual = getPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresOffsetsArray");
        assertSame("heavyCompressedDoubleArrayDataFileStore.measuresOffsetsArray", measuresOffsetsArray, actual);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.elementSize", 1000, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "elementSize")).intValue());
        assertEquals("heavyCompressedDoubleArrayDataFileStore.fileName", "testHeavyCompressedDoubleArrayDataFileStoreFileName", getPrivateField(heavyCompressedDoubleArrayDataFileStore, "fileName"));
        assertNull("heavyCompressedDoubleArrayDataFileStore.datastore", heavyCompressedDoubleArrayDataFileStore.datastore);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.totalSize", 100, ((Number) getPrivateField(heavyCompressedDoubleArrayDataFileStore, "totalSize")).intValue());
        assertSame("heavyCompressedDoubleArrayDataFileStore.compressionModel", compressionModel, heavyCompressedDoubleArrayDataFileStore.compressionModel);
        assertEquals("heavyCompressedDoubleArrayDataFileStore.values.length", 2, heavyCompressedDoubleArrayDataFileStore.values.length);
        assertSame("heavyCompressedDoubleArrayDataFileStore.measuresLengthArray", measuresLengthArray, getPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresLengthArray"));
    }
    
    public void testGetBackData() throws Throwable {
        int[] measuresLengthArray = new int[3];
        long[] measuresOffsetsArray = new long[3];
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[0];
        compressionModel.setUnCompressValues(unCompressValues);
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) heavyCompressedDoubleArrayDataFileStore.getBackData((int[]) null, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testGetBackData1() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinFloat();
        unCompressValues[1] = new UnCompressNoneFloat();
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[3];
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        int[] cols = new int[0];
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) heavyCompressedDoubleArrayDataFileStore.getBackData(cols, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testGetBackDataWithAggressiveMocks() throws Throwable {
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = (HeavyCompressedDoubleArrayDataFileStore) Mockingbird.getProxyObject(HeavyCompressedDoubleArrayDataFileStore.class, true);
        long[] longs = new long[1];
        int[] ints = new int[1];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        int[] ints2 = new int[2];
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        ValueCompressionUtil.DataType[] dataTypes = new ValueCompressionUtil.DataType[1];
        int[] ints3 = new int[0];
        double[] doubles = new double[0];
        ValueCompressionUtil.DataType dataType = (ValueCompressionUtil.DataType) Mockingbird.getProxyObject(ValueCompressionUtil.DataType.class);
        ValueCompressonHolder.UnCompressValue unCompressValue2 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes2 = new byte[0];
        ValueCompressonHolder.UnCompressValue unCompressValue3 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "fileName", "");
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresOffsetsArray", longs);
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresLengthArray", ints);
        heavyCompressedDoubleArrayDataFileStore.values = unCompressValues;
        heavyCompressedDoubleArrayDataFileStore.compressionModel = valueCompressionModel;
        ints2[0] = 0;
        ints2[1] = 0;
        unCompressValues[0] = unCompressValue;
        longs[0] = 0L;
        ints[0] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes, 1);
        Mockingbird.enterNormalMode();
        valueCompressionModel.setChangedDataType(dataTypes);
        valueCompressionModel.setDecimal(ints3);
        valueCompressionModel.setMaxValue(doubles);
        dataTypes[0] = dataType;
        Mockingbird.enterRecordingMode();
        unCompressValue.setValue(bytes);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(unCompressValue.uncompress(dataType), unCompressValue2);
        Mockingbird.setReturnValue(false, unCompressValue, "setValue", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes2, 1);
        unCompressValue.setValue(bytes2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, unCompressValue, "uncompress", "(com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$DataType)com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder$UnCompressValue", unCompressValue3, 1);
        Mockingbird.setReturnValue(false, unCompressValue, "setValue", "(java.lang.Object)void", null, 1);
        Mockingbird.replaceObjectForRecording(CompressedDataMeasureDataWrapper.class, "<init>(com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder$UnCompressValue[],int[],double[])", Mockingbird.getProxyObject(CompressedDataMeasureDataWrapper.class));
        Mockingbird.enterTestMode(HeavyCompressedDoubleArrayDataFileStore.class);
        MeasureDataWrapper result = heavyCompressedDoubleArrayDataFileStore.getBackData(ints2, fileHolder);
        assertNotNull("result", result);
    }
    
    public void testGetBackDataWithAggressiveMocks1() throws Throwable {
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = (HeavyCompressedDoubleArrayDataFileStore) Mockingbird.getProxyObject(HeavyCompressedDoubleArrayDataFileStore.class, true);
        long[] longs = new long[2];
        int[] ints = new int[2];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        ValueCompressonHolder.UnCompressValue unCompressValue = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        ValueCompressonHolder.UnCompressValue unCompressValue2 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes = new byte[0];
        ValueCompressionUtil.DataType[] dataTypes = new ValueCompressionUtil.DataType[2];
        int[] ints2 = new int[0];
        double[] doubles = new double[0];
        ValueCompressionUtil.DataType dataType = (ValueCompressionUtil.DataType) Mockingbird.getProxyObject(ValueCompressionUtil.DataType.class);
        ValueCompressionUtil.DataType dataType2 = (ValueCompressionUtil.DataType) Mockingbird.getProxyObject(ValueCompressionUtil.DataType.class);
        ValueCompressonHolder.UnCompressValue unCompressValue3 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        byte[] bytes2 = new byte[0];
        ValueCompressonHolder.UnCompressValue unCompressValue4 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "fileName", "");
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresOffsetsArray", longs);
        setPrivateField(heavyCompressedDoubleArrayDataFileStore, "measuresLengthArray", ints);
        heavyCompressedDoubleArrayDataFileStore.values = unCompressValues;
        heavyCompressedDoubleArrayDataFileStore.compressionModel = valueCompressionModel;
        unCompressValues[0] = unCompressValue;
        unCompressValues[1] = unCompressValue2;
        longs[0] = 0L;
        longs[1] = 0L;
        ints[0] = 0;
        ints[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes, 1);
        Mockingbird.enterNormalMode();
        valueCompressionModel.setChangedDataType(dataTypes);
        valueCompressionModel.setDecimal(ints2);
        valueCompressionModel.setMaxValue(doubles);
        dataTypes[0] = dataType;
        dataTypes[1] = dataType2;
        Mockingbird.enterRecordingMode();
        unCompressValue.setValue(bytes);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, unCompressValue, "uncompress", "(com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$DataType)com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder$UnCompressValue", unCompressValue3, 1);
        Mockingbird.setReturnValue(false, unCompressValue, "setValue", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes2, 1);
        unCompressValue2.setValue(bytes2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, unCompressValue2, "uncompress", "(com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$DataType)com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder$UnCompressValue", unCompressValue4, 1);
        Mockingbird.setReturnValue(false, unCompressValue2, "setValue", "(java.lang.Object)void", null, 1);
        Mockingbird.replaceObjectForRecording(CompressedDataMeasureDataWrapper.class, "<init>(com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder$UnCompressValue[],int[],double[])", Mockingbird.getProxyObject(CompressedDataMeasureDataWrapper.class));
        Mockingbird.enterTestMode(HeavyCompressedDoubleArrayDataFileStore.class);
        MeasureDataWrapper result = heavyCompressedDoubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
        assertNotNull("result", result);
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, -1, new ValueCompressionModel());
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException1() throws Throwable {
        long[] measuresOffsetsArray = new long[1];
        int[] measuresLengthArray = new int[3];
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, -1, new ValueCompressionModel(), measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, 1000, new ValueCompressionModel());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        int[] measuresLengthArray = new int[2];
        long[] measuresOffsetsArray = new long[3];
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, 1000, new ValueCompressionModel(), measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        int[] measuresLengthArray = new int[3];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[4];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinShort();
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[3];
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        int[] measuresLengthArray = new int[3];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[3];
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[1];
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinFloat();
        unCompressValues[1] = new UnCompressNoneFloat();
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[3];
        int[] measuresLengthArray = new int[3];
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        int[] cols = new int[1];
        cols[0] = 4;
        FileHolder fileHolder = new FileHolderImpl();
        try {
            heavyCompressedDoubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "4", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] ints = new int[2];
        double[] doubles = new double[0];
        double[] doubles2 = new double[2];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        long[] measuresOffsetsArray = new long[3];
        int[] measuresLengthArray = new int[3];
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        unCompressValues[1] = new UnCompressMaxMinLong();
        compressionModel.setUnCompressValues(unCompressValues);
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        int[] cols = new int[3];
        FileHolder fileHolder = new FileHolderImpl(100);
        try {
            heavyCompressedDoubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsIllegalArgumentException() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        int[] measuresLengthArray = new int[1];
        measuresLengthArray[0] = -1;
        long[] measuresOffsetsArray = new long[2];
        Mockingbird.enterRecordingMode();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        ValueCompressonHolder.UnCompressValue unCompressNoneByte = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        unCompressValues[0] = unCompressNoneByte;
        ValueCompressonHolder.UnCompressValue unCompressNoneInt = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        unCompressValues[1] = unCompressNoneInt;
        Mockingbird.setReturnValue(compressionModel.getUnCompressValues(), unCompressValues);
        Mockingbird.setReturnValue(compressionModel.getUnCompressValues(), unCompressValues);
        ValueCompressonHolder.UnCompressValue unCompressNoneByte2 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        Mockingbird.setReturnValue(unCompressNoneByte.getNew(), unCompressNoneByte2);
        Mockingbird.setReturnValue(unCompressNoneByte2.getCompressorObject(), Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class));
        Mockingbird.setReturnValue(compressionModel.getUnCompressValues(), unCompressValues);
        ValueCompressonHolder.UnCompressValue unCompressNoneInt2 = (ValueCompressonHolder.UnCompressValue) Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class);
        Mockingbird.setReturnValue(unCompressNoneInt.getNew(), unCompressNoneInt2);
        Mockingbird.setReturnValue(unCompressNoneInt2.getCompressorObject(), Mockingbird.getProxyObject(ValueCompressonHolder.UnCompressValue.class));
        Mockingbird.enterTestMode(HeavyCompressedDoubleArrayDataFileStore.class);
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        FileHolder fileHolder = new FileHolderImpl(100);
        try {
            heavyCompressedDoubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testGetBackDataThrowsNullPointerException() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel).getBackData((int[]) null, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsNullPointerException1() throws Throwable {
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinFloat();
        unCompressValues[1] = new UnCompressNoneFloat();
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        compressionModel.setUnCompressValues(unCompressValues);
        int[] measuresLengthArray = new int[3];
        long[] measuresOffsetsArray = new long[2];
        HeavyCompressedDoubleArrayDataFileStore heavyCompressedDoubleArrayDataFileStore = new HeavyCompressedDoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, measuresLengthArray, "testHeavyCompressedDoubleArrayDataFileStoreFileName");
        FileHolder fileHolder = new FileHolderImpl();
        try {
            heavyCompressedDoubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HeavyCompressedDoubleArrayDataFileStore.class, ex);
        }
    }
}

