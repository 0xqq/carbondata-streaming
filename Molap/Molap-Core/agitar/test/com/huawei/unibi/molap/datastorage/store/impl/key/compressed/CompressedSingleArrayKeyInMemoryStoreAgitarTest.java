/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:40 PM
 * Time to generate: 00:14.507 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.key.compressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import java.nio.ByteBuffer;

public class CompressedSingleArrayKeyInMemoryStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CompressedSingleArrayKeyInMemoryStore.class;
    }
    
    public void testConstructor() throws Throwable {
        CompressedSingleArrayKeyInMemoryStore compressedSingleArrayKeyInMemoryStore = new CompressedSingleArrayKeyInMemoryStore(100, 1000);
        assertEquals("compressedSingleArrayKeyInMemoryStore.totalNumberOfElements", 100, compressedSingleArrayKeyInMemoryStore.totalNumberOfElements);
        assertEquals("compressedSingleArrayKeyInMemoryStore.sizeOfEachElement", 1000, compressedSingleArrayKeyInMemoryStore.sizeOfEachElement);
        assertEquals("compressedSingleArrayKeyInMemoryStore.datastore.length", 100000, compressedSingleArrayKeyInMemoryStore.datastore.length);
    }
    
    public void testConstructor1() throws Throwable {
        CompressedSingleArrayKeyInMemoryStore compressedSingleArrayKeyInMemoryStore = new CompressedSingleArrayKeyInMemoryStore(0, 100, 100L, "testCompressedSingleArrayKeyInMemoryStoreFilePath", new FileHolderImpl(), 1000);
        assertEquals("compressedSingleArrayKeyInMemoryStore.totalNumberOfElements", 0, compressedSingleArrayKeyInMemoryStore.totalNumberOfElements);
        assertEquals("compressedSingleArrayKeyInMemoryStore.datastore.length", 1000, compressedSingleArrayKeyInMemoryStore.datastore.length);
        assertEquals("compressedSingleArrayKeyInMemoryStore.sizeOfEachElement", 100, compressedSingleArrayKeyInMemoryStore.sizeOfEachElement);
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        try {
            new CompressedSingleArrayKeyInMemoryStore(0, 100, 100L, "testCompressedSingleArrayKeyInMemoryStoreFilePath", fileHolder, -1);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            new CompressedSingleArrayKeyInMemoryStore(100, -1);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCompressedSingleArrayStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException1() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        try {
            new CompressedSingleArrayKeyInMemoryStore(100, -1, 100L, "testCompressedSingleArrayKeyInMemoryStoreFilePath", fileHolder, 1000);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCompressedSingleArrayStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CompressedSingleArrayKeyInMemoryStore(0, 100, 100L, "testCompressedSingleArrayKeyInMemoryStoreFilePath", null, 1000);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CompressedSingleArrayKeyInMemoryStore.class, ex);
        }
    }
}

