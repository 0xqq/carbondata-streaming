/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:32:39 PM
 * Time to generate: 00:15.867 seconds
 *
 */

package com.huawei.unibi.molap.metadata;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;

public class SliceMetaDataAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SliceMetaData.class;
    }
    
    public void testConstructor() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        assertNull("sliceMetaData.getNewMsrDfts()", sliceMetaData.getNewMsrDfts());
    }
    
    public void testEquals() throws Throwable {
        boolean result = new SliceMetaData().equals(new Integer(-100));
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        SliceMetaData obj = new SliceMetaData();
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals2() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] dimensions = new String[0];
        sliceMetaData.setDimensions(dimensions);
        boolean result = sliceMetaData.equals(new SliceMetaData());
        assertFalse("result", result);
    }
    
    public void testHashCode() throws Throwable {
        int result = new SliceMetaData().hashCode();
        assertEquals("result", 887503681, result);
    }
    
    public void testHashCode1() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        int[] lens = new int[0];
        sliceMetaData.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        sliceMetaData.hashCode();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetDimensions() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] dimensions = new String[0];
        sliceMetaData.setDimensions(dimensions);
        assertSame("sliceMetaData.getDimensions()", dimensions, sliceMetaData.getDimensions());
    }
    
    public void testSetKeyGenerator() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        sliceMetaData.setKeyGenerator(keyGenerator);
        assertSame("sliceMetaData.getKeyGenerator()", keyGenerator, sliceMetaData.getKeyGenerator());
    }
    
    public void testSetMeasureOrdinal() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        int[] measureOrdinal = new int[3];
        sliceMetaData.setMeasureOrdinal(measureOrdinal);
        assertSame("sliceMetaData.getMeasureOrdinal()", measureOrdinal, sliceMetaData.getMeasureOrdinal());
    }
    
    public void testSetMeasures() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] measures = new String[2];
        sliceMetaData.setMeasures(measures);
        assertSame("sliceMetaData.getMeasures()", measures, sliceMetaData.getMeasures());
    }
    
    public void testSetNewDimensions() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] newDimensions = new String[3];
        sliceMetaData.setNewDimensions(newDimensions);
        assertSame("sliceMetaData.getNewDimensions()", newDimensions, sliceMetaData.getNewDimensions());
    }
    
    public void testSetNewMeasureAggreagtor() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] newMeasureAggreagtor = new String[3];
        sliceMetaData.setNewMeasureAggreagtor(newMeasureAggreagtor);
        assertSame("sliceMetaData.getNewMeasureAggreagtor()", newMeasureAggreagtor, sliceMetaData.getNewMeasureAggreagtor());
    }
    
    public void testSetNewMeasures() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        String[] newMeasures = new String[3];
        sliceMetaData.setNewMeasures(newMeasures);
        assertSame("sliceMetaData.getNewMeasures()", newMeasures, sliceMetaData.getNewMeasures());
    }
    
    public void testSetNewMsrDfts() throws Throwable {
        SliceMetaData sliceMetaData = new SliceMetaData();
        double[] newMsrDfts = new double[0];
        sliceMetaData.setNewMsrDfts(newMsrDfts);
        assertSame("sliceMetaData.getNewMsrDfts()", newMsrDfts, sliceMetaData.getNewMsrDfts());
    }
}

