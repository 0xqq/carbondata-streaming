/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:33:34 PM
 * Time to generate: 00:17.117 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.compression.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.compression.Compressor;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.util.MolapCoreLogEvent;
import java.nio.ByteBuffer;

public class UnCompressMaxMinIntAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return UnCompressMaxMinInt.class;
    }
    
    public void testConstructor() throws Throwable {
        new UnCompressMaxMinInt();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCompressWithAggressiveMocks() throws Throwable {
        storeStaticField(UnCompressMaxMinInt.class, "intCompressor");
        UnCompressMaxMinInt unCompressMaxMinInt = (UnCompressMaxMinInt) Mockingbird.getProxyObject(UnCompressMaxMinInt.class, true);
        int[] ints = new int[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(UnCompressMaxMinByte.class, "<init>()", new UnCompressMaxMinByte());
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes = new byte[0];
        Mockingbird.enterNormalMode();
        unCompressMaxMinInt.setValue(ints);
        setPrivateField(UnCompressMaxMinInt.class, "intCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.compress(ints), bytes);
        Mockingbird.enterTestMode(UnCompressMaxMinInt.class);
        ValueCompressonHolder.UnCompressValue result = unCompressMaxMinInt.compress();
        assertEquals("result.getBackArrayData().length", 0, result.getBackArrayData().length);
        assertNotNull("unCompressMaxMinIntUnCompressMaxMinInt.intCompressor", getPrivateField(UnCompressMaxMinInt.class, "intCompressor"));
    }
    
    public void testGetBackArrayData() throws Throwable {
        int[] value = new int[2];
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        unCompressMaxMinInt.setValue(value);
        byte[] result = unCompressMaxMinInt.getBackArrayData();
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBackArrayData1() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        int[] value = new int[0];
        unCompressMaxMinInt.setValue(value);
        byte[] result = unCompressMaxMinInt.getBackArrayData();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetCompressorObject() throws Throwable {
        UnCompressMaxMinByte result = (UnCompressMaxMinByte) new UnCompressMaxMinInt().getCompressorObject();
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testGetNew() throws Throwable {
        UnCompressMaxMinInt result = (UnCompressMaxMinInt) new UnCompressMaxMinInt().getNew();
        assertNotNull("result", result);
    }
    
    public void testGetNewWithAggressiveMocks() throws Throwable {
        storeStaticField(UnCompressMaxMinInt.class, "LOGGER");
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        UnCompressMaxMinInt unCompressMaxMinInt = (UnCompressMaxMinInt) Mockingbird.getProxyObject(UnCompressMaxMinInt.class, true);
        CloneNotSupportedException cloneNotSupportedException = (CloneNotSupportedException) Mockingbird.getProxyObject(CloneNotSupportedException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, unCompressMaxMinInt, "clone", "()java.lang.Object", new Object[] {}, cloneNotSupportedException, 1);
        setPrivateField(UnCompressMaxMinInt.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, cloneNotSupportedException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(UnCompressMaxMinInt.class);
        ValueCompressonHolder.UnCompressValue result = unCompressMaxMinInt.getNew();
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        int[] value = new int[1];
        unCompressMaxMinInt.setValue(value);
        double result = unCompressMaxMinInt.getValue(0, 100, 0.0);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetValue1() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        int[] value = new int[2];
        unCompressMaxMinInt.setValue(value);
        double result = unCompressMaxMinInt.getValue(0, 100, 100.0);
        assertEquals("result", 100.0, result, 1.0E-6);
    }
    
    public void testSetValue() throws Throwable {
        int[] value = new int[2];
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        unCompressMaxMinInt.setValue(value);
        assertEquals("unCompressMaxMinInt.getBackArrayData().length", 8, unCompressMaxMinInt.getBackArrayData().length);
    }
    
    public void testSetValueInBytes() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        byte[] value = new byte[3];
        unCompressMaxMinInt.setValueInBytes(value);
        assertEquals("unCompressMaxMinInt.getBackArrayData().length", 0, unCompressMaxMinInt.getBackArrayData().length);
    }
    
    public void testUncompress() throws Throwable {
        ValueCompressonHolder.UnCompressValue result = new UnCompressMaxMinInt().uncompress(ValueCompressionUtil.DataType.DATA_INT);
        assertNull("result", result);
    }
    
    public void testGetBackArrayDataThrowsNullPointerException() throws Throwable {
        UnCompressMaxMinInt new2 = (UnCompressMaxMinInt) new UnCompressMaxMinInt().getNew();
        new2.setValue((int[]) null);
        try {
            new2.getBackArrayData();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueThrowsArrayIndexOutOfBoundsException() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        byte[] value = new byte[3];
        unCompressMaxMinInt.setValueInBytes(value);
        try {
            unCompressMaxMinInt.getValue(100, 1000, 100.0);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(UnCompressMaxMinInt.class, ex);
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        try {
            new UnCompressMaxMinInt().getValue(100, 1000, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(UnCompressMaxMinInt.class, ex);
        }
    }
    
    public void testSetValueInBytesThrowsNullPointerException() throws Throwable {
        UnCompressMaxMinInt unCompressMaxMinInt = new UnCompressMaxMinInt();
        try {
            unCompressMaxMinInt.setValueInBytes((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
            assertNull("unCompressMaxMinInt.value", getPrivateField(unCompressMaxMinInt, "value"));
        }
    }
}

