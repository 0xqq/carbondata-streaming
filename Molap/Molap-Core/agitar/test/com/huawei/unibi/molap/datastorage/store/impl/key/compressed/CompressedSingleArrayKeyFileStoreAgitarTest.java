/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:39 PM
 * Time to generate: 00:26.277 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.key.compressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.compression.Compressor;
import com.huawei.unibi.molap.datastorage.store.compression.SnappyCompression;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import java.io.File;
import java.nio.ByteBuffer;

public class CompressedSingleArrayKeyFileStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CompressedSingleArrayKeyFileStore.class;
    }
    
    public void testConstructor() throws Throwable {
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(0, 100, 100L, "testCompressedSingleArrayKeyFileStoreFilePath", 1000);
        assertEquals("compressedSingleArrayKeyFileStore.length", 1000, ((Number) getPrivateField(compressedSingleArrayKeyFileStore, "length")).intValue());
        assertEquals("compressedSingleArrayKeyFileStore.offset", 100L, ((Number) getPrivateField(compressedSingleArrayKeyFileStore, "offset")).longValue());
        assertEquals("compressedSingleArrayKeyFileStore.totalNumberOfElements", 0, compressedSingleArrayKeyFileStore.totalNumberOfElements);
        assertEquals("compressedSingleArrayKeyFileStore.sizeOfEachElement", 100, compressedSingleArrayKeyFileStore.sizeOfEachElement);
        assertNull("compressedSingleArrayKeyFileStore.datastore", compressedSingleArrayKeyFileStore.datastore);
        assertEquals("compressedSingleArrayKeyFileStore.filePath", "testCompressedSingleArrayKeyFileStoreFilePath", getPrivateField(compressedSingleArrayKeyFileStore, "filePath"));
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        storeStaticField(AbstractCompressedSingleArrayStore.class, "compressor");
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = (CompressedSingleArrayKeyFileStore) Mockingbird.getProxyObject(CompressedSingleArrayKeyFileStore.class, true);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        setPrivateField(compressedSingleArrayKeyFileStore, "filePath", "");
        setPrivateField(compressedSingleArrayKeyFileStore, "offset", new Long(0L));
        setPrivateField(compressedSingleArrayKeyFileStore, "length", new Integer(0));
        setPrivateField(compressedSingleArrayKeyFileStore, "sizeOfEachElement", new Integer(0));
        setPrivateField(AbstractCompressedSingleArrayStore.class, "compressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes, 1);
        Mockingbird.setReturnValue(compressor.unCompress(bytes), bytes2);
        Mockingbird.enterTestMode(CompressedSingleArrayKeyFileStore.class);
        byte[] result = compressedSingleArrayKeyFileStore.get(0, fileHolder);
        assertEquals("result.length", 0, result.length);
        assertNotNull("compressedSingleArrayKeyFileStoreAbstractCompressedSingleArrayStore.compressor", AbstractCompressedSingleArrayStore.compressor);
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            new CompressedSingleArrayKeyFileStore(100, -1, 100L, "testCompressedSingleArrayKeyFileStoreFilePath", 1000);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCompressedSingleArrayStore.class, ex);
        }
    }
    
    public void testGetBackArrayThrowsIllegalArgumentException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl();
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(100, 1000, 100L, "testCompressedSingleArrayKeyFileStoreFilePath", -1);
        try {
            compressedSingleArrayKeyFileStore.getBackArray(fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
            assertEquals("compressedSingleArrayKeyFileStoreAbstractCompressedSingleArrayStore.compressor", SnappyCompression.SnappyByteCompression.INSTANCE, AbstractCompressedSingleArrayStore.compressor);
        }
    }
    
    public void testGetBackArrayThrowsNullPointerException() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl(100);
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(0, 100, 100L, null, 1000);
        try {
            compressedSingleArrayKeyFileStore.getBackArray(fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertEquals("compressedSingleArrayKeyFileStoreAbstractCompressedSingleArrayStore.compressor", SnappyCompression.SnappyByteCompression.INSTANCE, AbstractCompressedSingleArrayStore.compressor);
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(100, 1000, 100L, "testCompressedSingleArrayKeyFileStoreFilePath", -1);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            compressedSingleArrayKeyFileStore.get(100, fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
            assertEquals("compressedSingleArrayKeyFileStoreAbstractCompressedSingleArrayStore.compressor", SnappyCompression.SnappyByteCompression.INSTANCE, AbstractCompressedSingleArrayStore.compressor);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        CompressedSingleArrayKeyFileStore compressedSingleArrayKeyFileStore = new CompressedSingleArrayKeyFileStore(0, 100, 100L, null, 1000);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            compressedSingleArrayKeyFileStore.get(100, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertEquals("compressedSingleArrayKeyFileStoreAbstractCompressedSingleArrayStore.compressor", SnappyCompression.SnappyByteCompression.INSTANCE, AbstractCompressedSingleArrayStore.compressor);
        }
    }
}

