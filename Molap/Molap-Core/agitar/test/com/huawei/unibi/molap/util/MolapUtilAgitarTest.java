/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:31:33 PM
 * Time to generate: 00:41.956 seconds
 *
 */

package com.huawei.unibi.molap.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Arrays;

public class MolapUtilAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapUtil.class;
    }
    
    public void testConstructor() throws Throwable {
        new MolapUtil();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCheckAndReturnNextFolderNumber() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", new Object[] {"\\", "/"}, "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        int result = MolapUtil.checkAndReturnNextFolderNumber("");
        assertEquals("result", -1, result);
    }
    
    public void testCheckAndReturnNextFolderNumber1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", new Object[] {"\\", "/"}, "/", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        int result = MolapUtil.checkAndReturnNextFolderNumber("");
        assertEquals("result", -1, result);
    }
    
    public void testCheckAndReturnNextFolderNumber2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", new Object[] {"\\", "/"}, null, 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        int result = MolapUtil.checkAndReturnNextFolderNumber("");
        assertEquals("result", -1, result);
    }
    
    public void testCheckAndReturnNextFolderNumber3() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", new Object[] {"\\", "/"}, "A", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        int result = MolapUtil.checkAndReturnNextFolderNumber("");
        assertEquals("result", -1, result);
    }
    
    public void testCheckAndReturnNextRestructFolderNumber() throws Throwable {
        int result = MolapUtil.checkAndReturnNextRestructFolderNumber(".");
        assertEquals("result", -1, result);
    }
    
    public void testCheckAndReturnNextRestructFolderNumber1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", new Object[] {"\\", "/"}, "/", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        int result = MolapUtil.checkAndReturnNextRestructFolderNumber("");
        assertEquals("result", -1, result);
    }
    
    public void testCloseStreams() throws Throwable {
        Closeable[] streams = new Closeable[0];
        MolapUtil.closeStreams(streams);
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCloseStreams1() throws Throwable {
        Closeable[] streams = new Closeable[5];
        streams[4] = new StringReader("testMolapUtilParam1");
        MolapUtil.closeStreams(streams);
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCloseStreams2() throws Throwable {
        Closeable[] streams = new Closeable[2];
        MolapUtil.closeStreams(streams);
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCloseStreams3() throws Throwable {
        Closeable[] streams = new Closeable[2];
        streams[0] = new StringWriter();
        streams[1] = new PrintStream(new ByteArrayOutputStream());
        MolapUtil.closeStreams(streams);
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCopySchemaFile() throws Throwable {
        MolapUtil.copySchemaFile("testMolapUtilSourceFile", "testMolapUtilFileDestination");
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCopySchemaFile1() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapUtil.class, "LOGGER");
        Closeable closeable = (Closeable) Mockingbird.getProxyObject(Closeable.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        setPrivateField(MolapUtil.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", fileOutputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(-1), 1);
        Mockingbird.setException(false, closeable, "close", "()void", iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        fileOutputStream.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapUtil.class);
        MolapUtil.copySchemaFile("", "");
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCopySchemaFile2() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapUtil.class, "LOGGER");
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Closeable closeable = (Closeable) Mockingbird.getProxyObject(Closeable.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        setPrivateField(MolapUtil.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", fileOutputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setException(false, fileOutputStream, "write", "(byte[],int,int)void", fileNotFoundException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setException(false, closeable, "close", "()void", iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        fileOutputStream.close();
        Mockingbird.setExceptionForVoid(iOException);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        MolapUtil.copySchemaFile("", "");
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testCopySchemaFile3() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapUtil.class, "LOGGER");
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Closeable closeable = (Closeable) Mockingbird.getProxyObject(Closeable.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        setPrivateField(MolapUtil.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", fileOutputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "write", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setException(false, fileOutputStream, "write", "(byte[],int,int)void", iOException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setException(false, closeable, "close", "()void", iOException2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        fileOutputStream.close();
        Mockingbird.setExceptionForVoid(iOException2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        MolapUtil.copySchemaFile("", "");
        assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
    }
    
    public void testDeleteFoldersAndFiles() throws Throwable {
        String[] path = new String[0];
        MolapUtil.deleteFoldersAndFiles(path);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDeleteFoldersAndFiles1() throws Throwable {
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        File[] files = new File[0];
        File[] files2 = new File[0];
        strings[0] = "";
        strings[1] = "";
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file, "delete", "()boolean", new Object[] {}, boolean2, 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file2, "listFiles", "()java.io.File[]", new Object[] {}, files2, 1);
        Mockingbird.setReturnValue(false, file2, "delete", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        MolapUtil.deleteFoldersAndFiles(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDeleteRecursive() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(file.isDirectory(), false);
        Mockingbird.setReturnValue(file.delete(), true);
        Mockingbird.enterTestMode(MolapUtil.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapUtil", "deleteRecursive", new Class[] {File.class}, null, new Object[] {file});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDeleteRecursive1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        File[] files = new File[2];
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        files[0] = file2;
        files[1] = file3;
        Mockingbird.setReturnValue(false, file, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "deleteRecursive", "(java.io.File)void", null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "deleteRecursive", "(java.io.File)void", null, 1);
        Mockingbird.setReturnValue(false, file, "delete", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        callPrivateMethod("com.huawei.unibi.molap.util.MolapUtil", "deleteRecursive", new Class[] {File.class}, null, new Object[] {file});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetIncrementedCardinality() throws Throwable {
        int[] dimCardinality = new int[5];
        dimCardinality[1] = 10;
        dimCardinality[2] = 100;
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetIncrementedCardinality1() throws Throwable {
        int[] dimCardinality = new int[7];
        dimCardinality[1] = 100;
        dimCardinality[3] = 10;
        dimCardinality[6] = 101;
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetIncrementedCardinality2() throws Throwable {
        int[] dimCardinality = new int[1];
        dimCardinality[0] = 100;
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 7, result[0]);
    }
    
    public void testGetIncrementedCardinality3() throws Throwable {
        int[] dimCardinality = new int[3];
        dimCardinality[2] = 6;
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetIncrementedCardinality4() throws Throwable {
        int[] dimCardinality = new int[1];
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetIncrementedCardinality5() throws Throwable {
        int[] dimCardinality = new int[0];
        int[] result = MolapUtil.getIncrementedCardinality(dimCardinality);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetSortedFileList() throws Throwable {
        File file = new File("testMolapUtilParam1");
        File file2 = new File(file, "testMolapUtilParam2");
        File[] fileArray = new File[3];
        fileArray[0] = file;
        fileArray[1] = file2;
        fileArray[2] = new File("testMolapUtilParam11");
        File[] result = MolapUtil.getSortedFileList(fileArray);
        assertSame("result", fileArray, result);
        assertSame("fileArray[0]", file, fileArray[0]);
    }
    
    public void testGetSortedFileList1() throws Throwable {
        File[] fileArray = new File[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", null, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        File[] result = MolapUtil.getSortedFileList(fileArray);
        assertSame("result", fileArray, result);
    }
    
    public void testCheckAndReturnNextFolderNumberThrowsNullPointerException() throws Throwable {
        try {
            MolapUtil.checkAndReturnNextFolderNumber(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
        }
    }
    
    public void testCheckAndReturnNextRestructFolderNumberThrowsNullPointerException() throws Throwable {
        try {
            MolapUtil.checkAndReturnNextRestructFolderNumber(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
        }
    }
    
    public void testCloseStreamsThrowsNullPointerException() throws Throwable {
        Closeable[] streams = new Closeable[5];
        streams[0] = new DataInputStream(null);
        try {
            MolapUtil.closeStreams(streams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FilterInputStream.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCloseStreamsThrowsNullPointerException1() throws Throwable {
        try {
            MolapUtil.closeStreams((Closeable[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCloseStreamsThrowsNullPointerException2() throws Throwable {
        Closeable[] streams = new Closeable[4];
        streams[1] = new DataInputStream(null);
        try {
            MolapUtil.closeStreams(streams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FilterInputStream.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCloseStreamsThrowsNullPointerException3() throws Throwable {
        Closeable[] streams = new Closeable[4];
        streams[0] = new BufferedWriter(new StringWriter());
        streams[1] = new DataInputStream(null);
        try {
            MolapUtil.closeStreams(streams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FilterInputStream.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCopySchemaFileThrowsNullPointerException() throws Throwable {
        try {
            MolapUtil.copySchemaFile(null, "testMolapUtilFileDestination");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCopySchemaFileThrowsNullPointerException1() throws Throwable {
        try {
            MolapUtil.copySchemaFile("testMolapUtilSourceFile", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNotNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testCopySchemaFileThrowsThrowable() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(MolapUtil.class, "LOGGER");
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        setPrivateField(MolapUtil.class, "LOGGER", null);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.io.File)", fileNotFoundException);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(MolapUtil.class);
        try {
            MolapUtil.copySchemaFile("", "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
            assertNull("MolapUtil.LOGGER", getPrivateField(MolapUtil.class, "LOGGER"));
        }
    }
    
    public void testDeleteFoldersAndFilesThrowsNullPointerException() throws Throwable {
        try {
            MolapUtil.deleteFoldersAndFiles((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
        }
    }
    
    public void testDeleteRecursiveThrowsMolapUtilException() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(file.isDirectory(), false);
        Mockingbird.setReturnValue(file.delete(), false);
        Mockingbird.enterTestMode(MolapUtil.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapUtil", "deleteRecursive", new Class[] {File.class}, null, new Object[] {file});
            fail("Expected MolapUtilException to be thrown");
        } catch (MolapUtilException ex) {
            assertEquals("ex.getMessage()", "Error while deleteing the folders and files", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
            assertEquals("ex.getMessage()", "Error while deleteing the folders and files", ex.getMessage());
        }
    }
    
    public void testDeleteRecursiveThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.util.MolapUtil", "deleteRecursive", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
        }
    }
    
    public void testGetIncrementedCardinalityThrowsNullPointerException() throws Throwable {
        try {
            MolapUtil.getIncrementedCardinality((int[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapUtil.class, ex);
        }
    }
    
    public void testGetSortedFileListThrowsNullPointerException() throws Throwable {
        File[] fileArray = new File[3];
        try {
            MolapUtil.getSortedFileList(fileArray);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
}

