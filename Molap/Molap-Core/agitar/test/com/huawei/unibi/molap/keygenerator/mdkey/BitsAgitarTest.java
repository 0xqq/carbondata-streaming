/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:26 PM
 * Time to generate: 00:21.525 seconds
 *
 */

package com.huawei.unibi.molap.keygenerator.mdkey;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.iweb.platform.logging.LogService;
import java.util.ArrayList;

public class BitsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Bits.class;
    }
    
    public void testConstructor() throws Throwable {
        int[] lens = new int[3];
        lens[0] = -13;
        lens[1] = -4;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", -17, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", -1, bits.getByteSize());
        assertEquals("bits.wsize", 1, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 3, bits.getDimCount());
    }
    
    public void testConstructor1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 64;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 64, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 9, bits.getByteSize());
        assertEquals("bits.wsize", 2, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 1, bits.getDimCount());
    }
    
    public void testConstructor2() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -100;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", -100, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", -11, bits.getByteSize());
        assertEquals("bits.wsize", 0, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 1, bits.getDimCount());
    }
    
    public void testConstructor3() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 79;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 79, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 10, bits.getByteSize());
        assertEquals("bits.wsize", 2, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 1, bits.getDimCount());
    }
    
    public void testConstructor4() throws Throwable {
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 0, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 0, bits.getByteSize());
        assertEquals("bits.wsize", 0, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 0, bits.getDimCount());
    }
    
    public void testConstructor5() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 8;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 8, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 1, bits.getByteSize());
        assertEquals("bits.wsize", 1, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 1, bits.getDimCount());
    }
    
    public void testConstructor6() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -64;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", -64, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", -8, bits.getByteSize());
        assertEquals("bits.wsize", 0, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 1, bits.getDimCount());
    }
    
    public void testConstructor7() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 58;
        lens[1] = 5;
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 63, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 8, bits.getByteSize());
        assertEquals("bits.wsize", 1, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 2, bits.getDimCount());
    }
    
    public void testConstructor8() throws Throwable {
        int[] lens = new int[2];
        Bits bits = new Bits(lens);
        assertEquals("bits.length", 0, ((Number) getPrivateField(bits, "length")).intValue());
        assertEquals("bits.getByteSize()", 0, bits.getByteSize());
        assertEquals("bits.wsize", 0, ((Number) getPrivateField(bits, "wsize")).intValue());
        assertEquals("bits.getDimCount()", 2, bits.getDimCount());
    }
    
    public void testGet() throws Throwable {
        int[] lens = new int[3];
        lens[1] = 100;
        Bits bits = new Bits(lens);
        long[] keys = new long[3];
        long[] result = bits.get(keys);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGet1() throws Throwable {
        long[] keys = new long[3];
        int[] lens = new int[2];
        lens[0] = 14;
        Bits bits = new Bits(lens);
        long[] result = bits.get(keys);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGet2() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 72;
        Bits bits = new Bits(lens);
        long[] keys = new long[2];
        long[] result = bits.get(keys);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGet3() throws Throwable {
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        long[] keys = new long[1];
        long[] result = bits.get(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGet4() throws Throwable {
        int[] lens = new int[3];
        lens[1] = 100;
        Bits bits = new Bits(lens);
        int[] keys = new int[3];
        long[] result = bits.get(keys);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGet5() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 76;
        lens[1] = 65;
        Bits bits = new Bits(lens);
        int[] keys = new int[2];
        long[] result = bits.get(keys);
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGet6() throws Throwable {
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        int[] keys = new int[2];
        long[] result = bits.get(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGet7() throws Throwable {
        int[] lens = new int[2];
        lens[1] = 36;
        int[] keys = new int[3];
        Bits bits = new Bits(lens);
        long[] result = bits.get(keys);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetArray() throws Throwable {
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        long[] longs = new long[3];
        long[] result = (long[]) callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getArray", new Class[] {long[].class}, bits, new Object[] {longs});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetArray1() throws Throwable {
        int[] lens = new int[2];
        Bits bits = new Bits(lens);
        long[] longs = new long[4];
        long[] result = (long[]) callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getArray", new Class[] {long[].class}, bits, new Object[] {longs});
        assertEquals("result.length", 2, result.length);
        assertEquals("(long[]) result[0]", 0L, ((long[]) result)[0]);
    }
    
    public void testGetArray2() throws Throwable {
        int[] lens = new int[6];
        lens[5] = 64;
        Bits bits = new Bits(lens);
        long[] longs = new long[3];
        long[] result = (long[]) callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getArray", new Class[] {long[].class}, bits, new Object[] {longs});
        assertEquals("result.length", 6, result.length);
        assertEquals("(long[]) result[0]", 0L, ((long[]) result)[0]);
    }
    
    public void testGetByteSize() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 9;
        int result = new Bits(lens).getByteSize();
        assertEquals("result", 2, result);
    }
    
    public void testGetByteSize1() throws Throwable {
        int[] lens = new int[0];
        int result = new Bits(lens).getByteSize();
        assertEquals("result", 0, result);
    }
    
    public void testGetBytes() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 8;
        int[] keys = new int[1];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes1() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 45;
        lens[2] = 6;
        int[] keys = new int[3];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes2() throws Throwable {
        int[] lens = new int[3];
        lens[1] = 54;
        lens[2] = 78;
        int[] keys = new int[4];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 17, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes3() throws Throwable {
        int[] lens = new int[0];
        int[] keys = new int[3];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetBytes4() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 22;
        lens[1] = 54;
        long[] keys = new long[3];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 10, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes5() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 8;
        long[] keys = new long[1];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes6() throws Throwable {
        int[] lens = new int[0];
        long[] keys = new long[3];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetBytes7() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 61;
        long[] keys = new long[3];
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetBytes8() throws Throwable {
        long[] keys = new long[3];
        int[] lens = new int[3];
        lens[1] = -8;
        lens[2] = 62;
        byte[] result = new Bits(lens).getBytes(keys);
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetDimCount() throws Throwable {
        int[] lens = new int[2];
        int result = new Bits(lens).getDimCount();
        assertEquals("result", 2, result);
    }
    
    public void testGetDimCount1() throws Throwable {
        int[] lens = new int[0];
        int result = new Bits(lens).getDimCount();
        assertEquals("result", 0, result);
    }
    
    public void testGetKeyArray() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 8;
        byte[] key = new byte[1];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyArray1() throws Throwable {
        int[] lens = new int[3];
        lens[2] = 62;
        byte[] key = new byte[8];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyArray2() throws Throwable {
        int[] lens = new int[3];
        lens[1] = -8;
        lens[2] = 62;
        byte[] key = new byte[8];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyArray3() throws Throwable {
        int[] lens = new int[4];
        lens[2] = 100;
        byte[] key = new byte[33];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyArray4() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 100;
        byte[] key = new byte[13];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyArray5() throws Throwable {
        int[] lens = new int[0];
        byte[] key = new byte[3];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetKeyArray6() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 3;
        lens[1] = 61;
        byte[] key = new byte[33];
        long[] result = new Bits(lens).getKeyArray(key);
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyByteOffsets() throws Throwable {
        int[] lens = new int[2];
        lens[1] = 17;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets1() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -18;
        lens[1] = 17;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", -1, result[0]);
    }
    
    public void testGetKeyByteOffsets2() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 35;
        lens[1] = -19;
        lens[2] = 57;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 5, result[0]);
    }
    
    public void testGetKeyByteOffsets3() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -4;
        lens[1] = -4;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets4() throws Throwable {
        int[] lens = new int[4];
        lens[1] = 75;
        lens[2] = 68;
        int[] result = new Bits(lens).getKeyByteOffsets(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets5() throws Throwable {
        int[] lens = new int[5];
        lens[0] = -1;
        lens[1] = 61;
        lens[2] = 20;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets6() throws Throwable {
        int[] lens = new int[5];
        lens[0] = -1;
        lens[2] = 20;
        lens[4] = 5;
        int[] result = new Bits(lens).getKeyByteOffsets(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets7() throws Throwable {
        int[] lens = new int[1];
        int[] result = new Bits(lens).getKeyByteOffsets(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets8() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 46;
        lens[1] = -6;
        int[] result = new Bits(lens).getKeyByteOffsets(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsets9() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -20;
        int[] result = new Bits(lens).getKeyByteOffsets(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 3;
        lens[1] = 7;
        lens[2] = 7;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(2);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 1, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld1() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 40;
        lens[1] = 20;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 5, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld2() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 7;
        lens[1] = 9;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld3() throws Throwable {
        int[] lens = new int[5];
        lens[0] = -1;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld4() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 64;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld5() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 8;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld6() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -63;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", -8, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld7() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -8;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld8() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 1;
        lens[1] = 30;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld9() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 3;
        lens[1] = 61;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(2);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 8, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld10() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 31;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 3, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld11() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 7;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld12() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -8;
        lens[1] = 36;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld13() throws Throwable {
        int[] lens = new int[5];
        lens[0] = -1;
        lens[1] = 68;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(1);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeyByteOffsetsOld14() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 45;
        int[] result = new Bits(lens).getKeyByteOffsetsOld(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeySize() throws Throwable {
        int[] lens = new int[3];
        lens[0] = 9;
        int result = new Bits(lens).getKeySize();
        assertEquals("result", 2, result);
    }
    
    public void testGetKeySize1() throws Throwable {
        int[] lens = new int[0];
        int result = new Bits(lens).getKeySize();
        assertEquals("result", 0, result);
    }
    
    public void testGetMasks() throws Throwable {
        int[] lens = new int[0];
        ArrayList result = (ArrayList) new Bits(lens).getMasks();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetMasks1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -20;
        Bits bits = new Bits(lens);
        ArrayList result = (ArrayList) bits.getMasks();
        assertEquals("result.size()", 1, result.size());
        assertTrue("bitsBits.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(Bits.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testGetMasks2() throws Throwable {
        int[] lens = new int[2];
        Bits bits = new Bits(lens);
        ArrayList result = (ArrayList) bits.getMasks();
        assertEquals("result.size()", 2, result.size());
        assertTrue("bitsBits.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(Bits.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testGetMasks3() throws Throwable {
        int[] lens = new int[3];
        lens[1] = 100;
        Bits bits = new Bits(lens);
        ArrayList result = (ArrayList) bits.getMasks();
        assertEquals("result.size()", 3, result.size());
        assertTrue("bitsBits.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(Bits.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testGetTotalLength() throws Throwable {
        int[] lens = new int[3];
        int[] ints = new int[1];
        ints[0] = 1;
        Bits bits = new Bits(lens);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getTotalLength", new Class[] {int[].class}, bits, new Object[] {ints})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testGetTotalLength1() throws Throwable {
        int[] ints = new int[0];
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getTotalLength", new Class[] {int[].class}, bits, new Object[] {ints})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new Bits(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 79;
        Bits bits = new Bits(lens);
        long[] longs = new long[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getArray", new Class[] {long[].class}, bits, new Object[] {longs});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetArrayThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[1];
        Bits bits = new Bits(lens);
        long[] longs = new long[0];
        try {
            callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getArray", new Class[] {long[].class}, bits, new Object[] {longs});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetBytesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -2;
        int[] keys = new int[2];
        try {
            new Bits(lens).getBytes(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetBytesThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -63;
        lens[1] = 9;
        long[] keys = new long[2];
        try {
            new Bits(lens).getBytes(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetBytesThrowsNegativeArraySizeException() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -63;
        long[] keys = new long[2];
        try {
            new Bits(lens).getBytes(keys);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetBytesThrowsNullPointerException() throws Throwable {
        int[] lens = new int[6];
        try {
            new Bits(lens).getBytes((int[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetBytesThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[3];
        try {
            new Bits(lens).getBytes((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        byte[] key = new byte[0];
        int[] lens = new int[2];
        lens[0] = -63;
        lens[1] = 9;
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[3];
        lens[1] = -6;
        byte[] key = new byte[4];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[3];
        lens[1] = -8;
        lens[2] = 62;
        byte[] key = new byte[1];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        int[] lens = new int[2];
        lens[1] = -17;
        byte[] key = new byte[6];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        int[] lens = new int[3];
        lens[2] = 65;
        byte[] key = new byte[3];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        int[] lens = new int[1];
        byte[] key = new byte[1];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 62;
        lens[1] = -17;
        byte[] key = new byte[6];
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsNegativeArraySizeException() throws Throwable {
        byte[] key = new byte[0];
        int[] lens = new int[2];
        lens[0] = -63;
        try {
            new Bits(lens).getKeyArray(key);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsNullPointerException() throws Throwable {
        int[] lens = new int[3];
        lens[1] = -8;
        lens[2] = 62;
        try {
            new Bits(lens).getKeyArray((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 61;
        try {
            new Bits(lens).getKeyArray((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsOldThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[3];
        try {
            new Bits(lens).getKeyByteOffsetsOld(-1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsOldThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[2];
        try {
            new Bits(lens).getKeyByteOffsetsOld(2);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsOldThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[0];
        try {
            new Bits(lens).getKeyByteOffsetsOld(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsOldThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        int[] lens = new int[4];
        try {
            new Bits(lens).getKeyByteOffsetsOld(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "4", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        try {
            new Bits(lens).getKeyByteOffsets(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 35;
        lens[1] = -19;
        lens[2] = 57;
        try {
            new Bits(lens).getKeyByteOffsets(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "4", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[4];
        lens[0] = 35;
        lens[1] = -19;
        lens[2] = 57;
        try {
            new Bits(lens).getKeyByteOffsets(-1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        int[] lens = new int[1];
        try {
            new Bits(lens).getKeyByteOffsets(1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        int[] lens = new int[0];
        try {
            new Bits(lens).getKeyByteOffsets(0);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        int[] lens = new int[1];
        try {
            new Bits(lens).getKeyByteOffsets(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 19;
        try {
            new Bits(lens).getKeyByteOffsets(1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] keys = new long[2];
        int[] lens = new int[2];
        lens[0] = -14;
        Bits bits = new Bits(lens);
        try {
            bits.get(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[2];
        lens[1] = -17;
        Bits bits = new Bits(lens);
        long[] keys = new long[4];
        try {
            bits.get(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 10;
        Bits bits = new Bits(lens);
        int[] keys = new int[4];
        int[] lens2 = new int[1];
        Bits bits2 = new Bits(lens2);
        try {
            bits2.get(bits.get(keys));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        int[] lens = new int[2];
        lens[0] = -16;
        int[] keys = new int[3];
        Bits bits = new Bits(lens);
        try {
            bits.get(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -11;
        Bits bits = new Bits(lens);
        int[] keys = new int[3];
        try {
            bits.get(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        int[] lens = new int[1];
        Bits bits = new Bits(lens);
        int[] keys = new int[3];
        try {
            bits.get(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        int[] lens = new int[2];
        Bits bits = new Bits(lens);
        try {
            bits.get((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[1];
        Bits bits = new Bits(lens);
        try {
            bits.get((int[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetTotalLengthThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        Bits bits = new Bits(lens);
        try {
            callPrivateMethod("com.huawei.unibi.molap.keygenerator.mdkey.Bits", "getTotalLength", new Class[] {int[].class}, bits, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
}

