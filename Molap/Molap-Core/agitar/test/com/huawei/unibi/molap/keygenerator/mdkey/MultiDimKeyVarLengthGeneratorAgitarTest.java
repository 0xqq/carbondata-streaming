/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:31:49 PM
 * Time to generate: 00:18.961 seconds
 *
 */

package com.huawei.unibi.molap.keygenerator.mdkey;

import com.agitar.lib.junit.AgitarTestCase;

public class MultiDimKeyVarLengthGeneratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MultiDimKeyVarLengthGenerator.class;
    }
    
    public void testConstructor() throws Throwable {
        int[] lens = new int[1];
        MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator = new MultiDimKeyVarLengthGenerator(lens);
        assertEquals("multiDimKeyVarLengthGenerator.getDimCount()", 1, multiDimKeyVarLengthGenerator.getDimCount());
        int actual = ((int[][]) getPrivateField(multiDimKeyVarLengthGenerator, "byteRangesForKeys")).length;
        assertEquals("multiDimKeyVarLengthGenerator.byteRangesForKeys.length", 1, actual);
    }
    
    public void testConstructor1() throws Throwable {
        int[] lens = new int[0];
        MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator = new MultiDimKeyVarLengthGenerator(lens);
        assertEquals("multiDimKeyVarLengthGenerator.getDimCount()", 0, multiDimKeyVarLengthGenerator.getDimCount());
        int actual = ((int[][]) getPrivateField(multiDimKeyVarLengthGenerator, "byteRangesForKeys")).length;
        assertEquals("multiDimKeyVarLengthGenerator.byteRangesForKeys.length", 0, actual);
    }
    
    public void testGenerateKey() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 100;
        int[] keys = new int[3];
        byte[] result = new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
        assertEquals("result.length", 13, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGenerateKey1() throws Throwable {
        int[] lens = new int[0];
        int[] keys = new int[1];
        byte[] result = new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGenerateKey2() throws Throwable {
        int[] lens = new int[0];
        long[] keys = new long[2];
        byte[] result = new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGenerateKey3() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 63;
        long[] keys = new long[1];
        byte[] result = new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetDimCount() throws Throwable {
        int[] lens = new int[1];
        int result = new MultiDimKeyVarLengthGenerator(lens).getDimCount();
        assertEquals("result", 1, result);
    }
    
    public void testGetDimCount1() throws Throwable {
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).getDimCount();
        assertEquals("result", 0, result);
    }
    
    public void testGetKey() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 2;
        byte[] key = new byte[4];
        long result = new MultiDimKeyVarLengthGenerator(lens).getKey(key, 0);
        assertEquals("result", 0L, result);
    }
    
    public void testGetKey1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 2;
        byte[] key = new byte[4];
        key[0] = (byte)1;
        long result = new MultiDimKeyVarLengthGenerator(lens).getKey(key, 0);
        assertEquals("result", 1L, result);
    }
    
    public void testGetKeyArray() throws Throwable {
        int[] lens = new int[0];
        byte[] key = new byte[0];
        long[] result = new MultiDimKeyVarLengthGenerator(lens).getKeyArray(key);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetKeyArray1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 2;
        byte[] key = new byte[4];
        long[] result = new MultiDimKeyVarLengthGenerator(lens).getKeyArray(key);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetKeyByteOffsets() throws Throwable {
        int[] lens = new int[1];
        int[] result = new MultiDimKeyVarLengthGenerator(lens).getKeyByteOffsets(0);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 0, result[0]);
    }
    
    public void testGetKeySizeInBytes() throws Throwable {
        int[] lens = new int[0];
        int result = new MultiDimKeyVarLengthGenerator(lens).getKeySizeInBytes();
        assertEquals("result", 0, result);
    }
    
    public void testGetKeySizeInBytes1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = -8;
        int result = new MultiDimKeyVarLengthGenerator(lens).getKeySizeInBytes();
        assertEquals("result", -1, result);
    }
    
    public void testGetSubKeyArray() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 101;
        int[] lens2 = new int[1];
        long[] keys = new long[1];
        long[] result = new MultiDimKeyVarLengthGenerator(lens2).getSubKeyArray(new MultiDimKeyVarLengthGenerator(lens).generateKey(keys), 1, 0);
        assertNull("result", result);
    }
    
    public void testGetSubKeyArray1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 3;
        byte[] key = new byte[2];
        long[] result = new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, 0, 1);
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testGetSubKeyArray2() throws Throwable {
        int[] lens = new int[0];
        byte[] key = new byte[1];
        long[] result = new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, -1, 100);
        assertNull("result", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new MultiDimKeyVarLengthGenerator(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGenerateKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[1];
        int[] keys = new int[3];
        try {
            new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGenerateKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[1];
        long[] keys = new long[0];
        try {
            new MultiDimKeyVarLengthGenerator(lens).generateKey(keys);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGenerateKeyThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        try {
            new MultiDimKeyVarLengthGenerator(lens).generateKey((int[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGenerateKeyThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[1];
        try {
            new MultiDimKeyVarLengthGenerator(lens).generateKey((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[1];
        byte[] key = new byte[6];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getKeyArray(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyArrayThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 101;
        try {
            new MultiDimKeyVarLengthGenerator(lens).getKeyArray((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetKeyByteOffsetsThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getKeyByteOffsets(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(MultiDimKeyVarLengthGenerator.class, ex);
        }
    }
    
    public void testGetKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[1];
        byte[] key = new byte[4];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getKey(key, 100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetSubKeyArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[1];
        byte[] key = new byte[2];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, 1, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetSubKeyArrayThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 3;
        byte[] key = new byte[2];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, 1, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MultiDimKeyVarLengthGenerator.class, ex);
        }
    }
    
    public void testGetSubKeyArrayThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 2;
        byte[] key = new byte[1];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, 0, 100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MultiDimKeyVarLengthGenerator.class, ex);
        }
    }
    
    public void testGetSubKeyArrayThrowsNegativeArraySizeException() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 1;
        byte[] key = new byte[5];
        try {
            new MultiDimKeyVarLengthGenerator(lens).getSubKeyArray(key, 0, -1);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MultiDimKeyVarLengthGenerator.class, ex);
        }
    }
}

