/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:34:32 PM
 * Time to generate: 00:22.525 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.compression.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.compression.Compressor;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.util.MolapCoreLogEvent;
import java.nio.ByteBuffer;

public class UnCompressNonDecimalLongAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return UnCompressNonDecimalLong.class;
    }
    
    public void testConstructor() throws Throwable {
        new UnCompressNonDecimalLong();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCompressWithAggressiveMocks() throws Throwable {
        storeStaticField(UnCompressNonDecimalLong.class, "longCompressor");
        UnCompressNonDecimalLong unCompressNonDecimalLong = (UnCompressNonDecimalLong) Mockingbird.getProxyObject(UnCompressNonDecimalLong.class, true);
        long[] longs = new long[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(UnCompressNonDecimalByte.class, "<init>()", new UnCompressNonDecimalByte());
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes = new byte[0];
        Mockingbird.enterNormalMode();
        unCompressNonDecimalLong.setValue(longs);
        setPrivateField(UnCompressNonDecimalLong.class, "longCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.compress(longs), bytes);
        Mockingbird.enterTestMode(UnCompressNonDecimalLong.class);
        ValueCompressonHolder.UnCompressValue result = unCompressNonDecimalLong.compress();
        assertEquals("result.getBackArrayData().length", 0, result.getBackArrayData().length);
        assertNotNull("unCompressNonDecimalLongUnCompressNonDecimalLong.longCompressor", getPrivateField(UnCompressNonDecimalLong.class, "longCompressor"));
    }
    
    public void testGetBackArrayData() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        byte[] value = new byte[0];
        unCompressNonDecimalLong.setValueInBytes(value);
        byte[] result = unCompressNonDecimalLong.getBackArrayData();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetBackArrayData1() throws Throwable {
        long[] value = new long[7];
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        unCompressNonDecimalLong.setValue(value);
        byte[] result = unCompressNonDecimalLong.getBackArrayData();
        assertEquals("result.length", 56, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testGetCompressorObject() throws Throwable {
        UnCompressNonDecimalByte result = (UnCompressNonDecimalByte) new UnCompressNonDecimalLong().getCompressorObject();
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testGetNew() throws Throwable {
        UnCompressNonDecimalLong result = (UnCompressNonDecimalLong) new UnCompressNonDecimalLong().getNew();
        assertNotNull("result", result);
    }
    
    public void testGetNewWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(UnCompressNonDecimalLong.class, "LOGGER");
        UnCompressNonDecimalLong unCompressNonDecimalLong = (UnCompressNonDecimalLong) Mockingbird.getProxyObject(UnCompressNonDecimalLong.class, true);
        CloneNotSupportedException cloneNotSupportedException = (CloneNotSupportedException) Mockingbird.getProxyObject(CloneNotSupportedException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, unCompressNonDecimalLong, "clone", "()java.lang.Object", new Object[] {}, cloneNotSupportedException, 1);
        setPrivateField(UnCompressNonDecimalLong.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, cloneNotSupportedException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(UnCompressNonDecimalLong.class);
        ValueCompressonHolder.UnCompressValue result = unCompressNonDecimalLong.getNew();
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        long[] value = new long[2];
        unCompressNonDecimalLong.setValue(value);
        double result = unCompressNonDecimalLong.getValue(0, 100, 100.0);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetValue1() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        long[] value = new long[3];
        value[0] = -1L;
        unCompressNonDecimalLong.setValue(value);
        double result = unCompressNonDecimalLong.getValue(0, -1, 100.0);
        assertEquals("result", -10.0, result, 1.0E-6);
    }
    
    public void testSetValue() throws Throwable {
        long[] value = new long[3];
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        unCompressNonDecimalLong.setValue(value);
        assertEquals("unCompressNonDecimalLong.getBackArrayData().length", 24, unCompressNonDecimalLong.getBackArrayData().length);
    }
    
    public void testSetValueInBytes() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        byte[] value = new byte[2];
        unCompressNonDecimalLong.setValueInBytes(value);
        assertEquals("unCompressNonDecimalLong.getBackArrayData().length", 0, unCompressNonDecimalLong.getBackArrayData().length);
    }
    
    public void testUncompress() throws Throwable {
        ValueCompressonHolder.UnCompressValue result = new UnCompressNonDecimalLong().uncompress(ValueCompressionUtil.DataType.DATA_INT);
        assertNull("result", result);
    }
    
    public void testGetBackArrayDataThrowsNullPointerException() throws Throwable {
        try {
            new UnCompressNonDecimalLong().getBackArrayData();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueThrowsArrayIndexOutOfBoundsException() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        long[] value = new long[0];
        unCompressNonDecimalLong.setValue(value);
        try {
            unCompressNonDecimalLong.getValue(100, 1000, 100.0);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(UnCompressNonDecimalLong.class, ex);
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        unCompressNonDecimalLong.setValue((long[]) null);
        try {
            unCompressNonDecimalLong.getValue(100, 1000, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(UnCompressNonDecimalLong.class, ex);
        }
    }
    
    public void testSetValueInBytesThrowsNullPointerException() throws Throwable {
        UnCompressNonDecimalLong unCompressNonDecimalLong = new UnCompressNonDecimalLong();
        try {
            unCompressNonDecimalLong.setValueInBytes((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
            assertNull("unCompressNonDecimalLong.value", getPrivateField(unCompressNonDecimalLong, "value"));
        }
    }
}

