/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:29:49 PM
 * Time to generate: 00:20.728 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.impl.data.uncompressed;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneByte;
import com.huawei.unibi.molap.datastorage.store.impl.CompressedDataMeasureDataWrapper;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import java.nio.ByteBuffer;

public class DoubleArrayDataFileStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DoubleArrayDataFileStore.class;
    }
    
    public void testConstructor() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[0];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        long[] measuresOffsetsArray = new long[0];
        int[] measuresLengthArray = new int[0];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        assertSame("doubleArrayDataFileStore.measuresOffsetsArray", measuresOffsetsArray, getPrivateField(doubleArrayDataFileStore, "measuresOffsetsArray"));
        assertSame("doubleArrayDataFileStore.compressionModel", compressionModel, doubleArrayDataFileStore.compressionModel);
        assertSame("doubleArrayDataFileStore.measuresLengthArray", measuresLengthArray, getPrivateField(doubleArrayDataFileStore, "measuresLengthArray"));
        assertNull("doubleArrayDataFileStore.datastore", doubleArrayDataFileStore.datastore);
        assertEquals("doubleArrayDataFileStore.values.length", 0, doubleArrayDataFileStore.values.length);
        assertEquals("doubleArrayDataFileStore.fileName", "testDoubleArrayDataFileStoreFileName", getPrivateField(doubleArrayDataFileStore, "fileName"));
        assertEquals("doubleArrayDataFileStore.size", 100, doubleArrayDataFileStore.size);
        assertEquals("doubleArrayDataFileStore.elementSize", 1000, ((Number) getPrivateField(doubleArrayDataFileStore, "elementSize")).intValue());
    }
    
    public void testConstructor1() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[0];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel);
        assertSame("doubleArrayDataFileStore.compressionModel", compressionModel, doubleArrayDataFileStore.compressionModel);
        assertEquals("doubleArrayDataFileStore.datastore.length", 1000, doubleArrayDataFileStore.datastore.length);
        assertEquals("doubleArrayDataFileStore.values.length", 0, doubleArrayDataFileStore.values.length);
        assertEquals("doubleArrayDataFileStore.size", 100, doubleArrayDataFileStore.size);
        assertEquals("doubleArrayDataFileStore.elementSize", 1000, ((Number) getPrivateField(doubleArrayDataFileStore, "elementSize")).intValue());
    }
    
    public void testGetBackData() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[3];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[1];
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) doubleArrayDataFileStore.getBackData(cols, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testGetBackData1() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[0];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[3];
        unCompressValues[0] = new UnCompressMaxMinInt();
        unCompressValues[1] = new UnCompressNoneByte();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[2];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) doubleArrayDataFileStore.getBackData((int[]) null, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testGetBackData2() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[3];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[0];
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) doubleArrayDataFileStore.getBackData(cols, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testGetBackData3() throws Throwable {
        double[] doubles = new double[2];
        int[] ints = new int[1];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {null, doubles, ints, new Integer(0)});
        int[] measuresLengthArray = new int[0];
        long[] measuresOffsetsArray = new long[0];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) doubleArrayDataFileStore.getBackData((int[]) null, new FileHolderImpl());
        assertNotNull("result", result);
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[0];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[2];
        try {
            new DoubleArrayDataFileStore(100, -1, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException1() throws Throwable {
        try {
            new DoubleArrayDataFileStore(100, -1, new ValueCompressionModel());
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[3];
        try {
            new DoubleArrayDataFileStore(100, 1000, new ValueCompressionModel(), measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new DoubleArrayDataFileStore(100, 1000, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[0];
        int[] measuresLengthArray = new int[0];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[4];
        FileHolder fileHolder = new FileHolderImpl();
        try {
            doubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        FileHolder fileHolder = new FileHolderImpl();
        int[] measuresLengthArray = new int[3];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[4];
        cols[2] = 76;
        try {
            doubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "76", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[0];
        int[] measuresLengthArray = new int[3];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[2];
        FileHolder fileHolder = new FileHolderImpl(100);
        try {
            doubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[0];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[0];
        compressionModel.setUnCompressValues(unCompressValues);
        int[] measuresLengthArray = new int[2];
        long[] measuresOffsetsArray = new long[0];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        FileHolder fileHolder = new FileHolderImpl();
        try {
            doubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsIllegalArgumentException() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressNonDecimalInt();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[1];
        int[] measuresLengthArray = new int[1];
        measuresLengthArray[0] = -18;
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        int[] cols = new int[4];
        FileHolder fileHolder = new FileHolderImpl();
        try {
            doubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testGetBackDataThrowsIllegalArgumentException1() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        FileHolder fileHolder = new FileHolderImpl();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[2];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinShort();
        unCompressValues[1] = new UnCompressNonDecimalDefault();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        int[] measuresLengthArray = new int[4];
        measuresLengthArray[1] = -17;
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        try {
            doubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ByteBuffer.class, ex);
        }
    }
    
    public void testGetBackDataThrowsNullPointerException() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        unCompressValues[0] = new UnCompressMaxMinShort();
        compressionModel.setUnCompressValues(unCompressValues);
        int[] measuresLengthArray = new int[1];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, null, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        FileHolder fileHolder = new FileHolderImpl(100);
        try {
            doubleArrayDataFileStore.getBackData((int[]) null, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsNullPointerException1() throws Throwable {
        ValueCompressionModel compressionModel = new ValueCompressionModel();
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[1];
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[2];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", null);
        int[] cols = new int[1];
        FileHolder fileHolder = new FileHolderImpl();
        try {
            doubleArrayDataFileStore.getBackData(cols, fileHolder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
    
    public void testGetBackDataThrowsNullPointerException2() throws Throwable {
        double[] doubles = new double[2];
        int[] ints = new int[1];
        ValueCompressionModel compressionModel = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {null, doubles, ints, new Integer(0)});
        ValueCompressonHolder.UnCompressValue[] unCompressValues = new ValueCompressonHolder.UnCompressValue[3];
        unCompressValues[0] = new UnCompressNonDecimalMaxMinLong();
        compressionModel.setUnCompressValues(unCompressValues);
        long[] measuresOffsetsArray = new long[3];
        int[] measuresLengthArray = new int[2];
        DoubleArrayDataFileStore doubleArrayDataFileStore = new DoubleArrayDataFileStore(100, 1000, compressionModel, measuresOffsetsArray, "testDoubleArrayDataFileStoreFileName", measuresLengthArray);
        try {
            doubleArrayDataFileStore.getBackData((int[]) null, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DoubleArrayDataFileStore.class, ex);
        }
    }
}

