/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:30:38 PM
 * Time to generate: 00:14.647 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;

public class KeyStoreVOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return KeyStoreVO.class;
    }
    
    public void testConstructor() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        assertNull("keyStoreVO.getFileName()", keyStoreVO.getFileName());
    }
    
    public void testSetFileHolder() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        FileHolder fileHolder = new FileHolderImpl();
        keyStoreVO.setFileHolder(fileHolder);
        assertSame("keyStoreVO.getFileHolder()", fileHolder, keyStoreVO.getFileHolder());
    }
    
    public void testSetFileName() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setFileName("testKeyStoreVOFileName");
        assertEquals("keyStoreVO.getFileName()", "testKeyStoreVOFileName", keyStoreVO.getFileName());
    }
    
    public void testSetFileStore() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setFileStore(true);
        assertTrue("keyStoreVO.isFileStore()", keyStoreVO.isFileStore());
    }
    
    public void testSetLeaf() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setLeaf(true);
        assertTrue("keyStoreVO.isLeaf()", keyStoreVO.isLeaf());
    }
    
    public void testSetLength() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setLength(100);
        assertEquals("keyStoreVO.getLength()", 100, keyStoreVO.getLength());
    }
    
    public void testSetOffset() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setOffset(100L);
        assertEquals("keyStoreVO.getOffset()", 100L, keyStoreVO.getOffset());
    }
    
    public void testSetSizeOfEachElement() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setSizeOfEachElement(100);
        assertEquals("keyStoreVO.getSizeOfEachElement()", 100, keyStoreVO.getSizeOfEachElement());
    }
    
    public void testSetTotalSize() throws Throwable {
        KeyStoreVO keyStoreVO = new KeyStoreVO();
        keyStoreVO.setTotalSize(100);
        assertEquals("keyStoreVO.getTotalSize()", 100, keyStoreVO.getTotalSize());
    }
}

