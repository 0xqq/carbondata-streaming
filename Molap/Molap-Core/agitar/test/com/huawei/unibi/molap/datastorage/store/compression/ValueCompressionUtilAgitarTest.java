/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:36:52 PM
 * Time to generate: 01:11.375 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.compression;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinByte;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinFloat;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressMaxMinShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalByte;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalFloat;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinByte;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinFloat;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalMaxMinShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNonDecimalShort;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneByte;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneDefault;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneFloat;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneInt;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneLong;
import com.huawei.unibi.molap.datastorage.store.compression.type.UnCompressNoneShort;
import java.io.Closeable;
import java.io.FileInputStream;
import java.io.FilePermission;
import java.io.StringWriter;
import java.nio.Buffer;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class ValueCompressionUtilAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ValueCompressionUtil.class;
    }
    
    public void testCompressionFinderConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "<init>", new Class[] {ValueCompressionUtil.COMPRESSION_TYPE.class, ValueCompressionUtil.DataType.class, ValueCompressionUtil.DataType.class}, null, new Object[] {ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC, ValueCompressionUtil.DataType.DATA_DOUBLE, ValueCompressionUtil.DataType.DATA_LONG});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCompressionFinderConstructor1() throws Throwable {
        Enum privateField = (Enum) getPrivateField(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"), "MAXNONDECIMAL");
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "<init>", new Class[] {ValueCompressionUtil.DataType.class, ValueCompressionUtil.DataType.class, Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"), ValueCompressionUtil.COMPRESSION_TYPE.class}, null, new Object[] {ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_INT, privateField, ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructor() throws Throwable {
        new ValueCompressionUtil();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCOMPRESSION_TYPEValueOf() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE result = ValueCompressionUtil.COMPRESSION_TYPE.valueOf("MAX_MIN");
        assertEquals("result", ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN, result);
    }
    
    public void testCOMPRESSION_TYPEValues() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] result = ValueCompressionUtil.COMPRESSION_TYPE.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", ValueCompressionUtil.COMPRESSION_TYPE.NONE, result[0]);
    }
    
    public void testCloseable() throws Throwable {
        Closeable stringWriter = new StringWriter();
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "closeable", new Class[] {Closeable.class}, null, new Object[] {stringWriter});
        assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
        assertEquals("(StringWriter) stringWriter.toString()", "", ((StringWriter) stringWriter).toString());
    }
    
    public void testCloseable1() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "closeable", new Class[] {Closeable.class}, null, new Object[] {null});
        assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
    }
    
    public void testCompressMaxMin() throws Throwable {
        double[] value = new double[2];
        long[] result = (long[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_LONG, value, 100.0);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testCompressMaxMin1() throws Throwable {
        double[] value = new double[0];
        double[] result = (double[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressMaxMin2() throws Throwable {
        double[] value = new double[0];
        int[] result = (int[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_INT, value, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressMaxMin3() throws Throwable {
        double[] value = new double[1];
        double[] result = (double[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressMaxMin4() throws Throwable {
        double[] value = new double[1];
        float[] result = (float[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressMaxMin5() throws Throwable {
        double[] value = new double[0];
        long[] result = (long[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_LONG, value, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressMaxMin6() throws Throwable {
        double[] value = new double[0];
        float[] result = (float[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressMaxMin7() throws Throwable {
        double[] value = new double[0];
        byte[] result = (byte[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, value, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressMaxMin8() throws Throwable {
        double[] value = new double[3];
        short[] result = (short[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, value, 100.0);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testCompressMaxMin9() throws Throwable {
        double[] value = new double[1];
        int[] result = (int[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_INT, value, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressMaxMin10() throws Throwable {
        double[] value = new double[3];
        byte[] result = (byte[]) ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, value, 100.0);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testCompressNonDecimal() throws Throwable {
        double[] value = new double[0];
        double[] result = (double[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimal1() throws Throwable {
        double[] value = new double[0];
        short[] result = (short[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_SHORT, value, 100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimal2() throws Throwable {
        double[] value = new double[0];
        long[] result = (long[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_LONG, value, 100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimal3() throws Throwable {
        double[] value = new double[4];
        byte[] result = (byte[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_BYTE, value, 100);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testCompressNonDecimal4() throws Throwable {
        double[] value = new double[3];
        double[] result = (double[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testCompressNonDecimal5() throws Throwable {
        double[] value = new double[0];
        float[] result = (float[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimal6() throws Throwable {
        double[] value = new double[3];
        int[] result = (int[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_INT, value, 100);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testCompressNonDecimal7() throws Throwable {
        double[] value = new double[1];
        short[] result = (short[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_SHORT, value, 100);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNonDecimal8() throws Throwable {
        double[] value = new double[1];
        float[] result = (float[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNonDecimal9() throws Throwable {
        double[] value = new double[1];
        long[] result = (long[]) ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_LONG, value, 100);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNonDecimalMaxMin() throws Throwable {
        double[] value = new double[2];
        double[] result = (double[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100, 100.0);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testCompressNonDecimalMaxMin1() throws Throwable {
        double[] value = new double[0];
        long[] result = (long[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_LONG, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin2() throws Throwable {
        double[] value = new double[0];
        byte[] result = (byte[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin3() throws Throwable {
        double[] value = new double[4];
        short[] result = (short[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, value, 100, 100.0);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testCompressNonDecimalMaxMin4() throws Throwable {
        double[] value = new double[7];
        float[] result = (float[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100, 100.0);
        assertEquals("result.length", 7, result.length);
    }
    
    public void testCompressNonDecimalMaxMin5() throws Throwable {
        double[] value = new double[0];
        int[] result = (int[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_INT, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin6() throws Throwable {
        double[] value = new double[0];
        float[] result = (float[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin7() throws Throwable {
        double[] value = new double[0];
        short[] result = (short[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin8() throws Throwable {
        double[] value = new double[0];
        double[] result = (double[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, value, 100, 100.0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNonDecimalMaxMin9() throws Throwable {
        double[] value = new double[1];
        byte[] result = (byte[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, value, 100, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNonDecimalMaxMin10() throws Throwable {
        double[] value = new double[1];
        long[] result = (long[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_LONG, value, 100, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNonDecimalMaxMin11() throws Throwable {
        double[] value = new double[1];
        int[] result = (int[]) ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_INT, value, 100, 100.0);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNone() throws Throwable {
        double[] value = new double[0];
        long[] result = (long[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_LONG, value);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNone1() throws Throwable {
        double[] value = new double[2];
        int[] result = (int[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_INT, value);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testCompressNone2() throws Throwable {
        double[] value = new double[1];
        short[] result = (short[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_SHORT, value);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNone3() throws Throwable {
        double[] value = new double[0];
        float[] result = (float[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_FLOAT, value);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNone4() throws Throwable {
        double[] value = new double[4];
        float[] result = (float[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_FLOAT, value);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testCompressNone5() throws Throwable {
        double[] value = new double[0];
        short[] result = (short[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_SHORT, value);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNone6() throws Throwable {
        double[] value = new double[0];
        byte[] result = (byte[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_BYTE, value);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCompressNone7() throws Throwable {
        double[] value = new double[1];
        double[] result = (double[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_DOUBLE, value);
        assertSame("result", value, result);
    }
    
    public void testCompressNone8() throws Throwable {
        double[] value = new double[1];
        long[] result = (long[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_LONG, value);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testCompressNone9() throws Throwable {
        Object result = ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_DOUBLE, (double[]) null);
        assertNull("result", result);
    }
    
    public void testCompressNone10() throws Throwable {
        double[] value = new double[4];
        byte[] result = (byte[]) ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_BYTE, value);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testCompressionFinderCompareTo() throws Throwable {
        Comparable compressionType = ValueCompressionUtil.getCompressionType(100.0, 1000.0, 100);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, compressionType, new Object[] {compressionType})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCompressionFinderCompareToWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum2 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum3 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        setPrivateField(comparable, "size", new Integer(0));
        setPrivateField(comparable, "priority", enum2);
        setPrivateField(comparable2, "size", new Integer(0));
        setPrivateField(comparable2, "priority", enum3);
        setPrivateField(enum2, "priority", new Integer(0));
        setPrivateField(enum3, "priority", new Integer(1));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testCompressionFinderCompareToWithAggressiveMocks1() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        setPrivateField(comparable, "size", new Integer(0));
        setPrivateField(comparable2, "size", new Integer(1));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testCompressionFinderCompareToWithAggressiveMocks2() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        setPrivateField(comparable, "size", new Integer(1));
        setPrivateField(comparable2, "size", new Integer(0));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCompressionFinderCompareToWithAggressiveMocks3() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum2 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum3 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        setPrivateField(comparable, "size", new Integer(0));
        setPrivateField(comparable, "priority", enum2);
        setPrivateField(comparable2, "size", new Integer(0));
        setPrivateField(comparable2, "priority", enum3);
        setPrivateField(enum2, "priority", new Integer(1));
        setPrivateField(enum3, "priority", new Integer(0));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCompressionFinderCompareToWithAggressiveMocks4() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum2 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum3 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        setPrivateField(comparable, "size", new Integer(0));
        setPrivateField(comparable, "priority", enum2);
        setPrivateField(comparable2, "size", new Integer(0));
        setPrivateField(comparable2, "priority", enum3);
        setPrivateField(enum2, "priority", new Integer(0));
        setPrivateField(enum3, "priority", new Integer(0));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCompressionFinderEquals() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "equals", new Class[] {Object.class}, (Comparable) ValueCompressionUtil.getCompressionType(100.0, 1000.0, 100), new Object[] {" > "})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testCompressionFinderEquals1() throws Throwable {
        Comparable compressionType = ValueCompressionUtil.getCompressionType(100.0, 1000.0, 0);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "equals", new Class[] {Object.class}, compressionType, new Object[] {(Comparable) ValueCompressionUtil.getCompressionType(1000.0, 0.0, 0)})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testCompressionFinderEqualsWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        setPrivateField(comparable, "size", new Integer(1));
        setPrivateField(comparable2, "size", new Integer(0));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "equals", new Class[] {Object.class}, comparable, new Object[] {comparable2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testCompressionFinderEqualsWithAggressiveMocks1() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum2 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum3 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        setPrivateField(comparable, "size", new Integer(0));
        setPrivateField(comparable, "priority", enum2);
        setPrivateField(comparable2, "size", new Integer(0));
        setPrivateField(comparable2, "priority", enum3);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "equals", new Class[] {Object.class}, comparable, new Object[] {comparable2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testCompressionFinderHashCode() throws Throwable {
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "hashCode", new Class[] {}, (Comparable) ValueCompressionUtil.getCompressionType(100.0, 1000.0, 0), new Object[] {})).intValue();
        assertEquals("result", 961, result);
    }
    
    public void testCompressionFinderHashCodeWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"), true);
        Enum enum2 = (Enum) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"));
        setPrivateField(comparable, "size", new Integer(-8));
        setPrivateField(comparable, "priority", enum2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, enum2, "hashCode", "()int", new Object[] {}, new Integer(156), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "hashCode", new Class[] {}, comparable, new Object[] {})).intValue();
        assertEquals("result", 869, result);
    }
    
    public void testConvertToBytes() throws Throwable {
        int[] values = new int[1];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConvertToBytes1() throws Throwable {
        int[] values = new int[0];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToBytes2() throws Throwable {
        long[] values = new long[0];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToBytes3() throws Throwable {
        long[] values = new long[1];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConvertToBytes4() throws Throwable {
        float[] values = new float[0];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToBytes5() throws Throwable {
        float[] values = new float[1];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConvertToBytes6() throws Throwable {
        double[] values = new double[0];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToBytes7() throws Throwable {
        double[] values = new double[1];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConvertToBytes8() throws Throwable {
        short[] values = new short[1];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
    }
    
    public void testConvertToBytes9() throws Throwable {
        short[] values = new short[0];
        byte[] result = ValueCompressionUtil.convertToBytes(values);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToDoubleArray() throws Throwable {
        double[] result = ValueCompressionUtil.convertToDoubleArray(ByteBuffer.allocateDirect(100), 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToDoubleArray1() throws Throwable {
        double[] result = ValueCompressionUtil.convertToDoubleArray(ByteBuffer.allocate(100), 100);
        assertEquals("result.length", 12, result.length);
        assertEquals("result[0]", 0.0, result[0], 1.0E-6);
    }
    
    public void testConvertToFloatArray() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(100);
        buffer.mark();
        float[] result = ValueCompressionUtil.convertToFloatArray(buffer, 100);
        assertEquals("result.length", 25, result.length);
        assertEquals("result[0]", 0.0F, result[0], 1.0E-6F);
    }
    
    public void testConvertToFloatArray1() throws Throwable {
        float[] result = ValueCompressionUtil.convertToFloatArray(ByteBuffer.allocateDirect(100), 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToIntArray() throws Throwable {
        ByteBuffer buffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        buffer.order(ByteOrder.BIG_ENDIAN);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, buffer, "rewind", "()java.nio.Buffer", new Object[] {}, buffer, 1);
        Mockingbird.setReturnValue(false, buffer, "getInt", "()int", new Object[] {}, new Integer(65280), 1);
        Mockingbird.enterTestMode(ValueCompressionUtil.class);
        int[] result = ValueCompressionUtil.convertToIntArray(buffer, 100);
        assertEquals("result.length", 25, result.length);
        assertEquals("result[0]", 65280, result[0]);
    }
    
    public void testConvertToIntArray1() throws Throwable {
        int[] result = ValueCompressionUtil.convertToIntArray(ByteBuffer.allocateDirect(100), 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToLongArray() throws Throwable {
        long[] result = ValueCompressionUtil.convertToLongArray(ByteBuffer.allocateDirect(100), 100);
        assertEquals("result.length", 12, result.length);
        assertEquals("result[0]", 0L, result[0]);
    }
    
    public void testConvertToLongArray1() throws Throwable {
        long[] result = ValueCompressionUtil.convertToLongArray(ByteBuffer.allocateDirect(100), 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToShortArray() throws Throwable {
        short[] result = ValueCompressionUtil.convertToShortArray(ByteBuffer.allocate(100), 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testConvertToShortArray1() throws Throwable {
        short[] result = ValueCompressionUtil.convertToShortArray(ByteBuffer.allocateDirect(100), 100);
        assertEquals("result.length", 50, result.length);
        assertEquals("result[0]", (short)0, result[0]);
    }
    
    public void testDataTypeGetSize() throws Throwable {
        int result = ValueCompressionUtil.DataType.DATA_INT.getSize();
        assertEquals("result", 4, result);
    }
    
    public void testDataTypeValueOf() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.DataType.valueOf("DATA_FLOAT");
        assertEquals("result", ValueCompressionUtil.DataType.DATA_FLOAT, result);
    }
    
    public void testDataTypeValues() throws Throwable {
        ValueCompressionUtil.DataType[] result = ValueCompressionUtil.DataType.values();
        assertEquals("result.length", 6, result.length);
        assertEquals("result[0]", ValueCompressionUtil.DataType.DATA_BYTE, result[0]);
    }
    
    public void testGetCompressedValues() throws Throwable {
        double[] values = new double[0];
        float[] result = (float[]) ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN, values, ValueCompressionUtil.DataType.DATA_FLOAT, 100.0, 100);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetCompressedValues1() throws Throwable {
        double[] values = new double[4];
        int[] result = (int[]) ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT, values, ValueCompressionUtil.DataType.DATA_INT, 100.0, 100);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testGetCompressedValues2() throws Throwable {
        double[] values = new double[2];
        double[] result = (double[]) ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC, values, ValueCompressionUtil.DataType.DATA_DOUBLE, 100.0, 100);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testGetCompressedValues3() throws Throwable {
        double[] values = new double[2];
        float[] result = (float[]) ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.NONE, values, ValueCompressionUtil.DataType.DATA_FLOAT, 100.0, 100);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testGetCompressionType() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(1000.0, 10000.0, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType1() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(32767.0, 0.0, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType2() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(127.0, 100.0, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType3() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(Double.MAX_VALUE, 100.0, 1);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType4() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(100.0, -3.4028234663852886E38, 100);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType5() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(2.147483647E9, 100.0, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType6() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(Double.MAX_VALUE, 100.0, -1);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType7() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(127.001, 100.0, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType8() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(9.223372036854776E18, 9.223372036854776E18, 0);
        assertNotNull("result", result);
    }
    
    public void testGetCompressionType9() throws Throwable {
        Comparable result = ValueCompressionUtil.getCompressionType(127.0, 0.0012800000000052114, 0);
        assertNotNull("result", result);
    }
    
    public void testGetDataType() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(1000.0, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_SHORT, result);
    }
    
    public void testGetDataType1() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(Double.MAX_VALUE, 1);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_DOUBLE, result);
    }
    
    public void testGetDataType2() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(127.00127, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_SHORT, result);
    }
    
    public void testGetDataType3() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(100.0, -1);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_FLOAT, result);
    }
    
    public void testGetDataType4() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(127.0, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_SHORT, result);
    }
    
    public void testGetDataType5() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(100000.0, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_INT, result);
    }
    
    public void testGetDataType6() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(126.99873, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_BYTE, result);
    }
    
    public void testGetDataType7() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(3.4028234663852886E38, 100);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_DOUBLE, result);
    }
    
    public void testGetDataType8() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(9.223372036854776E18, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_DOUBLE, result);
    }
    
    public void testGetDataType9() throws Throwable {
        ValueCompressionUtil.DataType result = ValueCompressionUtil.getDataType(9.2232798031344077E18, 0);
        assertEquals("result", ValueCompressionUtil.DataType.DATA_LONG, result);
    }
    
    public void testGetSize() throws Throwable {
        int result = ValueCompressionUtil.getSize(ValueCompressionUtil.DataType.DATA_DOUBLE);
        assertEquals("result", 8, result);
    }
    
    public void testGetSize1() throws Throwable {
        int result = ValueCompressionUtil.getSize(ValueCompressionUtil.DataType.DATA_BYTE);
        assertEquals("result", 1, result);
    }
    
    public void testGetSize2() throws Throwable {
        int result = ValueCompressionUtil.getSize(ValueCompressionUtil.DataType.DATA_INT);
        assertEquals("result", 4, result);
    }
    
    public void testGetSize3() throws Throwable {
        int result = ValueCompressionUtil.getSize(ValueCompressionUtil.DataType.DATA_SHORT);
        assertEquals("result", 2, result);
    }
    
    public void testGetUncompressedValues() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[0];
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testGetUncompressedValues1() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[0];
        double[] maxValue = new double[3];
        int[] decimal = new int[1];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetUncompressedValues2() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[5] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[6] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[7];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[4] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[5] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[6] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[0];
        int[] decimal = new int[1];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 7, result.length);
    }
    
    public void testGetUncompressedValues3() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[0];
        int[] decimal = new int[1];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testGetUncompressedValues4() throws Throwable {
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[0];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 2, result.length);
    }
    
    public void testGetUncompressedValues5() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[6];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[2];
        int[] decimal = new int[0];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testGetUncompressedValues6() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[1];
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 4, result.length);
    }
    
    public void testGetUncompressedValues7() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[2];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[2];
        int[] decimal = new int[3];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testGetUncompressedValues8() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[1];
        int[] decimal = new int[0];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testGetUncompressedValues9() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[0];
        int[] decimal = new int[3];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testGetUncompressedValues10() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[2];
        int[] decimal = new int[1];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 3, result.length);
    }
    
    public void testGetUncompressedValues11() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[3];
        int[] decimal = new int[0];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testGetUncompressedValues12() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[6];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[5];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[4] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 5, result.length);
    }
    
    public void testGetUncompressedValues13() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[3];
        int[] decimal = new int[2];
        ValueCompressonHolder.UnCompressValue[] result = ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
        assertEquals("result.length", 1, result.length);
    }
    
    public void testGetValueCompressionModel() throws Throwable {
        ValueCompressionModel result = ValueCompressionUtil.getValueCompressionModel("testValueCompressionUtilMeasureMetaDataFileLocation", 100);
        assertEquals("result.getMaxValue().length", 100, result.getMaxValue().length);
        assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
    }
    
    public void testGetValueCompressionModel1() throws Throwable {
        ValueCompressionModel result = ValueCompressionUtil.getValueCompressionModel("testValueCompressionUtilMeasureMetaDataFileLocation", 0);
        assertEquals("result.getMaxValue().length", 0, result.getMaxValue().length);
        assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
    }
    
    public void testGetValueCompressionModel2() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[3];
        ints[0] = -100;
        ints[1] = 7;
        ValueCompressionModel result = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(1)});
        assertSame("result.getMaxValue()", doubles, result.getMaxValue());
    }
    
    public void testGetValueCompressionModel3() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[2];
        ValueCompressionModel result = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(1)});
        assertSame("result.getMaxValue()", doubles, result.getMaxValue());
    }
    
    public void testGetValueCompressionModel4() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[2];
        ints[0] = 1;
        ValueCompressionModel result = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(1)});
        assertSame("result.getMaxValue()", doubles, result.getMaxValue());
    }
    
    public void testGetValueCompressionModel5() throws Throwable {
        double[] doubles = new double[3];
        int[] ints = new int[3];
        ints[0] = -1;
        double[] doubles2 = new double[4];
        ValueCompressionModel result = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles2, doubles, ints, new Integer(2)});
        assertSame("result.getMaxValue()", doubles2, result.getMaxValue());
    }
    
    public void testGetValueCompressionModel6() throws Throwable {
        double[] doubles = new double[0];
        double[] doubles2 = new double[1];
        int[] ints = new int[2];
        ValueCompressionModel result = (ValueCompressionModel) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(0)});
        assertSame("result.getMaxValue()", doubles, result.getMaxValue());
    }
    
    public void testPRIORITYValueOf() throws Throwable {
        Enum result = (Enum) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY", "valueOf", new Class[] {String.class}, null, new Object[] {"ACTUAL"});
        assertEquals("result.name()", "ACTUAL", result.name());
    }
    
    public void testPRIORITYValues() throws Throwable {
        Enum[] result = (Enum[]) callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY", "values", new Class[] {}, null, new Object[] {});
        assertEquals("result.length", 4, result.length);
    }
    
    public void testUnCompressMaxMin() throws Throwable {
        UnCompressMaxMinInt result = (UnCompressMaxMinInt) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_DOUBLE);
        assertNotNull("result", result);
    }
    
    public void testUnCompressMaxMin1() throws Throwable {
        UnCompressMaxMinShort result = (UnCompressMaxMinShort) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, ValueCompressionUtil.DataType.DATA_BYTE);
        assertNotNull("result", result);
    }
    
    public void testUnCompressMaxMin2() throws Throwable {
        UnCompressMaxMinDefault result = (UnCompressMaxMinDefault) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, ValueCompressionUtil.DataType.DATA_FLOAT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressMaxMin3() throws Throwable {
        UnCompressMaxMinByte result = (UnCompressMaxMinByte) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, ValueCompressionUtil.DataType.DATA_DOUBLE);
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testUnCompressMaxMin4() throws Throwable {
        UnCompressMaxMinFloat result = (UnCompressMaxMinFloat) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, ValueCompressionUtil.DataType.DATA_FLOAT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressMaxMin5() throws Throwable {
        UnCompressMaxMinLong result = (UnCompressMaxMinLong) ValueCompressionUtil.unCompressMaxMin(ValueCompressionUtil.DataType.DATA_LONG, ValueCompressionUtil.DataType.DATA_DOUBLE);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal() throws Throwable {
        UnCompressNonDecimalDefault result = (UnCompressNonDecimalDefault) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_DOUBLE, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal1() throws Throwable {
        UnCompressNonDecimalLong result = (UnCompressNonDecimalLong) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_LONG, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal2() throws Throwable {
        UnCompressNonDecimalInt result = (UnCompressNonDecimalInt) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal3() throws Throwable {
        UnCompressNonDecimalShort result = (UnCompressNonDecimalShort) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_SHORT, ValueCompressionUtil.DataType.DATA_SHORT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal4() throws Throwable {
        UnCompressNonDecimalFloat result = (UnCompressNonDecimalFloat) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_FLOAT, ValueCompressionUtil.DataType.DATA_FLOAT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimal5() throws Throwable {
        UnCompressNonDecimalByte result = (UnCompressNonDecimalByte) ValueCompressionUtil.unCompressNonDecimal(ValueCompressionUtil.DataType.DATA_BYTE, ValueCompressionUtil.DataType.DATA_LONG);
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testUnCompressNonDecimalMaxMin() throws Throwable {
        UnCompressNonDecimalMaxMinLong result = (UnCompressNonDecimalMaxMinLong) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_LONG, ValueCompressionUtil.DataType.DATA_SHORT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimalMaxMin1() throws Throwable {
        UnCompressNonDecimalMaxMinShort result = (UnCompressNonDecimalMaxMinShort) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, ValueCompressionUtil.DataType.DATA_FLOAT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimalMaxMin2() throws Throwable {
        UnCompressNonDecimalMaxMinByte result = (UnCompressNonDecimalMaxMinByte) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, ValueCompressionUtil.DataType.DATA_BYTE);
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testUnCompressNonDecimalMaxMin3() throws Throwable {
        UnCompressNonDecimalMaxMinDefault result = (UnCompressNonDecimalMaxMinDefault) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimalMaxMin4() throws Throwable {
        UnCompressNonDecimalMaxMinFloat result = (UnCompressNonDecimalMaxMinFloat) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNonDecimalMaxMin5() throws Throwable {
        UnCompressNonDecimalMaxMinInt result = (UnCompressNonDecimalMaxMinInt) ValueCompressionUtil.unCompressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone() throws Throwable {
        UnCompressNoneFloat result = (UnCompressNoneFloat) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_FLOAT, ValueCompressionUtil.DataType.DATA_INT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone1() throws Throwable {
        UnCompressNoneInt result = (UnCompressNoneInt) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_INT, ValueCompressionUtil.DataType.DATA_BYTE);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone2() throws Throwable {
        UnCompressNoneLong result = (UnCompressNoneLong) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_LONG, ValueCompressionUtil.DataType.DATA_LONG);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone3() throws Throwable {
        UnCompressNoneDefault result = (UnCompressNoneDefault) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_DOUBLE, ValueCompressionUtil.DataType.DATA_FLOAT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone4() throws Throwable {
        UnCompressNoneShort result = (UnCompressNoneShort) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_SHORT, ValueCompressionUtil.DataType.DATA_INT);
        assertNotNull("result", result);
    }
    
    public void testUnCompressNone5() throws Throwable {
        UnCompressNoneByte result = (UnCompressNoneByte) ValueCompressionUtil.unCompressNone(ValueCompressionUtil.DataType.DATA_BYTE, ValueCompressionUtil.DataType.DATA_INT);
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testCompressionFinderConstructorThrowsNullPointerException() throws Throwable {
        Enum privateField = (Enum) getPrivateField(Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"), "MAXNONDECIMAL");
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "<init>", new Class[] {ValueCompressionUtil.DataType.class, ValueCompressionUtil.DataType.class, Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY"), ValueCompressionUtil.COMPRESSION_TYPE.class}, null, new Object[] {ValueCompressionUtil.DataType.DATA_LONG, null, privateField, ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCOMPRESSION_TYPEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            ValueCompressionUtil.COMPRESSION_TYPE.valueOf("testCOMPRESSION_TYPEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$COMPRESSION_TYPE.testCOMPRESSION_TYPEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCOMPRESSION_TYPEValueOfThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.COMPRESSION_TYPE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException() throws Throwable {
        double[] value = new double[2];
        try {
            ValueCompressionUtil.compressMaxMin(null, value, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException1() throws Throwable {
        try {
            ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, (double[]) null, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException2() throws Throwable {
        try {
            ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, (double[]) null, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException3() throws Throwable {
        try {
            ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_INT, (double[]) null, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException4() throws Throwable {
        try {
            ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_LONG, (double[]) null, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressMaxMinThrowsNullPointerException5() throws Throwable {
        try {
            ValueCompressionUtil.compressMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, (double[]) null, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException() throws Throwable {
        double[] value = new double[2];
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(null, value, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException1() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_INT, (double[]) null, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException2() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_BYTE, (double[]) null, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException3() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_DOUBLE, (double[]) null, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException4() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_FLOAT, (double[]) null, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalMaxMinThrowsNullPointerException5() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimalMaxMin(ValueCompressionUtil.DataType.DATA_SHORT, (double[]) null, 100, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_SHORT, (double[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException1() throws Throwable {
        double[] value = new double[1];
        try {
            ValueCompressionUtil.compressNonDecimal(null, value, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException2() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_LONG, (double[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException3() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_DOUBLE, (double[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException4() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_INT, (double[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNonDecimalThrowsNullPointerException5() throws Throwable {
        try {
            ValueCompressionUtil.compressNonDecimal(ValueCompressionUtil.DataType.DATA_FLOAT, (double[]) null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNoneThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_LONG, (double[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNoneThrowsNullPointerException1() throws Throwable {
        try {
            ValueCompressionUtil.compressNone(ValueCompressionUtil.DataType.DATA_INT, (double[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressNoneThrowsNullPointerException2() throws Throwable {
        double[] value = new double[0];
        try {
            ValueCompressionUtil.compressNone(null, value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testCompressionFinderCompareToThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder")}, (Comparable) ValueCompressionUtil.getCompressionType(100.0, 1000.0, 100), new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testConvertToBytesThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToBytes((int[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToBytesThrowsNullPointerException1() throws Throwable {
        try {
            ValueCompressionUtil.convertToBytes((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToBytesThrowsNullPointerException2() throws Throwable {
        try {
            ValueCompressionUtil.convertToBytes((float[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToBytesThrowsNullPointerException3() throws Throwable {
        try {
            ValueCompressionUtil.convertToBytes((double[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToBytesThrowsNullPointerException4() throws Throwable {
        try {
            ValueCompressionUtil.convertToBytes((short[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToDoubleArrayThrowsBufferUnderflowException() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(100);
        try {
            ValueCompressionUtil.convertToDoubleArray(buffer, 1000);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToDoubleArrayThrowsBufferUnderflowException1() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(0);
        buffer.clear();
        try {
            ValueCompressionUtil.convertToDoubleArray(buffer, 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToDoubleArrayThrowsNegativeArraySizeException() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(100);
        try {
            ValueCompressionUtil.convertToDoubleArray(buffer, -9);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToDoubleArrayThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToDoubleArray(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToFloatArrayThrowsBufferUnderflowException() throws Throwable {
        ByteBuffer buffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        buffer.order(ByteOrder.BIG_ENDIAN);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, buffer, "rewind", "()java.nio.Buffer", new Object[] {}, buffer, 1);
        Mockingbird.setReturnValue(false, buffer, "getFloat", "()float", new Object[] {}, new Float(9.1477E-41F), 1);
        Mockingbird.setReturnValue(false, buffer, "getFloat", "()float", new Object[] {}, new Float(7.569E-41F), 1);
        Mockingbird.setException(false, buffer, "getFloat", "()float", new Object[] {}, (Throwable) Mockingbird.getProxyObject(BufferUnderflowException.class), 1);
        Mockingbird.enterTestMode(ValueCompressionUtil.class);
        try {
            ValueCompressionUtil.convertToFloatArray(buffer, 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConvertToFloatArrayThrowsBufferUnderflowException1() throws Throwable {
        try {
            ValueCompressionUtil.convertToFloatArray(ByteBuffer.allocateDirect(0), 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testConvertToFloatArrayThrowsNegativeArraySizeException() throws Throwable {
        try {
            ValueCompressionUtil.convertToFloatArray(ByteBuffer.allocateDirect(100), -53);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToFloatArrayThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToFloatArray(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToIntArrayThrowsBufferUnderflowException() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(0);
        try {
            ValueCompressionUtil.convertToIntArray(buffer, 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToIntArrayThrowsBufferUnderflowException1() throws Throwable {
        ByteBuffer buffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        buffer.order(ByteOrder.BIG_ENDIAN);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, buffer, "rewind", "()java.nio.Buffer", new Object[] {}, buffer, 1);
        Mockingbird.setReturnValue(false, buffer, "getInt", "()int", new Object[] {}, new Integer(65280), 1);
        Mockingbird.setReturnValue(false, buffer, "getInt", "()int", new Object[] {}, new Integer(54014), 1);
        Mockingbird.setException(false, buffer, "getInt", "()int", new Object[] {}, (Throwable) Mockingbird.getProxyObject(BufferUnderflowException.class), 1);
        Mockingbird.enterTestMode(ValueCompressionUtil.class);
        try {
            ValueCompressionUtil.convertToIntArray(buffer, 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConvertToIntArrayThrowsNegativeArraySizeException() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocate(100);
        try {
            ValueCompressionUtil.convertToIntArray(buffer, -5);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToIntArrayThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToIntArray(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToLongArrayThrowsBufferUnderflowException() throws Throwable {
        try {
            ValueCompressionUtil.convertToLongArray(ByteBuffer.allocateDirect(0), 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testConvertToLongArrayThrowsBufferUnderflowException1() throws Throwable {
        ByteBuffer buffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        buffer.order(ByteOrder.BIG_ENDIAN);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, buffer, "rewind", "()java.nio.Buffer", new Object[] {}, buffer, 1);
        Mockingbird.setReturnValue(false, buffer, "getLong", "()long", new Object[] {}, new Long(280375465136894L), 1);
        Mockingbird.setException(false, buffer, "getLong", "()long", new Object[] {}, (Throwable) Mockingbird.getProxyObject(BufferUnderflowException.class), 1);
        Mockingbird.enterTestMode(ValueCompressionUtil.class);
        try {
            ValueCompressionUtil.convertToLongArray(buffer, 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConvertToLongArrayThrowsNegativeArraySizeException() throws Throwable {
        ByteBuffer buffer = ByteBuffer.allocateDirect(100);
        buffer.clear();
        try {
            ValueCompressionUtil.convertToLongArray(buffer, -9);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToLongArrayThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToLongArray(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testConvertToShortArrayThrowsBufferUnderflowException() throws Throwable {
        try {
            ValueCompressionUtil.convertToShortArray(ByteBuffer.allocateDirect(0), 100);
            fail("Expected BufferUnderflowException to be thrown");
        } catch (BufferUnderflowException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Buffer.class, ex);
        }
    }
    
    public void testConvertToShortArrayThrowsNegativeArraySizeException() throws Throwable {
        byte[] bytes = new byte[0];
        ByteBuffer buffer = ByteBuffer.wrap(bytes);
        try {
            ValueCompressionUtil.convertToShortArray(buffer, -2);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            boolean actual = ((Boolean) callPrivateMethod("java.nio.HeapByteBuffer", "isDirect", new Class[] {}, buffer, new Object[] {})).booleanValue();
            assertFalse("(ByteBuffer) buffer.isDirect()", actual);
        }
    }
    
    public void testConvertToShortArrayThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.convertToShortArray(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testDataTypeValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            ValueCompressionUtil.DataType.valueOf("testDataTypeParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$DataType.testDataTypeParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDataTypeValueOfThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.DataType.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testGetCompressedValuesThrowsNullPointerException() throws Throwable {
        double[] values = new double[0];
        try {
            ValueCompressionUtil.getCompressedValues(null, values, ValueCompressionUtil.DataType.DATA_LONG, 100.0, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetCompressedValuesThrowsNullPointerException1() throws Throwable {
        double[] values = new double[2];
        try {
            ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC, values, null, 100.0, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetCompressedValuesThrowsNullPointerException2() throws Throwable {
        try {
            ValueCompressionUtil.getCompressedValues(ValueCompressionUtil.COMPRESSION_TYPE.NONE, (double[]) null, ValueCompressionUtil.DataType.DATA_INT, 100.0, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetSizeThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.getSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[1];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[2];
        int[] decimal = new int[2];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[1];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[0];
        int[] decimal = new int[2];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[1];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[13];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[5] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[6] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[7] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[8] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[9] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[10] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[11] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[12] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[14];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[4] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[5] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[6] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[7] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[8] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[9] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[10] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[11] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[12] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "13", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        int[] decimal = new int[1];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_DOUBLE;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_DOUBLE;
        double[] maxValue = new double[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[2];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[2];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[0];
        int[] decimal = new int[1];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException1() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[13];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[15];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[4] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException2() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException3() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[13];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[14];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException4() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException5() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        double[] maxValue = new double[2];
        int[] decimal = new int[1];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException6() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException7() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException8() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[6];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[5];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[1];
        int[] decimal = new int[2];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException9() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[13];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[5] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[14];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_LONG;
        changedDataType[4] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException10() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[4];
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException11() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        double[] maxValue = new double[3];
        int[] decimal = new int[1];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, (ValueCompressionUtil.DataType[]) null, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException12() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[0];
        int[] decimal = new int[2];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException13() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[2];
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        double[] maxValue = new double[3];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException14() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[6];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[2];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException15() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[1];
        double[] maxValue = new double[0];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException16() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[4] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException17() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException18() throws Throwable {
        double[] maxValue = new double[3];
        int[] decimal = new int[2];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException19() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[16];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[15];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException20() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException21() throws Throwable {
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_INT;
        changedDataType[2] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[3] = ValueCompressionUtil.DataType.DATA_SHORT;
        double[] maxValue = new double[3];
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[3] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException22() throws Throwable {
        int[] decimal = new int[3];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[2];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException23() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[16];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[15];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_INT;
        double[] maxValue = new double[1];
        int[] decimal = new int[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException24() throws Throwable {
        int[] decimal = new int[1];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[3];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN_NDC;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_SHORT;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_DOUBLE;
        double[] maxValue = new double[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException25() throws Throwable {
        int[] decimal = new int[2];
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[7];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[6];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_LONG;
        double[] maxValue = new double[3];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException26() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException27() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.MAX_MIN;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[2] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_BYTE;
        changedDataType[1] = ValueCompressionUtil.DataType.DATA_BYTE;
        double[] maxValue = new double[1];
        int[] decimal = new int[0];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetUncompressedValuesThrowsNullPointerException28() throws Throwable {
        ValueCompressionUtil.COMPRESSION_TYPE[] compType = new ValueCompressionUtil.COMPRESSION_TYPE[4];
        compType[0] = ValueCompressionUtil.COMPRESSION_TYPE.NON_DECIMAL_CONVERT;
        compType[1] = ValueCompressionUtil.COMPRESSION_TYPE.NONE;
        ValueCompressionUtil.DataType[] changedDataType = new ValueCompressionUtil.DataType[3];
        changedDataType[0] = ValueCompressionUtil.DataType.DATA_FLOAT;
        double[] maxValue = new double[2];
        int[] decimal = new int[1];
        try {
            ValueCompressionUtil.getUncompressedValues(compType, changedDataType, maxValue, decimal);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsArrayIndexOutOfBoundsException() throws Throwable {
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        int[] ints = new int[2];
        ints[0] = 1;
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(100)});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        double[] doubles = new double[2];
        doubles[0] = 3.4028234663852886E38;
        double[] doubles2 = new double[1];
        int[] ints = new int[4];
        ints[0] = 2;
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(100)});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        double[] doubles = new double[1];
        double[] doubles2 = new double[4];
        doubles2[0] = -Double.MAX_VALUE;
        int[] ints = new int[3];
        ints[0] = 6;
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(100)});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        double[] doubles = new double[1];
        double[] doubles2 = new double[0];
        int[] ints = new int[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(100)});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsNegativeArraySizeException() throws Throwable {
        try {
            ValueCompressionUtil.getValueCompressionModel("testValueCompressionUtilMeasureMetaDataFileLocation", -1);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
        }
    }
    
    public void testGetValueCompressionModelThrowsNegativeArraySizeException1() throws Throwable {
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        int[] ints = new int[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {doubles, doubles2, ints, new Integer(-1)});
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.getValueCompressionModel(null, 100);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
        }
    }
    
    public void testGetValueCompressionModelThrowsNullPointerException1() throws Throwable {
        double[] doubles = new double[0];
        int[] ints = new int[0];
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil", "getValueCompressionModel", new Class[] {double[].class, double[].class, int[].class, int.class}, null, new Object[] {null, doubles, ints, new Integer(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testGetValueCompressionModelThrowsThrowable() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, null, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, ValueCompressionUtil.class, "closeable", "(java.io.Closeable)void", null, 1);
        Mockingbird.setReturnValue(true, ValueCompressionUtil.class, "closeable", "(java.io.Closeable)void", new Object[] {fileInputStream}, null, 1);
        Mockingbird.enterTestMode(ValueCompressionUtil.class);
        try {
            ValueCompressionUtil.getValueCompressionModel("", 0);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
            assertNotNull("ValueCompressionUtil.LOGGER", getPrivateField(ValueCompressionUtil.class, "LOGGER"));
        }
    }
    
    public void testPRIORITYValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY", "valueOf", new Class[] {String.class}, null, new Object[] {"testPRIORITYParam1"});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY.testPRIORITYParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPRIORITYValueOfThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil$CompressionFinder$PRIORITY", "valueOf", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testUnCompressMaxMinThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.unCompressMaxMin(null, ValueCompressionUtil.DataType.DATA_LONG);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testUnCompressNonDecimalMaxMinThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.unCompressNonDecimalMaxMin(null, ValueCompressionUtil.DataType.DATA_LONG);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testUnCompressNonDecimalThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.unCompressNonDecimal(null, ValueCompressionUtil.DataType.DATA_DOUBLE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testUnCompressNoneThrowsNullPointerException() throws Throwable {
        try {
            ValueCompressionUtil.unCompressNone(null, ValueCompressionUtil.DataType.DATA_LONG);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
}

