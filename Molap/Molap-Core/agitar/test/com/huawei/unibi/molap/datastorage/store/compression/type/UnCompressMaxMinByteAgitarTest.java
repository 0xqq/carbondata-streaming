/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 2:33:06 PM
 * Time to generate: 00:17.398 seconds
 *
 */

package com.huawei.unibi.molap.datastorage.store.compression.type;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.compression.Compressor;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressonHolder;
import com.huawei.unibi.molap.util.MolapCoreLogEvent;
import org.xerial.snappy.Snappy;

public class UnCompressMaxMinByteAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return UnCompressMaxMinByte.class;
    }
    
    public void testConstructor() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        assertNull("unCompressMaxMinByte.getBackArrayData()", unCompressMaxMinByte.getBackArrayData());
    }
    
    public void testCompressWithAggressiveMocks() throws Throwable {
        storeStaticField(UnCompressMaxMinByte.class, "byteCompressor");
        UnCompressMaxMinByte unCompressMaxMinByte = (UnCompressMaxMinByte) Mockingbird.getProxyObject(UnCompressMaxMinByte.class, true);
        byte[] bytes = new byte[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(UnCompressMaxMinByte.class, "<init>()", new UnCompressMaxMinByte());
        Compressor compressor = (Compressor) Mockingbird.getProxyObject(Compressor.class);
        byte[] bytes2 = new byte[0];
        Mockingbird.enterNormalMode();
        unCompressMaxMinByte.setValue(bytes);
        setPrivateField(UnCompressMaxMinByte.class, "byteCompressor", compressor);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(compressor.compress(bytes), bytes2);
        Mockingbird.enterTestMode(UnCompressMaxMinByte.class);
        ValueCompressonHolder.UnCompressValue result = unCompressMaxMinByte.compress();
        assertEquals("result.getBackArrayData().length", 0, result.getBackArrayData().length);
        assertNotNull("unCompressMaxMinByteUnCompressMaxMinByte.byteCompressor", getPrivateField(UnCompressMaxMinByte.class, "byteCompressor"));
    }
    
    public void testGetBackArrayData() throws Throwable {
        byte[] value = new byte[2];
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        unCompressMaxMinByte.setValueInBytes(value);
        byte[] result = unCompressMaxMinByte.getBackArrayData();
        assertSame("result", value, result);
        assertEquals("value[0]", (byte)0, value[0]);
    }
    
    public void testGetBackArrayData1() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        byte[] value = new byte[0];
        unCompressMaxMinByte.setValueInBytes(value);
        byte[] result = unCompressMaxMinByte.getBackArrayData();
        assertSame("result", value, result);
    }
    
    public void testGetCompressorObject() throws Throwable {
        UnCompressMaxMinByte result = (UnCompressMaxMinByte) new UnCompressMaxMinByte().getCompressorObject();
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testGetNew() throws Throwable {
        UnCompressMaxMinByte result = (UnCompressMaxMinByte) new UnCompressMaxMinByte().getNew();
        assertNull("result.getBackArrayData()", result.getBackArrayData());
    }
    
    public void testGetNewWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG");
        storeStaticField(UnCompressMaxMinByte.class, "LOGGER");
        UnCompressMaxMinByte unCompressMaxMinByte = (UnCompressMaxMinByte) Mockingbird.getProxyObject(UnCompressMaxMinByte.class, true);
        CloneNotSupportedException cloneNotSupportedException = (CloneNotSupportedException) Mockingbird.getProxyObject(CloneNotSupportedException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, unCompressMaxMinByte, "clone", "()java.lang.Object", new Object[] {}, cloneNotSupportedException, 1);
        setPrivateField(UnCompressMaxMinByte.class, "LOGGER", logService);
        setPrivateField(MolapCoreLogEvent.class, "UNIBI_MOLAPCORE_MSG", null);
        Mockingbird.setReturnValue(false, cloneNotSupportedException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(UnCompressMaxMinByte.class);
        ValueCompressonHolder.UnCompressValue result = unCompressMaxMinByte.getNew();
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        byte[] value = new byte[3];
        unCompressMaxMinByte.setValueInBytes(value);
        double result = unCompressMaxMinByte.getValue(0, 100, 0.0);
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetValue1() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        byte[] value = new byte[3];
        value[0] = (byte)-74;
        unCompressMaxMinByte.setValueInBytes(value);
        double result = unCompressMaxMinByte.getValue(0, 100, 100.0);
        assertEquals("result", 174.0, result, 1.0E-6);
    }
    
    public void testSetValue() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        byte[] value = new byte[0];
        unCompressMaxMinByte.setValue(value);
        assertSame("unCompressMaxMinByte.getBackArrayData()", value, unCompressMaxMinByte.getBackArrayData());
    }
    
    public void testSetValueInBytes() throws Throwable {
        byte[] value = new byte[2];
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        unCompressMaxMinByte.setValueInBytes(value);
        assertSame("unCompressMaxMinByte.getBackArrayData()", value, unCompressMaxMinByte.getBackArrayData());
    }
    
    public void testUncompressWithAggressiveMocks() throws Throwable {
        UnCompressMaxMinByte unCompressMaxMinByte = (UnCompressMaxMinByte) Mockingbird.getProxyObject(UnCompressMaxMinByte.class, true);
        byte[] bytes = new byte[0];
        unCompressMaxMinByte.setValue(bytes);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ValueCompressionUtil.unCompressMaxMin(null, null), null);
        ValueCompressonHolder.unCompress(null, null, bytes);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(UnCompressMaxMinByte.class);
        ValueCompressonHolder.UnCompressValue result = unCompressMaxMinByte.uncompress(null);
        assertNull("result", result);
    }
    
    public void testGetValueThrowsArrayIndexOutOfBoundsException() throws Throwable {
        byte[] value = new byte[1];
        UnCompressMaxMinByte unCompressMaxMinByte = new UnCompressMaxMinByte();
        unCompressMaxMinByte.setValueInBytes(value);
        try {
            unCompressMaxMinByte.getValue(100, 1000, 100.0);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(UnCompressMaxMinByte.class, ex);
        }
    }
    
    public void testGetValueThrowsNullPointerException() throws Throwable {
        try {
            new UnCompressMaxMinByte().getValue(100, 1000, 100.0);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(UnCompressMaxMinByte.class, ex);
        }
    }
    
    public void testUncompressThrowsNullPointerException() throws Throwable {
        try {
            new UnCompressMaxMinByte().uncompress(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ValueCompressionUtil.class, ex);
        }
    }
    
    public void testUncompressThrowsNullPointerException1() throws Throwable {
        try {
            new UnCompressMaxMinByte().uncompress(ValueCompressionUtil.DataType.DATA_BYTE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Snappy.class, ex);
        }
    }
}

