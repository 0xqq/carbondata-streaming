/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:55:20 PM
 * Time to generate: 01:33.744 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import mondrian.olap.Dimension;
import mondrian.olap.MondrianException;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapDimension;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.RolapStar;

public class InMemoryCubeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InMemoryCube.class;
    }
    
    public void testConstructor() throws Throwable {
        storeStaticField(InMemoryCube.class, "counter");
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        setPrivateField(InMemoryCube.class, "counter", new Long(0L));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode();
        InMemoryCube inMemoryCube = new InMemoryCube(rolapCube);
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
        assertEquals("inMemoryCube.getSchemaName()", "", inMemoryCube.getSchemaName());
        assertEquals("inMemoryCube.getCubeUniqueName()", "", inMemoryCube.getCubeUniqueName());
        assertNull("inMemoryCube.getRolapCube().getSchema().getId()", inMemoryCube.getRolapCube().getSchema().getId());
        assertTrue("inMemoryCube.isActive()", inMemoryCube.isActive());
        assertTrue("inMemoryCube.isSlice()", inMemoryCube.isSlice());
        assertNotNull("inMemoryCube.membersCache", getPrivateField(inMemoryCube, "membersCache"));
        assertEquals("inMemoryCube.getID()", 1L, inMemoryCube.getID());
        assertEquals("inMemoryCube.getCubeName()", "", inMemoryCube.getCubeName());
        assertEquals("inMemoryCubeInMemoryCube.counter", 1L, ((Number) getPrivateField(InMemoryCube.class, "counter")).longValue());
    }
    
    public void testCleanWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        setPrivateField(inMemoryCube, "dimesionCache", map);
        Mockingbird.enterRecordingMode();
        map.clear();
        Mockingbird.setNormalReturnForVoid();
        setPrivateField(inMemoryCube, "membersCache", map2);
        setPrivateField(inMemoryCube, "dataCacheMap", map3);
        map2.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(map3.values(), collection);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cubeDataStore);
        cubeDataStore.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), cubeDataStore2);
        cubeDataStore2.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        map3.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.clean();
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
        assertNotNull("inMemoryCube.membersCache", getPrivateField(inMemoryCube, "membersCache"));
    }
    
    public void testGetCubeNameWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "cubeName", "");
        Mockingbird.enterTestMode(InMemoryCube.class);
        String result = inMemoryCube.getCubeName();
        assertEquals("result", "", result);
    }
    
    public void testGetCubeSlicePathInfoWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "cubeSlicePathInfo", null);
        Mockingbird.enterTestMode(InMemoryCube.class);
        CubeSlicePathInfo result = inMemoryCube.getCubeSlicePathInfo();
        assertNull("result", result);
    }
    
    public void testGetCubeUniqueNameWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        Mockingbird.enterTestMode(InMemoryCube.class);
        String result = inMemoryCube.getCubeUniqueName();
        assertEquals("result", "", result);
    }
    
    public void testGetDataCacheWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCube, "dataCacheMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterTestMode(InMemoryCube.class);
        CubeDataStore result = inMemoryCube.getDataCache("");
        assertNull("result", result);
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
    }
    
    public void testGetDimensionAndHierarchyCacheWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCube, "dimesionCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterTestMode(InMemoryCube.class);
        DimensionHierarichyStore result = inMemoryCube.getDimensionAndHierarchyCache("");
        assertNull("result", result);
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
    }
    
    public void testGetIDWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "id", new Long(0L));
        Mockingbird.enterTestMode(InMemoryCube.class);
        long result = inMemoryCube.getID();
        assertEquals("result", 0L, result);
    }
    
    public void testGetMemberCacheWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCube, "membersCache", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterTestMode(InMemoryCube.class);
        MemberStore result = inMemoryCube.getMemberCache("");
        assertNull("result", result);
        assertNotNull("inMemoryCube.membersCache", getPrivateField(inMemoryCube, "membersCache"));
    }
    
    public void testGetSchemaNameWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "schemaName", "");
        Mockingbird.enterTestMode(InMemoryCube.class);
        String result = inMemoryCube.getSchemaName();
        assertEquals("result", "", result);
    }
    
    public void testGetSizeWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dataCacheMap", map);
        setPrivateField(rolapCube, "star", rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", cubeDataStore, 1);
        Mockingbird.setReturnValue(cubeDataStore.getSize(), 0L);
        Mockingbird.enterTestMode(InMemoryCube.class);
        long result = inMemoryCube.getSize();
        assertEquals("result", 0L, result);
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
    }
    
    public void testIsActiveWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "cubeStatus", new Byte((byte)0));
        Mockingbird.enterTestMode(InMemoryCube.class);
        boolean result = inMemoryCube.isActive();
        assertTrue("result", result);
    }
    
    public void testIsActiveWithAggressiveMocks1() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "cubeStatus", new Byte((byte)1));
        Mockingbird.enterTestMode(InMemoryCube.class);
        boolean result = inMemoryCube.isActive();
        assertFalse("result", result);
    }
    
    public void testIsSliceWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "isSlice", Boolean.FALSE);
        Mockingbird.enterTestMode(InMemoryCube.class);
        boolean result = inMemoryCube.isSlice();
        assertFalse("result", result);
    }
    
    public void testLoadCacheFromFileWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Dimension[] dimensions = new Dimension[2];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata3 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(inMemoryCube, "membersCache", null);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(inMemoryCube, "dimesionCache", map);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dataCacheMap", map2);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(rolapCube, "dimensions", dimensions);
        setPrivateField(rolapCube, "schema", rolapSchema);
        setPrivateField(rolapCube, "name", "");
        dimensions[0] = rolapDimension;
        dimensions[1] = dimension;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapDimension, "isMeasures", "()boolean", boolean2, 1);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapDimension, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore);
        Mockingbird.setReturnValue(dimensionHierarichyStore.processCacheFromFileStore(""), false);
        Mockingbird.setReturnValue(false, rolapDimension, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, dimension, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, dimension, "isVisible", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), null);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata3);
        Mockingbird.setReturnValue(false, molapMetadata3, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(false, cubeDataStore, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromFile", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(map2.put("", cubeDataStore2), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore3);
        Mockingbird.setReturnValue(false, cubeDataStore3, "loadDataFromFile", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(map2.put("", cubeDataStore3), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore4);
        Mockingbird.setReturnValue(false, cubeDataStore4, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(CubeSlicePathInfo.class));
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCacheFromFile("");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
        assertNull("inMemoryCube.getCubeSlicePathInfo().getCubeName()", inMemoryCube.getCubeSlicePathInfo().getCubeName());
    }
    
    public void testLoadCacheFromFileWithAggressiveMocks1() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Dimension[] dimensions = new Dimension[2];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Dimension dimension2 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata3 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dataCacheMap", map);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(rolapCube, "dimensions", dimensions);
        setPrivateField(rolapCube, "schema", rolapSchema);
        setPrivateField(rolapCube, "name", "");
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, dimension, "isMeasures", "()boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, dimension2, "isMeasures", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, dimension2, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), null);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata3);
        Mockingbird.setReturnValue(false, molapMetadata3, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(cubeDataStore.loadDataFromFile(""), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore3);
        Mockingbird.setReturnValue(false, cubeDataStore3, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore4);
        Mockingbird.setReturnValue(false, cubeDataStore4, "loadDataFromFile", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(CubeSlicePathInfo.class));
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCacheFromFile("");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
        assertNull("inMemoryCube.getCubeSlicePathInfo().getCubeName()", inMemoryCube.getCubeSlicePathInfo().getCubeName());
    }
    
    public void testLoadCacheFromFileWithAggressiveMocks2() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Dimension[] dimensions = new Dimension[2];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        RolapDimension rolapDimension2 = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(inMemoryCube, "membersCache", null);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(inMemoryCube, "dimesionCache", map);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dataCacheMap", map2);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(rolapCube, "dimensions", dimensions);
        setPrivateField(rolapCube, "schema", rolapSchema);
        setPrivateField(rolapCube, "name", "");
        dimensions[0] = rolapDimension;
        dimensions[1] = rolapDimension2;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapDimension, "isMeasures", "()boolean", boolean2, 1);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapDimension, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore);
        Mockingbird.setReturnValue(dimensionHierarichyStore.processCacheFromFileStore(""), false);
        Mockingbird.setReturnValue(false, rolapDimension, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore2);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "processCacheFromFileStore", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(false, cubeDataStore, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromFile", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore3);
        Mockingbird.setReturnValue(false, cubeDataStore3, "loadDataFromFile", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore4);
        Mockingbird.setReturnValue(false, cubeDataStore4, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(CubeSlicePathInfo.class));
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCacheFromFile("");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
        assertNull("inMemoryCube.getCubeSlicePathInfo().getCubeName()", inMemoryCube.getCubeSlicePathInfo().getCubeName());
    }
    
    public void testLoadCacheWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Dimension[] dimensions = new Dimension[2];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        RolapSchema rolapSchema2 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata3 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "membersCache", null);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dimesionCache", map);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(inMemoryCube, "dataCacheMap", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), inMemoryCube2);
        Mockingbird.enterNormalMode();
        inMemoryCube2.setRolapCube(rolapCube2);
        setPrivateField(rolapCube, "dimensions", dimensions);
        setPrivateField(rolapCube, "schema", rolapSchema);
        dimensions[0] = rolapDimension;
        dimensions[1] = dimension;
        setPrivateField(rolapCube2, "schema", rolapSchema2);
        setPrivateField(rolapCube2, "name", "");
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapDimension, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapDimension, "isVisible", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore);
        Mockingbird.setReturnValue(dimensionHierarichyStore.processCacheFromSlice(list, ""), false);
        Mockingbird.setReturnValue(false, rolapDimension, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, dimension, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, dimension, "isVisible", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapSchema2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        Mockingbird.setReturnValue(false, molapMetadata2, "loadCube", "(mondrian.rolap.RolapCube)void", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata3);
        Mockingbird.setReturnValue(false, molapMetadata3, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        cubeDataStore.loadDataFromSlices(arrayList, "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromSlices", "(java.util.List,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCache(list, "");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
    }
    
    public void testLoadCacheWithAggressiveMocks1() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Dimension[] dimensions = new Dimension[2];
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Dimension dimension2 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata3 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        inMemoryCube.setRolapCube(rolapCube);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(inMemoryCube, "dataCacheMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), inMemoryCube2);
        Mockingbird.enterNormalMode();
        inMemoryCube2.setRolapCube(rolapCube2);
        setPrivateField(rolapCube, "dimensions", dimensions);
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(rolapCube2, "schema", rolapSchema);
        setPrivateField(rolapCube2, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, dimension, "isMeasures", "()boolean", Boolean.TRUE, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, dimension2, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, dimension2, "isVisible", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        Mockingbird.setReturnValue(false, molapMetadata2, "loadCube", "(mondrian.rolap.RolapCube)void", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata3);
        Mockingbird.setReturnValue(false, molapMetadata3, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        cubeDataStore.loadDataFromSlices(arrayList, "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromSlices", "(java.util.List,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCache(list, "");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
    }
    
    public void testLoadCacheWithAggressiveMocks2() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Dimension[] dimensions = new Dimension[2];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        RolapDimension rolapDimension2 = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        RolapSchema rolapSchema2 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(inMemoryCube, "membersCache", null);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(inMemoryCube, "dimesionCache", map);
        inMemoryCube.setRsStore(restructureStore);
        setPrivateField(inMemoryCube, "dataCacheMap", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), inMemoryCube2);
        Mockingbird.enterNormalMode();
        inMemoryCube2.setRolapCube(rolapCube2);
        setPrivateField(rolapCube, "dimensions", dimensions);
        setPrivateField(rolapCube, "schema", rolapSchema);
        dimensions[0] = rolapDimension;
        dimensions[1] = rolapDimension2;
        setPrivateField(rolapCube2, "schema", rolapSchema2);
        setPrivateField(rolapCube2, "name", "");
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapDimension, "isMeasures", "()boolean", boolean2, 1);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapDimension, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore);
        Mockingbird.setReturnValue(dimensionHierarichyStore.processCacheFromSlice(list, ""), false);
        Mockingbird.setReturnValue(false, rolapDimension, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "isMeasures", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "isVisible", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        Mockingbird.replaceObjectForRecording(DimensionHierarichyStore.class, "<init>(mondrian.rolap.RolapDimension,java.util.Map,java.lang.String,java.lang.String)", dimensionHierarichyStore2);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "processCacheFromSlice", "(java.util.List,java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapDimension2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getTablesList(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, cubeDataStore, "loadDataFromSlices", "(java.util.List,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore2);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, cubeDataStore2, "loadDataFromSlices", "(java.util.List,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.loadCache(list, "");
        assertNull("inMemoryCube.getRsStore().getSliceMetaCacheMap()", inMemoryCube.getRsStore().getSliceMetaCacheMap());
        assertNotNull("inMemoryCube.dimesionCache", getPrivateField(inMemoryCube, "dimesionCache"));
        assertNotNull("inMemoryCube.dataCacheMap", getPrivateField(inMemoryCube, "dataCacheMap"));
    }
    
    public void testSetCubeMergedWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCube.class, "READY_TO_CLEAN");
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        setPrivateField(InMemoryCube.class, "READY_TO_CLEAN", new Byte((byte)0));
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.setCubeMerged();
        assertTrue("inMemoryCube.isActive()", inMemoryCube.isActive());
    }
    
    public void testSetRolapCubeWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.setRolapCube(null);
        assertNull("inMemoryCube.getRolapCube()", inMemoryCube.getRolapCube());
    }
    
    public void testSetRsStoreWithAggressiveMocks() throws Throwable {
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class, true);
        Mockingbird.enterTestMode(InMemoryCube.class);
        inMemoryCube.setRsStore(null);
        assertNull("inMemoryCube.getRsStore()", inMemoryCube.getRsStore());
    }
    
    public void testConstructorThrowsMondrianException() throws Throwable {
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapCube.getName(), "testString");
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Mockingbird.setReturnValue(rolapCube.getSchema(), rolapSchema);
        Mockingbird.setException(rolapSchema.getName(), (Throwable) Mockingbird.getProxyObject(MondrianException.class));
        Mockingbird.enterTestMode(InMemoryCube.class);
        try {
            new InMemoryCube(rolapCube);
            fail("Expected MondrianException to be thrown");
        } catch (MondrianException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new InMemoryCube(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryCube.class, ex);
            assertEquals("InMemoryCube.counter", 0L, ((Number) getPrivateField(InMemoryCube.class, "counter")).longValue());
        }
    }
}

