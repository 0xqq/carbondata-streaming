/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:06:21 PM
 * Time to generate: 01:37.574 seconds
 *
 */

package com.huawei.unibi.molap.engine.mondrian.extensions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import mondrian.calc.TupleList;
import mondrian.olap.Dimension;
import mondrian.olap.Id;
import mondrian.olap.Level;
import mondrian.olap.MondrianDef;
import mondrian.olap.MondrianProperties;
import mondrian.olap.Util;
import mondrian.rolap.ChildByNameConstraint;
import mondrian.rolap.HighCardSqlTupleReader;
import mondrian.rolap.MemberCache;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.RolapMember;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.RolapUtil;
import mondrian.rolap.SqlMemberSource;
import mondrian.rolap.SqlStatement;
import mondrian.rolap.aggmatcher.AggStar;
import mondrian.rolap.sql.MemberChildrenConstraint;
import mondrian.rolap.sql.TupleConstraint;
import org.eigenbase.util.property.IntegerProperty;

public class MolapMemberSourceAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapMemberSource.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(SqlMemberSource.class);
        MolapMemberSource molapMemberSource = new MolapMemberSource(null);
        assertEquals("molapMemberSource.lastOrdinal", 0, ((Number) getPrivateField(molapMemberSource, "lastOrdinal")).intValue());
        assertNull("molapMemberSource.dataSource", getPrivateField(molapMemberSource, "dataSource"));
        assertNull("molapMemberSource.valuePool", getPrivateField(molapMemberSource, "valuePool"));
        assertNull("molapMemberSource.getHierarchy()", molapMemberSource.getHierarchy());
        assertFalse("molapMemberSource.assignOrderKeys", ((Boolean) getPrivateField(molapMemberSource, "assignOrderKeys")).booleanValue());
        assertNotNull("molapMemberSource.sqlConstraintFactory", getPrivateField(molapMemberSource, "sqlConstraintFactory"));
    }
    
    public void testGetMemberChildrenWithAggressiveMocks() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapMember.isAll(), false);
        Mockingbird.setReturnValue(rolapMember.isCalculated(), true);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel);
        Mockingbird.setReturnValue(rolapLevel.isParentChild(), false);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        molapMemberSource.getMemberChildren(rolapMember, null, null);
        assertEquals("molapMemberSource.lastOrdinal", 0, ((Number) getPrivateField(molapMemberSource, "lastOrdinal")).intValue());
        assertNull("molapMemberSource.valuePool", getPrivateField(molapMemberSource, "valuePool"));
        assertNull("molapMemberSource.getMemberCache()", molapMemberSource.getMemberCache());
    }
    
    public void testGetMemberChildrenWithAggressiveMocks1() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapMember.isAll(), true);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel);
        Mockingbird.setReturnValue(rolapLevel.isParentChild(), false);
        Mockingbird.setReturnValue(rolapLevel.getChildLevel(), null);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        molapMemberSource.getMemberChildren(rolapMember, null, null);
        assertEquals("molapMemberSource.lastOrdinal", 0, ((Number) getPrivateField(molapMemberSource, "lastOrdinal")).intValue());
        assertNull("molapMemberSource.valuePool", getPrivateField(molapMemberSource, "valuePool"));
        assertNull("molapMemberSource.getMemberCache()", molapMemberSource.getMemberCache());
    }
    
    public void testGetMemberChildrenWithAggressiveMocks2() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapMember.isAll(), false);
        Mockingbird.setReturnValue(rolapMember.isCalculated(), false);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel);
        Mockingbird.setReturnValue(rolapLevel.isParentChild(), false);
        Mockingbird.setReturnValue(rolapLevel.getChildLevel(), null);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        molapMemberSource.getMemberChildren(rolapMember, null, null);
        assertEquals("molapMemberSource.lastOrdinal", 0, ((Number) getPrivateField(molapMemberSource, "lastOrdinal")).intValue());
        assertNull("molapMemberSource.valuePool", getPrivateField(molapMemberSource, "valuePool"));
        assertNull("molapMemberSource.getMemberCache()", molapMemberSource.getMemberCache());
    }
    
    public void testGetMemberChildrenWithAggressiveMocks3() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapMember.isAll(), false);
        Mockingbird.setReturnValue(rolapMember.isCalculated(), true);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel);
        Mockingbird.setReturnValue(rolapLevel.isParentChild(), true);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel2);
        Mockingbird.setReturnValue(rolapLevel2.isParentChild(), false);
        Mockingbird.setReturnValue(rolapLevel2.getChildLevel(), null);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        molapMemberSource.getMemberChildren(rolapMember, null, null);
        assertEquals("molapMemberSource.lastOrdinal", 0, ((Number) getPrivateField(molapMemberSource, "lastOrdinal")).intValue());
        assertNull("molapMemberSource.valuePool", getPrivateField(molapMemberSource, "valuePool"));
        assertNull("molapMemberSource.getMemberCache()", molapMemberSource.getMemberCache());
    }
    
    public void testGetMemberCountWithAggressiveMocks() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        setPrivateField(rolapLevel, "keyExp", column);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        column.name = "";
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, molapStatement, "executeCount", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(molapResultHolder.isNext(), true);
        Mockingbird.setReturnValue(false, molapResultHolder, "getObject", "(int)java.lang.Object", new Double(0.0), 1);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        int result = molapMemberSource.getMemberCount(rolapLevel, null);
        assertEquals("result", 0, result);
    }
    
    public void testGetMemberCountWithAggressiveMocks1() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        setPrivateField(rolapLevel, "keyExp", column);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        column.name = "";
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, molapStatement, "executeCount", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        int result = molapMemberSource.getMemberCount(rolapLevel, null);
        assertEquals("result", 0, result);
    }
    
    public void testGetMemberCountWithAggressiveMocks2() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        setPrivateField(rolapLevel, "keyExp", column);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        column.name = "";
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, molapStatement, "executeCount", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        int result = molapMemberSource.getMemberCount(rolapLevel, null);
        assertEquals("result", 0, result);
    }
    
    public void testGetMembersInLevelWithAggressiveMocks() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.isAll(), true);
        setPrivateField(rolapHierarchy, "allMember", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        List result = molapMemberSource.getMembersInLevel(rolapLevel, 0, 0, null);
        assertNotNull("result", result);
    }
    
    public void testGetMembersInLevelWithAggressiveMocks1() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Dimension dimension2 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.isAll(), false);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension);
        Mockingbird.setReturnValue(dimension.isHighCardinality(), false);
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension2);
        Mockingbird.setReturnValue(dimension2.getSchema(), null);
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class);
        Mockingbird.replaceObjectForRecording(MolapTupleReader.class, "<init>(mondrian.rolap.sql.TupleConstraint,mondrian.rolap.RolapSchema)", molapTupleReader);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLevelMembers", "(mondrian.rolap.RolapLevel,mondrian.rolap.TupleReader$MemberBuilder,java.util.List)void", null, 1);
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.setReturnValue(false, molapTupleReader, "readTuples", "(javax.sql.DataSource,mondrian.calc.TupleList,java.util.List)mondrian.calc.TupleList", tupleList, 1);
        Mockingbird.setReturnValue(tupleList.getArity(), 1);
        Mockingbird.setReturnValue(tupleList.slice(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        List result = molapMemberSource.getMembersInLevel(rolapLevel, 0, 0, null);
        assertNull("result", result);
    }
    
    public void testGetMembersInLevelWithAggressiveMocks2() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(dimension.isHighCardinality(), true);
        HighCardSqlTupleReader highCardSqlTupleReader = (HighCardSqlTupleReader) Mockingbird.getProxyObject(HighCardSqlTupleReader.class);
        Mockingbird.replaceObjectForRecording(HighCardSqlTupleReader.class, "<init>(mondrian.rolap.sql.TupleConstraint)", highCardSqlTupleReader);
        Mockingbird.setReturnValue(false, highCardSqlTupleReader, "addLevelMembers", "(mondrian.rolap.RolapLevel,mondrian.rolap.TupleReader$MemberBuilder,java.util.List)void", null, 1);
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.setReturnValue(false, highCardSqlTupleReader, "readTuples", "(javax.sql.DataSource,mondrian.calc.TupleList,java.util.List)mondrian.calc.TupleList", tupleList, 1);
        Mockingbird.setReturnValue(tupleList.getArity(), 1);
        Mockingbird.setReturnValue(tupleList.slice(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapMemberSource", "getMembersInLevel", new Class[] {RolapLevel.class, TupleConstraint.class}, molapMemberSource, new Object[] {rolapLevel, null});
        assertNull("result", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new MolapMemberSource(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SqlMemberSource.class, ex);
        }
    }
    
    public void testGetMemberChildren2ThrowsRuntimeExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        MemberCache memberCache = (MemberCache) Mockingbird.getProxyObject(MemberCache.class);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        ChildByNameConstraint childByNameConstraint = (ChildByNameConstraint) Mockingbird.getProxyObject(ChildByNameConstraint.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel3 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel4 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        RolapLevel rolapLevel5 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        RolapMember rolapMember2 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapLevel rolapLevel6 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        RolapMember rolapMember3 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        Id.Segment segment = (Id.Segment) Mockingbird.getProxyObject(Id.Segment.class);
        Level[] levels = new Level[0];
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        RolapSchema rolapSchema2 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        SqlStatement.Accessor accessor = (SqlStatement.Accessor) Mockingbird.getProxyObject(SqlStatement.Accessor.class);
        Object[] objects = new Object[0];
        SqlStatement.Accessor accessor2 = (SqlStatement.Accessor) Mockingbird.getProxyObject(SqlStatement.Accessor.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        SqlStatement.Accessor accessor3 = (SqlStatement.Accessor) Mockingbird.getProxyObject(SqlStatement.Accessor.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SqlStatement.Accessor accessor4 = (SqlStatement.Accessor) Mockingbird.getProxyObject(SqlStatement.Accessor.class);
        RolapMember rolapMember4 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        Object[] objects2 = new Object[0];
        SqlStatement.Accessor accessor5 = (SqlStatement.Accessor) Mockingbird.getProxyObject(SqlStatement.Accessor.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        RuntimeException runtimeException = (RuntimeException) Mockingbird.getProxyObject(RuntimeException.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        setPrivateField(molapMemberSource, "cache", memberCache);
        setPrivateField(childByNameConstraint, "cacheKey", list2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel);
        setPrivateField(rolapLevel4, "keyExp", column);
        setPrivateField(rolapLevel5, "keyExp", column2);
        column2.name = "";
        setPrivateField(rolapLevel6, "keyExp", column3);
        column3.name = "";
        segment.name = "";
        column.name = "";
        setPrivateField(rolapHierarchy, "subName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "dataSource", null);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        Mockingbird.setReturnValue(rolapLevel.isParentChild(), false);
        Mockingbird.setReturnValue(rolapLevel.getChildLevel(), rolapLevel2);
        Mockingbird.setReturnValue(rolapLevel2.isParentChild(), false);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel3);
        Mockingbird.setReturnValue(rolapLevel3.getChildLevel(), rolapLevel4);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(rolapMember.isAll(), false);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>()", molapFilterInfo);
        Mockingbird.setReturnValue(rolapMember.getName(), "");
        Mockingbird.setReturnValue(false, molapFilterInfo, "addIncludedMembers", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(rolapMember.getLevel(), rolapLevel5);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(rolapMember.getParentMember(), rolapMember2);
        Mockingbird.setReturnValue(rolapMember2.isAll(), false);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>()", molapFilterInfo2);
        Mockingbird.setReturnValue(rolapMember2.getName(), "");
        Mockingbird.setReturnValue(false, molapFilterInfo2, "addIncludedMembers", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(rolapMember2.getLevel(), rolapLevel6);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(rolapMember2.getParentMember(), rolapMember3);
        Mockingbird.setReturnValue(rolapMember3.isAll(), true);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>()", molapFilterInfo3);
        Mockingbird.setReturnValue(list2.get(1), segment);
        Mockingbird.setReturnValue(false, molapFilterInfo3, "addIncludedMembers", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        AggStar aggStar = (AggStar) callPrivateMethod("mondrian.rolap.SqlMemberSource", "chooseAggStar", new Class[] {MemberChildrenConstraint.class, RolapMember.class}, null, new Object[] {childByNameConstraint, rolapMember});
        Mockingbird.setReturnValue(aggStar, null);
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        setPrivateField(molapStatement, "accessors", list3);
        molapStatement.rowCount = -4;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema2);
        Mockingbird.setReturnValue(rolapSchema2.getName(), "");
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(RolapUtil.strip(rolapMember), null);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list3, "get", "(int)java.lang.Object", accessor, 1);
        Mockingbird.setReturnValue(accessor.get(), null);
        Mockingbird.setReturnValue(memberCache.makeKey(null, comparable), null);
        Mockingbird.setReturnValue(memberCache.getMember(null, true), null);
        Mockingbird.setReturnValue(false, molapMemberSource, "makeMember", "(mondrian.rolap.RolapMember,mondrian.rolap.RolapLevel,java.lang.Object,java.lang.Object,boolean,mondrian.rolap.SqlStatement,java.lang.Object,int)mondrian.rolap.RolapMember", null, 1);
        Mockingbird.setReturnValue(false, comparable, "equals", "(java.lang.Object)boolean", new Object[] {comparable}, boolean2, 1);
        Mockingbird.setReturnValue(list.toArray(), objects);
        callPrivateMethod("mondrian.rolap.SqlMemberSource", "addAsOldestSibling", new Class[] {List.class, RolapMember.class}, molapMemberSource, new Object[] {list, null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list3, "get", "(int)java.lang.Object", accessor2, 1);
        Mockingbird.setReturnValue(accessor2.get(), obj);
        Mockingbird.setReturnValue(memberCache.makeKey(null, obj), null);
        Mockingbird.setReturnValue(memberCache.getMember(null, false), null);
        Mockingbird.setReturnValue(false, molapMemberSource, "makeMember", "(mondrian.rolap.RolapMember,mondrian.rolap.RolapLevel,java.lang.Object,java.lang.Object,boolean,mondrian.rolap.SqlStatement,java.lang.Object,int)mondrian.rolap.RolapMember", null, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, obj, "equals", "(java.lang.Object)boolean", new Object[] {comparable}, boolean3, 1);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list3, "get", "(int)java.lang.Object", accessor3, 1);
        Mockingbird.setReturnValue(accessor3.get(), obj2);
        Mockingbird.setReturnValue(memberCache.makeKey(null, obj2), null);
        Mockingbird.setReturnValue(memberCache.getMember(null, false), null);
        Mockingbird.setReturnValue(false, molapMemberSource, "makeMember", "(mondrian.rolap.RolapMember,mondrian.rolap.RolapLevel,java.lang.Object,java.lang.Object,boolean,mondrian.rolap.SqlStatement,java.lang.Object,int)mondrian.rolap.RolapMember", null, 1);
        Mockingbird.setReturnValue(false, obj2, "equals", "(java.lang.Object)boolean", new Object[] {comparable}, boolean3, 1);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list3, "get", "(int)java.lang.Object", accessor4, 1);
        Mockingbird.setReturnValue(accessor4.get(), null);
        Mockingbird.setReturnValue(memberCache.makeKey(null, comparable), null);
        Mockingbird.setReturnValue(memberCache.getMember(null, false), rolapMember4);
        Mockingbird.setReturnValue(false, comparable, "equals", "(java.lang.Object)boolean", new Object[] {comparable}, boolean2, 1);
        Mockingbird.setReturnValue(list.toArray(), objects2);
        callPrivateMethod("mondrian.rolap.SqlMemberSource", "addAsOldestSibling", new Class[] {List.class, RolapMember.class}, molapMemberSource, new Object[] {list, rolapMember4});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list3, "get", "(int)java.lang.Object", accessor5, 1);
        Mockingbird.setException(accessor5.get(), sQLException);
        Mockingbird.setReturnValue(molapStatement.handle(sQLException), runtimeException);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapMemberSource", "getMemberChildren2", new Class[] {RolapMember.class, List.class, MemberChildrenConstraint.class}, molapMemberSource, new Object[] {rolapMember, list, childByNameConstraint});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertInvocationCount(list3, "get", 5);
        }
    }
    
    public void testGetMembersInLevelThrowsAssertionErrorWithAggressiveMocks() throws Throwable {
        MolapMemberSource molapMemberSource = (MolapMemberSource) Mockingbird.getProxyObject(MolapMemberSource.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Dimension dimension2 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        setPrivateField(molapMemberSource, "hierarchy", rolapHierarchy);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(dimension.isHighCardinality(), false);
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension2);
        Mockingbird.setReturnValue(dimension2.getSchema(), null);
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class);
        Mockingbird.replaceObjectForRecording(MolapTupleReader.class, "<init>(mondrian.rolap.sql.TupleConstraint,mondrian.rolap.RolapSchema)", molapTupleReader);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLevelMembers", "(mondrian.rolap.RolapLevel,mondrian.rolap.TupleReader$MemberBuilder,java.util.List)void", null, 1);
        Mockingbird.setReturnValue(rolapHierarchy.getRolapSchema(), rolapSchema);
        Mockingbird.setReturnValue(false, molapTupleReader, "readTuples", "(javax.sql.DataSource,mondrian.calc.TupleList,java.util.List)mondrian.calc.TupleList", tupleList, 1);
        Mockingbird.setReturnValue(tupleList.getArity(), 0);
        Mockingbird.enterTestMode(MolapMemberSource.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapMemberSource", "getMembersInLevel", new Class[] {RolapLevel.class, TupleConstraint.class}, molapMemberSource, new Object[] {rolapLevel, null});
            fail("Expected AssertionError to be thrown");
        } catch (AssertionError ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMemberSource.class, ex);
        }
    }
}

