/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:01:37 PM
 * Time to generate: 01:27.694 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import it.unimi.dsi.fastutil.objects.ObjectCollection;
import it.unimi.dsi.fastutil.objects.ObjectIterator;
import it.unimi.dsi.fastutil.objects.ObjectSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import mondrian.olap.MondrianDef;
import mondrian.rolap.RolapLevel;

public class MemberStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MemberStore.class;
    }
    
    public void testConstructorWithAggressiveMocks() throws Throwable {
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class));
        column.name = "";
        Mockingbird.setReturnValue(MolapMetadata.hasNameColumn(rolapLevel), true);
        Mockingbird.setReturnValue(MolapMetadata.hasOrdinalColumn(rolapLevel), false);
        Mockingbird.enterTestMode();
        MemberStore memberStore = new MemberStore(rolapLevel);
        assertNull("memberStore.getRolapLevel().getProperties()", memberStore.getRolapLevel().getProperties());
        assertEquals("memberStore.getLevelName()", "", memberStore.getLevelName());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
        assertEquals("memberStore.getTableForMember()", "", memberStore.getTableForMember());
        assertEquals("memberStore.getNameColIndex()", (byte)0, memberStore.getNameColIndex());
    }
    
    public void testConstructorWithAggressiveMocks1() throws Throwable {
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class));
        column.name = "";
        Mockingbird.setReturnValue(MolapMetadata.hasNameColumn(rolapLevel), true);
        Mockingbird.setReturnValue(MolapMetadata.hasOrdinalColumn(rolapLevel), true);
        Mockingbird.enterTestMode();
        MemberStore memberStore = new MemberStore(rolapLevel);
        assertNull("memberStore.getRolapLevel().getProperties()", memberStore.getRolapLevel().getProperties());
        assertEquals("memberStore.getLevelName()", "", memberStore.getLevelName());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
        assertEquals("memberStore.getTableForMember()", "", memberStore.getTableForMember());
        assertEquals("memberStore.getNameColIndex()", (byte)1, memberStore.getNameColIndex());
    }
    
    public void testConstructorWithAggressiveMocks2() throws Throwable {
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class));
        column.name = "";
        Mockingbird.setReturnValue(MolapMetadata.hasNameColumn(rolapLevel), false);
        Mockingbird.enterTestMode();
        MemberStore memberStore = new MemberStore(rolapLevel);
        assertNull("memberStore.getRolapLevel().getProperties()", memberStore.getRolapLevel().getProperties());
        assertEquals("memberStore.getLevelName()", "", memberStore.getLevelName());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
        assertEquals("memberStore.getTableForMember()", "", memberStore.getTableForMember());
        assertEquals("memberStore.getNameColIndex()", (byte)-1, memberStore.getNameColIndex());
    }
    
    public void testMemberSortModelConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel", "<init>", new Class[] {int.class, Member.class}, null, new Object[] {new Integer(100), new Member(null)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddAllWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        Int2ObjectMap int2ObjectMap2 = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "minMember", new Integer(0));
        setPrivateField(memberStore, "isFirst", Boolean.FALSE);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap2.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), new Integer(0));
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addAll(int2ObjectMap2);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 0, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 0L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddAllWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        Int2ObjectMap int2ObjectMap2 = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "isFirst", Boolean.FALSE);
        setPrivateField(memberStore, "minMember", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap2.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), new Integer(1));
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addAll(int2ObjectMap2);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 1, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 1L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddAllWithAggressiveMocks2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        Int2ObjectMap int2ObjectMap2 = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "maxMember", new Integer(1));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "minMember", new Integer(3));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap2.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), new Integer(2));
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addAll(int2ObjectMap2);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 2, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 2L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddAllWithAggressiveMocks3() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        Int2ObjectMap int2ObjectMap2 = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "minMember", new Integer(0));
        setPrivateField(memberStore, "isFirst", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap2.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), new Integer(1));
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), new Integer(-1));
        Mockingbird.setReturnValue(entry2.getValue(), null);
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addAll(int2ObjectMap2);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", -1, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 1L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddMemberWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "isFirst", Boolean.FALSE);
        setPrivateField(memberStore, "minMember", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addMember(1, null);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 1, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 1L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddMemberWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "minMember", new Integer(0));
        setPrivateField(memberStore, "isFirst", Boolean.FALSE);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addMember(0, null);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 0, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 0L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddMemberWithAggressiveMocks2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "maxMember", new Integer(1));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "minMember", new Integer(3));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addMember(2, null);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 2, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 2L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testAddMemberWithAggressiveMocks3() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "isFirst", Boolean.TRUE);
        setPrivateField(memberStore, "minMember", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, int2ObjectMap, "put", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.addMember(1, null);
        assertTrue("memberStore.isFirst", ((Boolean) getPrivateField(memberStore, "isFirst")).booleanValue());
        assertEquals("memberStore.minMember", 0, ((Number) getPrivateField(memberStore, "minMember")).intValue());
        assertEquals("memberStore.getMaxValue()", 1L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testClearWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        int2ObjectMap.clear();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.clear();
        assertEquals("memberStore.getMaxValue()", 0L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testCreateSortIndexWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "minMember", new Integer(0));
        setPrivateField(memberStore, "maxMember", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.size(), 2);
        Mockingbird.setReturnValue(int2ObjectMap.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), new Integer(0));
        Mockingbird.setReturnValue(entry.getValue(), null);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), "<init>(int,com.huawei.unibi.molap.engine.datastorage.Member)", comparable);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), new Integer(0));
        Mockingbird.setReturnValue(entry2.getValue(), null);
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), "<init>(int,com.huawei.unibi.molap.engine.datastorage.Member)", comparable2);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        setPrivateField(comparable2, "key", new Integer(0));
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.createSortIndex();
        assertEquals("memberStore.getSortOrderSize()", 2, memberStore.getSortOrderSize());
        assertEquals("memberStore.sortReverseOrderIndex.length", 1, ((int[]) getPrivateField(memberStore, "sortReverseOrderIndex")).length);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetActualKeyFromSortedIndexWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        Mockingbird.enterTestMode(MemberStore.class);
        Member result = memberStore.getActualKeyFromSortedIndex(0);
        assertNull("result", result);
        assertNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetActualKeyFromSortedIndexWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        setPrivateField(memberStore, "minMember", new Integer(0));
        Mockingbird.enterTestMode(MemberStore.class);
        Member result = memberStore.getActualKeyFromSortedIndex(-1);
        assertNull("result", result);
        assertNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetActualKeyFromSortedIndexWithAggressiveMocks2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[1];
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        int[] ints2 = new int[1];
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        setPrivateField(memberStore, "minMember", new Integer(-1));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "sortOrderIndex", ints2);
        ints2[0] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.get(0), null);
        Mockingbird.enterTestMode(MemberStore.class);
        Member result = memberStore.getActualKeyFromSortedIndex(0);
        assertNull("result", result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetAllMembersWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        ObjectCollection objectCollection = (ObjectCollection) Mockingbird.getProxyObject(ObjectCollection.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.values(), objectCollection);
        Mockingbird.setReturnValue(objectCollection.iterator(), null);
        Mockingbird.enterTestMode(MemberStore.class);
        Iterator result = memberStore.getAllMembers();
        assertNull("result", result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetCardinalityWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.size(), 0);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getCardinality();
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetCountWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.size(), 0);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getCount();
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMaxValueWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        Mockingbird.enterTestMode(MemberStore.class);
        long result = memberStore.getMaxValue();
        assertEquals("result", 0L, result);
    }
    
    public void testGetMemberByIDWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.get(0), null);
        Mockingbird.enterTestMode(MemberStore.class);
        Member result = memberStore.getMemberByID(0);
        assertNull("result", result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMemberIdWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getMemberId(null);
        assertEquals("result", 0, result);
        assertNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMemberIdWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        char[] chars = new char[0];
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects = new Object[1];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects2 = new Object[1];
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member3 = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects3 = new Object[1];
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.enterNormalMode();
        member.setAttributes(objects);
        objects[0] = obj;
        member2.setAttributes(objects2);
        objects2[0] = obj2;
        member3.setAttributes(objects3);
        objects3[0] = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(int2ObjectMap.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), member);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), member2);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry5);
        Mockingbird.setReturnValue(entry5.getValue(), member3);
        Mockingbird.setReturnValue(entry5.getKey(), new Integer(0));
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getMemberId("", false);
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMemberIdWithAggressiveMocks2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        char[] chars = new char[0];
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars2 = new char[0];
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars3 = new char[0];
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)-1));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        member.name = chars2;
        member2.name = chars3;
        Mockingbird.setReturnValue(int2ObjectMap.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), member);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), member2);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getMemberId("", false);
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMemberIdWithAggressiveMocks3() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        char[] chars = new char[0];
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars2 = new char[0];
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars3 = new char[0];
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        member.name = chars2;
        member2.name = chars3;
        Mockingbird.setReturnValue(int2ObjectMap.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), member);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), member2);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getMemberId("", true);
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetMembersByIDWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        Mockingbird.setReturnValue(int2ObjectMap.get(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        Mockingbird.setReturnValue(int2ObjectMap.get(0), member);
        Mockingbird.setReturnValue(arrayList.add(member), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        Mockingbird.setReturnValue(int2ObjectMap.get(0), member2);
        Mockingbird.setReturnValue(arrayList.add(member2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        Mockingbird.setReturnValue(int2ObjectMap.get(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        List result = memberStore.getMembersByID((List) list);
        assertNotNull("result", result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetNameColIndexWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        Mockingbird.enterTestMode(MemberStore.class);
        byte result = memberStore.getNameColIndex();
        assertEquals("result", (byte)0, result);
    }
    
    public void testGetOnlyMemberIdWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getOnlyMemberId(null);
        assertEquals("result", 0, result);
        assertNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetOnlyMemberIdWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        char[] chars = new char[0];
        ObjectSet objectSet = (ObjectSet) Mockingbird.getProxyObject(ObjectSet.class);
        ObjectIterator objectIterator = (ObjectIterator) Mockingbird.getProxyObject(ObjectIterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars2 = new char[0];
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        char[] chars3 = new char[0];
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        member.name = chars2;
        member2.name = chars3;
        Mockingbird.setReturnValue(int2ObjectMap.entrySet(), objectSet);
        Mockingbird.setReturnValue(objectSet.iterator(), objectIterator);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), member);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), member2);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(char[],char[])boolean", boolean2, 1);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), true);
        Mockingbird.setReturnValue(objectIterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), null);
        Mockingbird.setReturnValue(objectIterator.hasNext(), false);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getOnlyMemberId("");
        assertEquals("result", 0, result);
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testGetRolapLevelWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "rolapLevel", null);
        Mockingbird.enterTestMode(MemberStore.class);
        RolapLevel result = memberStore.getRolapLevel();
        assertNull("result", result);
    }
    
    public void testGetSortMembersWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortOrderIndex", ints);
        Mockingbird.enterTestMode(MemberStore.class);
        int[] result = memberStore.getSortMembers(0, 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetSortOrderSizeWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortOrderIndex", ints);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getSortOrderSize();
        assertEquals("result", 0, result);
    }
    
    public void testGetSortedIndexWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getSortedIndex(0);
        assertEquals("result", -1, result);
    }
    
    public void testGetSortedIndexWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[0];
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        setPrivateField(memberStore, "minMember", new Integer(0));
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getSortedIndex(-1);
        assertEquals("result", -1, result);
    }
    
    public void testGetSortedIndexWithAggressiveMocks2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        int[] ints = new int[1];
        setPrivateField(memberStore, "minMember", new Integer(-1));
        setPrivateField(memberStore, "sortReverseOrderIndex", ints);
        ints[0] = 0;
        Mockingbird.enterTestMode(MemberStore.class);
        int result = memberStore.getSortedIndex(0);
        assertEquals("result", 0, result);
    }
    
    public void testGetTableForMemberWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.enterTestMode(MemberStore.class);
        String result = memberStore.getTableForMember();
        assertEquals("result", "", result);
    }
    
    public void testMemberSortModelCompareToWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), true);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Comparable comparable2 = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), true);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        setPrivateField(comparable, "member", member);
        setPrivateField(comparable2, "member", member2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(member.toString(), "");
        Mockingbird.setReturnValue(member2.toString(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "compareTo", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel", "compareTo", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel")}, comparable, new Object[] {comparable2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testMemberSortModelEqualsWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel", "equals", new Class[] {Object.class}, comparable, new Object[] {null})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testMemberSortModelHashCodeWithAggressiveMocks() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), true);
        setPrivateField(comparable, "member", null);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel", "hashCode", new Class[] {}, comparable, new Object[] {})).intValue();
        assertEquals("result", 31, result);
    }
    
    public void testMemberSortModelHashCodeWithAggressiveMocks1() throws Throwable {
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"), true);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        setPrivateField(comparable, "member", member);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(member.toString(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "hashCode", "()int", new Integer(-5), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.MemberStore$MemberSortModel", "hashCode", new Class[] {}, comparable, new Object[] {})).intValue();
        assertEquals("result", 26, result);
    }
    
    public void testMergeStoreWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, int2ObjectMap, "putAll", "(java.util.Map)void", null, 1);
        setPrivateField(memberStore2, "maxMember", new Integer(1));
        setPrivateField(memberStore2, "cache", null);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.mergeStore(memberStore2);
        assertEquals("memberStore.getMaxValue()", 1L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testMergeStoreWithAggressiveMocks1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        setPrivateField(memberStore, "maxMember", new Integer(0));
        setPrivateField(memberStore, "cache", int2ObjectMap);
        setPrivateField(memberStore2, "maxMember", new Integer(0));
        setPrivateField(memberStore2, "cache", null);
        Mockingbird.enterRecordingMode();
        int2ObjectMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.mergeStore(memberStore2);
        assertEquals("memberStore.getMaxValue()", 0L, memberStore.getMaxValue());
        assertNotNull("memberStore.cache", getPrivateField(memberStore, "cache"));
    }
    
    public void testSetLevelNameWithAggressiveMocks() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class, true);
        Mockingbird.enterTestMode(MemberStore.class);
        memberStore.setLevelName("");
        assertEquals("memberStore.getLevelName()", "", memberStore.getLevelName());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new MemberStore(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.class, ex);
        }
    }
}

