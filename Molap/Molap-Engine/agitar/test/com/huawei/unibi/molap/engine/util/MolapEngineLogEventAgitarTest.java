/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:03:44 PM
 * Time to generate: 00:13.443 seconds
 *
 */

package com.huawei.unibi.molap.engine.util;

import com.agitar.lib.junit.AgitarTestCase;

public class MolapEngineLogEventAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapEngineLogEvent.class;
    }
    
    public void testGetEventCode() throws Throwable {
        String result = MolapEngineLogEvent.UNIBI_MOLAPENGINE_MSG.getEventCode();
        assertEquals("result", "molap.engine", result);
    }
    
    public void testGetModuleName() throws Throwable {
        String result = MolapEngineLogEvent.UNIBI_MOLAPENGINE_MSG.getModuleName();
        assertEquals("result", "MOLAP_ENGINE", result);
    }
    
    public void testValues() throws Throwable {
        MolapEngineLogEvent[] result = MolapEngineLogEvent.values();
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", MolapEngineLogEvent.UNIBI_MOLAPENGINE_MSG, result[0]);
    }
    
    public void testValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            MolapEngineLogEvent.valueOf("testMolapEngineLogEventParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.unibi.molap.engine.util.MolapEngineLogEvent.testMolapEngineLogEventParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testValueOfThrowsNullPointerException() throws Throwable {
        try {
            MolapEngineLogEvent.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
}

