/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:11:12 PM
 * Time to generate: 01:30.180 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.filters.InMemFilterModel;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.MolapMetadata;

public class SliceExecutionInfoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SliceExecutionInfo.class;
    }
    
    public void testConstructor() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        assertNull("sliceExecutionInfo.getTableName()", sliceExecutionInfo.getTableName());
    }
    
    public void testCloneWithAggressiveMocks() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(Object.class, "clone", "()java.lang.Object", null, 1);
        Mockingbird.enterTestMode(SliceExecutionInfo.class);
        Object result = sliceExecutionInfo.clone();
        assertNotNull("result", result);
    }
    
    public void testSetConstraints() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        sliceExecutionInfo.setConstraints(null);
        assertNull("sliceExecutionInfo.getConstraints()", sliceExecutionInfo.getConstraints());
    }
    
    public void testSetEndKey() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        long[] endKey = new long[3];
        sliceExecutionInfo.setEndKey(endKey);
        assertSame("sliceExecutionInfo.getEndKey()", endKey, sliceExecutionInfo.getEndKey());
    }
    
    public void testSetFilterModel() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[2][];
        InMemFilterModel filterModel = new InMemFilterModel(filter, maxKey, 100);
        sliceExecutionInfo.setFilterModel(filterModel);
        assertSame("sliceExecutionInfo.getFilterModel()", filterModel, sliceExecutionInfo.getFilterModel());
    }
    
    public void testSetKeyGenerator() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        int[] lens = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        sliceExecutionInfo.setKeyGenerator(keyGenerator);
        assertSame("sliceExecutionInfo.getKeyGenerator()", keyGenerator, sliceExecutionInfo.getKeyGenerator());
    }
    
    public void testSetMaskedByteRanges() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        int[] maskedByteRanges = new int[3];
        sliceExecutionInfo.setMaskedByteRanges(maskedByteRanges);
        assertSame("sliceExecutionInfo.getMaskedByteRanges()", maskedByteRanges, sliceExecutionInfo.getMaskedByteRanges());
    }
    
    public void testSetMaskedKeyByteSize() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        sliceExecutionInfo.setMaskedKeyByteSize(100);
        assertEquals("sliceExecutionInfo.getMaskedKeyByteSize()", 100, sliceExecutionInfo.getMaskedKeyByteSize());
    }
    
    public void testSetMaxKeyBasedOnDimensions() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        byte[] maxKeyBasedOnDimensions = new byte[1];
        sliceExecutionInfo.setMaxKeyBasedOnDimensions(maxKeyBasedOnDimensions);
        assertSame("sliceExecutionInfo.getMaxKeyBasedOnDimensions()", maxKeyBasedOnDimensions, sliceExecutionInfo.getMaxKeyBasedOnDimensions());
    }
    
    public void testSetMeasureOrdinal() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        int[] ints = new int[0];
        sliceExecutionInfo.setMeasureOrdinal(ints);
        assertEquals("sliceExecutionInfo.getMeasureOrdinal().length", 0, sliceExecutionInfo.getMeasureOrdinal().length);
    }
    
    public void testSetMsrsExists() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        boolean[] booleans = new boolean[0];
        sliceExecutionInfo.setMsrsExists(booleans);
        assertEquals("sliceExecutionInfo.getMsrsExists().length", 0, sliceExecutionInfo.getMsrsExists().length);
    }
    
    public void testSetNewMeasureDftValue() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        double[] newMeasureDftValue = new double[3];
        sliceExecutionInfo.setNewMeasureDftValue(newMeasureDftValue);
        assertSame("sliceExecutionInfo.getNewMeasureDftValue()", newMeasureDftValue, sliceExecutionInfo.getNewMeasureDftValue());
    }
    
    public void testSetNewMeasures() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        MolapMetadata.Measure[] newMeasures = new MolapMetadata.Measure[1];
        sliceExecutionInfo.setNewMeasures(newMeasures);
        assertSame("sliceExecutionInfo.getNewMeasures()", newMeasures, sliceExecutionInfo.getNewMeasures());
    }
    
    public void testSetQueryDimensions() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        sliceExecutionInfo.setQueryDimensions(dimensions);
        assertEquals("sliceExecutionInfo.getQueryDimensions().length", 0, sliceExecutionInfo.getQueryDimensions().length);
    }
    
    public void testSetQueryMsrs() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        sliceExecutionInfo.setQueryMsrs(measures);
        assertEquals("sliceExecutionInfo.getQueryMsrs().length", 0, sliceExecutionInfo.getQueryMsrs().length);
    }
    
    public void testSetSlice() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        sliceExecutionInfo.setSlice(null);
        assertNull("sliceExecutionInfo.getSlice()", sliceExecutionInfo.getSlice());
    }
    
    public void testSetStartKey() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        long[] startKey = new long[3];
        sliceExecutionInfo.setStartKey(startKey);
        assertSame("sliceExecutionInfo.getStartKey()", startKey, sliceExecutionInfo.getStartKey());
    }
    
    public void testSetTableName() throws Throwable {
        SliceExecutionInfo sliceExecutionInfo = new SliceExecutionInfo();
        sliceExecutionInfo.setTableName("");
        assertEquals("sliceExecutionInfo.getTableName()", "", sliceExecutionInfo.getTableName());
    }
}

