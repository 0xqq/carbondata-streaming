/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:50:23 PM
 * Time to generate: 00:42.080 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage.tree;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.MeasureDataWrapper;
import com.huawei.unibi.molap.datastorage.store.NodeKeyStore;
import com.huawei.unibi.molap.datastorage.store.NodeMeasureDataStore;
import com.huawei.unibi.molap.datastorage.store.StoreFactory;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.impl.CompressedDataMeasureDataWrapper;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.datastorage.store.impl.data.compressed.AbstractHeavyCompressedDoubleArrayDataStore;
import com.huawei.unibi.molap.datastorage.store.impl.key.compressed.AbstractCompressedSingleArrayStore;
import com.huawei.unibi.molap.engine.datastorage.Pair;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.metadata.LeafNodeInfo;
import java.io.File;

public class CSBTreeLeafNodeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CSBTreeLeafNode.class;
    }
    
    public void testConstructor() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
        assertNull("cSBTreeLeafNode.getNext()", cSBTreeLeafNode.getNext());
    }
    
    public void testConstructor1() throws Throwable {
        int[] measureLength = new int[2];
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        leafNodeInfo.setMeasureLength(measureLength);
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testCSBTreeLeafNodeMeasureMetaDataFileLocation", 100);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(), leafNodeInfo, compressionModel);
        assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)100, actual);
        assertNull("cSBTreeLeafNode.getNext()", cSBTreeLeafNode.getNext());
    }
    
    public void testAddEntry() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 0, 1, true);
        byte[] key = new byte[1];
        double[] value = new double[1];
        cSBTreeLeafNode.addEntry((Pair) new Pair(key, value));
        assertEquals("cSBTreeLeafNode.nKeys", 1, cSBTreeLeafNode.nKeys);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
    }
    
    public void testGetBackKeyArray() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, 100, 1000, false);
        byte[] result = cSBTreeLeafNode.getBackKeyArray(new FileHolderImpl());
        assertEquals("result.length", 0, result.length);
        assertSame("cSBTreeLeafNode.keyStore.getWritableKeyArray()", result, cSBTreeLeafNode.keyStore.getWritableKeyArray());
    }
    
    public void testGetBackKeyArray1() throws Throwable {
        FileHolder fileHolder = new FileHolderImpl(100);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, false);
        byte[] result = cSBTreeLeafNode.getBackKeyArray(fileHolder);
        assertEquals("result.length", 100000, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
        assertSame("cSBTreeLeafNode.keyStore.getWritableKeyArray()", result, cSBTreeLeafNode.keyStore.getWritableKeyArray());
    }
    
    public void testGetChild() throws Throwable {
        CSBNode result = new CSBTreeLeafNode(100, 1000, 0, true).getChild(100);
        assertNull("result", result);
    }
    
    public void testGetKey() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, false);
        byte[] result = cSBTreeLeafNode.getKey(0, new FileHolderImpl());
        assertEquals("result.length", 1000, result.length);
        assertEquals("result[0]", (byte)0, result[0]);
        assertEquals("cSBTreeLeafNode.keyStore.getWritableKeyArray().length", 100000, cSBTreeLeafNode.keyStore.getWritableKeyArray().length);
    }
    
    public void testGetNextKeyValue() throws Throwable {
        KeyValue result = new CSBTreeLeafNode(100, 1000, 0, true).getNextKeyValue(100);
        assertNull("result", result);
    }
    
    public void testGetNodeMsrDataWrapper() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testCSBTreeLeafNodeMeasureMetaDataFileLocation", 100);
        int[] measureLength = new int[3];
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        leafNodeInfo.setMeasureLength(measureLength);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(), leafNodeInfo, compressionModel);
        int[] cols = new int[0];
        CompressedDataMeasureDataWrapper result = (CompressedDataMeasureDataWrapper) cSBTreeLeafNode.getNodeMsrDataWrapper(cols, new FileHolderImpl());
        assertNotNull("result", result);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)100, actual);
    }
    
    public void testGetNodeMsrDataWrapper1() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        int[] cols = new int[0];
        MeasureDataWrapper result = cSBTreeLeafNode.getNodeMsrDataWrapper(cols, new FileHolderImpl());
        assertNull("result", result);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
    }
    
    public void testGetValue() throws Throwable {
        double[] result = new CSBTreeLeafNode(100, 1000, 0, true).getValue(100);
        assertNull("result", result);
    }
    
    public void testGetValueSize() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        short result = cSBTreeLeafNode.getValueSize();
        assertEquals("result", (short)0, result);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
    }
    
    public void testGetValueSize1() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testCSBTreeLeafNodeMeasureMetaDataFileLocation", 100);
        int[] measureLength = new int[3];
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        leafNodeInfo.setMeasureLength(measureLength);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(), leafNodeInfo, compressionModel);
        short result = cSBTreeLeafNode.getValueSize();
        assertEquals("result", (short)100, result);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)100, actual);
    }
    
    public void testGetnKeys() throws Throwable {
        int result = new CSBTreeLeafNode(100, 1000, 0, true).getnKeys();
        assertEquals("result", 0, result);
    }
    
    public void testGetnKeys1() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, 100, 1000, true);
        cSBTreeLeafNode.setnKeys(100);
        int result = cSBTreeLeafNode.getnKeys();
        assertEquals("result", 100, result);
    }
    
    public void testIsLeafNode() throws Throwable {
        boolean result = new CSBTreeLeafNode(100, 1000, 0, true).isLeafNode();
        assertTrue("result", result);
    }
    
    public void testRemoveLastEntry() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        cSBTreeLeafNode.removeLastEntry();
        assertEquals("cSBTreeLeafNode.nKeys", -1, cSBTreeLeafNode.nKeys);
    }
    
    public void testSetChildren() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        CSBNode[] children = new CSBNode[0];
        cSBTreeLeafNode.setChildren(children);
        assertEquals("cSBTreeLeafNode.getnKeys()", 0, cSBTreeLeafNode.getnKeys());
    }
    
    public void testSetFirstEntry() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 0, 1, true);
        byte[] key = new byte[43];
        double[] value = new double[5];
        cSBTreeLeafNode.setFirstEntry(key, value);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
    }
    
    public void testSetKey() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        byte[] key = new byte[2];
        cSBTreeLeafNode.setKey(100, key);
        assertEquals("cSBTreeLeafNode.getnKeys()", 0, cSBTreeLeafNode.getnKeys());
    }
    
    public void testSetNext() throws Throwable {
        CSBNode nextNode = new CSBTreeLeafNode(100, 1000, 0, true);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(1000, 0, 1, false);
        cSBTreeLeafNode.setNext(nextNode);
        assertSame("cSBTreeLeafNode.getNext()", nextNode, cSBTreeLeafNode.getNext());
    }
    
    public void testSetNextNode() throws Throwable {
        CSBNode nextNode = new CSBTreeLeafNode(100, 1000, 0, true);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(1000, 0, 1, false);
        cSBTreeLeafNode.setNextNode(nextNode);
        assertSame("cSBTreeLeafNode.getNext()", nextNode, cSBTreeLeafNode.getNext());
    }
    
    public void testSetnKeys() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, 0, true);
        cSBTreeLeafNode.setnKeys(100);
        assertEquals("cSBTreeLeafNode.nKeys", 100, cSBTreeLeafNode.nKeys);
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            new CSBTreeLeafNode(100, 1000, -1, true);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException1() throws Throwable {
        try {
            new CSBTreeLeafNode(100, -1, 1000, true);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCompressedSingleArrayStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException2() throws Throwable {
        try {
            new CSBTreeLeafNode(100, -1, true, new FileHolderImpl(100), new LeafNodeInfo(), new ValueCompressionModel());
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCompressedSingleArrayStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CSBTreeLeafNode(100, 1000, false, new FileHolderImpl(), new LeafNodeInfo(), new ValueCompressionModel());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(100), null, new ValueCompressionModel());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTreeLeafNode.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        int[] measureLength = new int[3];
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        leafNodeInfo.setMeasureLength(measureLength);
        try {
            new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(), leafNodeInfo, new ValueCompressionModel());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractHeavyCompressedDoubleArrayDataStore.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testCSBTreeLeafNodeMeasureMetaDataFileLocation", 100);
        try {
            new CSBTreeLeafNode(0, 100, true, new FileHolderImpl(), new LeafNodeInfo(), compressionModel);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTreeLeafNode.class, ex);
        }
    }
    
    public void testAddEntryThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore compressedSingleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(2, 0, true), compressedSingleArrayKeyInMemoryStore);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataInMemoryStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(2, 3), heavyCompressedDoubleArrayDataInMemoryStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(2, 0, 3, true);
        Pair entry = (Pair) Mockingbird.getProxyObject(Pair.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[3];
        bytes[0] = (byte)-84;
        bytes[1] = (byte)-68;
        bytes[2] = (byte)0;
        Mockingbird.setReturnValue(entry.getKey(), bytes);
        compressedSingleArrayKeyInMemoryStore.put(0, bytes);
        Mockingbird.setNormalReturnForVoid();
        double[] doubles = new double[0];
        Mockingbird.setReturnValue(entry.getValue(), doubles);
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.NodeMeasureDataStore", "put", new Class[] {int.class, Object.class}, heavyCompressedDoubleArrayDataInMemoryStore, new Object[] {new Integer(0), doubles});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.addEntry((Pair) entry);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
            assertSame("cSBTreeLeafNode.keyStore", compressedSingleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataInMemoryStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
    
    public void testAddEntryThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(0, 4, false), singleArrayKeyInMemoryStore);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(100, 1000), Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, 4, 100, false);
        Pair entry = (Pair) Mockingbird.getProxyObject(Pair.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[0];
        Mockingbird.setReturnValue(entry.getKey(), bytes);
        singleArrayKeyInMemoryStore.put(0, bytes);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.addEntry((Pair) entry);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
            short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
            assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
        }
    }
    
    public void testAddEntryThrowsNegativeArraySizeException() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(-100, 0, false), singleArrayKeyInMemoryStore);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataInMemoryStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(-100, 2), heavyCompressedDoubleArrayDataInMemoryStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-100, 0, 2, false);
        Pair entry = (Pair) Mockingbird.getProxyObject(Pair.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[3];
        bytes[0] = (byte)20;
        bytes[1] = (byte)-104;
        bytes[2] = (byte)46;
        Mockingbird.setReturnValue(entry.getKey(), bytes);
        singleArrayKeyInMemoryStore.put(0, bytes);
        Mockingbird.setNormalReturnForVoid();
        double[] doubles = new double[2];
        doubles[0] = 8.225302696228027;
        doubles[1] = 100.0;
        Mockingbird.setReturnValue(entry.getValue(), doubles);
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.NodeMeasureDataStore", "put", new Class[] {int.class, Object.class}, heavyCompressedDoubleArrayDataInMemoryStore, new Object[] {new Integer(0), doubles});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NegativeArraySizeException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.addEntry((Pair) entry);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataInMemoryStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
    
    public void testAddEntryThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        LeafNodeInfo leafNodeInfo = (LeafNodeInfo) Mockingbird.getProxyObject(LeafNodeInfo.class);
        ValueCompressionModel compressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(leafNodeInfo.getNumberOfKeys(), 0);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyOffset(), 0L);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyLength(), 0);
        NodeKeyStore compressedSingleArrayKeyFileStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(-1, 0, true, true, 0L, "", 0, fileHolder), compressedSingleArrayKeyFileStore);
        int[] ints = new int[3];
        ints[0] = 56;
        ints[1] = 46;
        ints[2] = 3;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        long[] longs = new long[0];
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureOffset(), longs);
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataFileStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        NodeMeasureDataStore dataStore = StoreFactory.createDataStore(-1, 3, true, compressionModel, longs, ints, "", fileHolder);
        Mockingbird.setReturnValue(dataStore, heavyCompressedDoubleArrayDataFileStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-1, 0, true, fileHolder, leafNodeInfo, compressionModel);
        Pair entry = (Pair) Mockingbird.getProxyObject(Pair.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[1];
        bytes[0] = (byte)-43;
        Mockingbird.setReturnValue(entry.getKey(), bytes);
        compressedSingleArrayKeyFileStore.put(0, bytes);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.addEntry((Pair) entry);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cSBTreeLeafNode.nKeys", 0, cSBTreeLeafNode.nKeys);
            assertSame("cSBTreeLeafNode.keyStore", compressedSingleArrayKeyFileStore, cSBTreeLeafNode.keyStore);
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataFileStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
    
    public void testGetBackKeyArrayThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        LeafNodeInfo leafNodeInfo = (LeafNodeInfo) Mockingbird.getProxyObject(LeafNodeInfo.class);
        ValueCompressionModel compressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(leafNodeInfo.getNumberOfKeys(), 0);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyOffset(), 21L);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyLength(), 0);
        NodeKeyStore compressedSingleArrayKeyFileStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(-17, -13, true, true, 21L, "", 0, fileHolder), compressedSingleArrayKeyFileStore);
        int[] ints = new int[1];
        ints[0] = 6;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        long[] longs = new long[1];
        longs[0] = -5L;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureOffset(), longs);
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        NodeMeasureDataStore dataStore = StoreFactory.createDataStore(-17, 1, true, compressionModel, longs, ints, "", fileHolder);
        Mockingbird.setReturnValue(dataStore, Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-17, -13, true, fileHolder, leafNodeInfo, compressionModel);
        FileHolderImpl fileHolder2 = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(compressedSingleArrayKeyFileStore.getBackArray(fileHolder2), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.getBackKeyArray(fileHolder2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("cSBTreeLeafNode.keyStore", compressedSingleArrayKeyFileStore, cSBTreeLeafNode.keyStore);
        }
    }
    
    public void testGetKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(0, 4, false), singleArrayKeyInMemoryStore);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(100, 1000), Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, 4, 100, false);
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(singleArrayKeyInMemoryStore.get(-2, fileHolder), (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.getKey(-2, fileHolder);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
        }
    }
    
    public void testGetKeyThrowsNegativeArraySizeException() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(0, -2, false), singleArrayKeyInMemoryStore);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(100, 1000), Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, -2, 100, false);
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(singleArrayKeyInMemoryStore.get(0, fileHolder), (Throwable) Mockingbird.getProxyObject(NegativeArraySizeException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.getKey(0, fileHolder);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
        }
    }
    
    public void testGetKeyThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        LeafNodeInfo leafNodeInfo = (LeafNodeInfo) Mockingbird.getProxyObject(LeafNodeInfo.class);
        ValueCompressionModel compressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(leafNodeInfo.getNumberOfKeys(), 0);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyOffset(), 21L);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyLength(), 0);
        NodeKeyStore compressedSingleArrayKeyFileStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(-17, -13, true, true, 21L, "", 0, fileHolder), compressedSingleArrayKeyFileStore);
        int[] ints = new int[1];
        ints[0] = 6;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        long[] longs = new long[1];
        longs[0] = -5L;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureOffset(), longs);
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        NodeMeasureDataStore dataStore = StoreFactory.createDataStore(-17, 1, true, compressionModel, longs, ints, "", fileHolder);
        Mockingbird.setReturnValue(dataStore, Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-17, -13, true, fileHolder, leafNodeInfo, compressionModel);
        FileHolderImpl fileHolder2 = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(compressedSingleArrayKeyFileStore.get(27, fileHolder2), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.getKey(27, fileHolder2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("cSBTreeLeafNode.keyStore", compressedSingleArrayKeyFileStore, cSBTreeLeafNode.keyStore);
        }
    }
    
    public void testGetNodeMsrDataWrapperThrowsArrayIndexOutOfBoundsException() throws Throwable {
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        LeafNodeInfo leafNodeInfo = (LeafNodeInfo) Mockingbird.getProxyObject(LeafNodeInfo.class);
        ValueCompressionModel compressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(leafNodeInfo.getNumberOfKeys(), 0);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyOffset(), 0L);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyLength(), 0);
        NodeKeyStore keyStore = StoreFactory.createKeyStore(100, 1000, true, false, 100L, "testCSBTreeLeafNodeParam6", 0, fileHolder);
        Mockingbird.setReturnValue(keyStore, Mockingbird.getProxyObject(NodeKeyStore.class));
        int[] ints = new int[3];
        ints[0] = 56;
        ints[1] = 46;
        ints[2] = 3;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        long[] longs = new long[0];
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureOffset(), longs);
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataFileStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        NodeMeasureDataStore dataStore = StoreFactory.createDataStore(-1, 3, true, compressionModel, longs, ints, "", fileHolder);
        Mockingbird.setReturnValue(dataStore, heavyCompressedDoubleArrayDataFileStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-1, 0, true, fileHolder, leafNodeInfo, compressionModel);
        int[] cols = new int[0];
        FileHolderImpl fileHolder2 = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(heavyCompressedDoubleArrayDataFileStore.getBackData(cols, fileHolder2), (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.getNodeMsrDataWrapper(cols, fileHolder2);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataFileStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
    
    public void testSetFirstEntryThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(0, 4, false), singleArrayKeyInMemoryStore);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(100, 1000), Mockingbird.getProxyObject(NodeMeasureDataStore.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(0, 4, 100, false);
        byte[] key = new byte[0];
        double[] value = new double[0];
        Mockingbird.enterRecordingMode();
        singleArrayKeyInMemoryStore.put(0, key);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.setFirstEntry(key, value);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
            short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
            assertEquals("cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
        }
    }
    
    public void testSetFirstEntryThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        NodeKeyStore singleArrayKeyInMemoryStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(23, 1, false), singleArrayKeyInMemoryStore);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataInMemoryStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        Mockingbird.setReturnValue(StoreFactory.createDataStore(23, 23), heavyCompressedDoubleArrayDataInMemoryStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(23, 1, 23, false);
        byte[] key = new byte[0];
        double[] value = new double[0];
        Mockingbird.enterRecordingMode();
        singleArrayKeyInMemoryStore.put(0, key);
        Mockingbird.setNormalReturnForVoid();
        callPrivateMethod("com.huawei.unibi.molap.datastorage.store.NodeMeasureDataStore", "put", new Class[] {int.class, Object.class}, heavyCompressedDoubleArrayDataInMemoryStore, new Object[] {new Integer(0), value});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.setFirstEntry(key, value);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertSame("cSBTreeLeafNode.keyStore", singleArrayKeyInMemoryStore, cSBTreeLeafNode.keyStore);
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataInMemoryStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
    
    public void testSetFirstEntryThrowsNullPointerException() throws Throwable {
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        LeafNodeInfo leafNodeInfo = (LeafNodeInfo) Mockingbird.getProxyObject(LeafNodeInfo.class);
        ValueCompressionModel compressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(leafNodeInfo.getNumberOfKeys(), 0);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyOffset(), 21L);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        Mockingbird.setReturnValue(leafNodeInfo.getKeyLength(), 0);
        NodeKeyStore compressedSingleArrayKeyFileStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Mockingbird.setReturnValue(StoreFactory.createKeyStore(-17, -13, true, true, 21L, "", 0, fileHolder), compressedSingleArrayKeyFileStore);
        int[] ints = new int[1];
        ints[0] = 6;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        long[] longs = new long[1];
        longs[0] = -5L;
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureOffset(), longs);
        Mockingbird.setReturnValue(leafNodeInfo.getMeasureLength(), ints);
        Mockingbird.setReturnValue(leafNodeInfo.getFileName(), null);
        NodeMeasureDataStore heavyCompressedDoubleArrayDataFileStore = (NodeMeasureDataStore) Mockingbird.getProxyObject(NodeMeasureDataStore.class);
        NodeMeasureDataStore dataStore = StoreFactory.createDataStore(-17, 1, true, compressionModel, longs, ints, "", fileHolder);
        Mockingbird.setReturnValue(dataStore, heavyCompressedDoubleArrayDataFileStore);
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        CSBTreeLeafNode cSBTreeLeafNode = new CSBTreeLeafNode(-17, -13, true, fileHolder, leafNodeInfo, compressionModel);
        byte[] key = new byte[0];
        double[] value = new double[0];
        Mockingbird.enterRecordingMode();
        compressedSingleArrayKeyFileStore.put(0, key);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CSBTreeLeafNode.class);
        try {
            cSBTreeLeafNode.setFirstEntry(key, value);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("cSBTreeLeafNode.keyStore", compressedSingleArrayKeyFileStore, cSBTreeLeafNode.keyStore);
            assertSame("cSBTreeLeafNode.dataStore", heavyCompressedDoubleArrayDataFileStore, getPrivateField(cSBTreeLeafNode, "dataStore"));
        }
    }
}

