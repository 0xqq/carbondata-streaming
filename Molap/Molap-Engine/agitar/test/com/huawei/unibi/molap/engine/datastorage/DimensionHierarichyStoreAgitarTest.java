/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:52:32 PM
 * Time to generate: 01:36.683 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import mondrian.olap.DimensionType;
import mondrian.olap.Hierarchy;
import mondrian.olap.Level;
import mondrian.olap.MondrianDef;
import mondrian.olap.Schema;
import mondrian.olap.Util;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapCubeDimension;
import mondrian.rolap.RolapCubeHierarchy;
import mondrian.rolap.RolapDimension;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.RolapSchema;
import mondrian.spi.Dialect;

public class DimensionHierarichyStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DimensionHierarichyStore.class;
    }
    
    public void testConstructor() throws Throwable {
        Map membersCache = new HashMap(100, 100.0F);
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        assertSame("dimensionHierarichyStore.membersCache", membersCache, getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertEquals("dimensionHierarichyStore.getCubeName()", "testDimensionHierarichyStoreCubeName", dimensionHierarichyStore.getCubeName());
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testConstructor1() throws Throwable {
        RolapSchema rolapSchema = (RolapSchema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testDimensionHierarichyStoreKey", new Util.PropertyList(), Mockingbird.getProxyObject(DataSource.class), "testDimensionHierarichyStoreMd5Bytes"});
        MondrianDef.CubeDimension[] virtualCubeDimensions = new MondrianDef.VirtualCubeDimension[0];
        RolapCube rolapCube = (RolapCube) callPrivateMethod("mondrian.rolap.RolapCube", "<init>", new Class[] {RolapSchema.class, MondrianDef.Schema.class, String.class, boolean.class, String.class, String.class, boolean.class, MondrianDef.Relation.class, MondrianDef.CubeDimension[].class, boolean.class, String.class, Map.class}, null, new Object[] {rolapSchema, new MondrianDef.Schema(), "testDimensionHierarichyStoreName", Boolean.TRUE, "testDimensionHierarichyStoreCaption", "testDimensionHierarichyStoreDescription", Boolean.FALSE, null, virtualCubeDimensions, Boolean.TRUE, "testDimensionHierarichyStoreMode", new HashMap(100, 100.0F)});
        MondrianDef.Hierarchy[] hierarchys = new MondrianDef.Hierarchy[0];
        MondrianDef.Dimension dimension = new MondrianDef.Dimension();
        dimension.name = "2E){&rlkbvb/j)R}&+4r";
        dimension.hierarchies = hierarchys;
        Boolean boolean2 = Boolean.TRUE;
        dimension.highCardinality = boolean2;
        dimension.visible = boolean2;
        RolapDimension dimension2 = (RolapDimension) callPrivateMethod("mondrian.rolap.RolapDimension", "<init>", new Class[] {RolapSchema.class, RolapCube.class, MondrianDef.Dimension.class, MondrianDef.CubeDimension.class}, null, new Object[] {rolapSchema, rolapCube, dimension, new MondrianDef.Dimension()});
        Map membersCache = new HashMap(1000, 1000.0F);
        callPrivateMethod("mondrian.rolap.RolapDimension", "newHierarchy", new Class[] {String.class, boolean.class, RolapHierarchy.class}, dimension2, new Object[] {"testDimensionHierarichyStoreSubName", Boolean.TRUE, null});
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension2, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        assertSame("dimensionHierarichyStore.membersCache", membersCache, getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertEquals("dimensionHierarichyStore.getCubeName()", "testDimensionHierarichyStoreCubeName", dimensionHierarichyStore.getCubeName());
        assertEquals("dimensionHierarichyStore.hiers.size()", 1, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testConstructor2() throws Throwable {
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        Hierarchy[] hierarchys = new Hierarchy[2];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapDimension, "hierarchies", hierarchys);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        hierarchys[0] = rolapHierarchy;
        hierarchys[1] = rolapHierarchy2;
        setPrivateField(rolapHierarchy, "subName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy2, "subName", "");
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        Mockingbird.ignoreConstructorExceptions(HierarchyStore.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.ignoreConstructorExceptions(HierarchyStore.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Mockingbird.replaceObjectForRecording(MemberStore.class, "<init>(mondrian.rolap.RolapLevel)", memberStore);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Mockingbird.replaceObjectForRecording(MemberStore.class, "<init>(mondrian.rolap.RolapLevel)", memberStore2);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(memberStore2, "columnName", "");
        Mockingbird.enterTestMode();
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(rolapDimension, map, "", "");
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertEquals("dimensionHierarichyStore.getCubeName()", "", dimensionHierarichyStore.getCubeName());
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testConstructor3() throws Throwable {
        RolapDimension rolapDimension = (RolapDimension) Mockingbird.getProxyObject(RolapDimension.class);
        Hierarchy[] hierarchys = new Hierarchy[2];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapDimension, "hierarchies", hierarchys);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        hierarchys[0] = rolapHierarchy;
        hierarchys[1] = rolapHierarchy2;
        setPrivateField(rolapHierarchy, "subName", null);
        setPrivateField(rolapHierarchy, "name", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy2, "subName", "");
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        Mockingbird.ignoreConstructorExceptions(HierarchyStore.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.ignoreConstructorExceptions(HierarchyStore.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Mockingbird.replaceObjectForRecording(MemberStore.class, "<init>(mondrian.rolap.RolapLevel)", memberStore);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Mockingbird.replaceObjectForRecording(MemberStore.class, "<init>(mondrian.rolap.RolapLevel)", memberStore2);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(memberStore2, "columnName", "");
        Mockingbird.enterTestMode();
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(rolapDimension, map, "", "");
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertEquals("dimensionHierarichyStore.getCubeName()", "", dimensionHierarichyStore.getCubeName());
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testGetCubeName() throws Throwable {
        Map membersCache = new HashMap(100, 100.0F);
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        String result = dimensionHierarichyStore.getCubeName();
        assertEquals("result", "testDimensionHierarichyStoreCubeName", result);
    }
    
    public void testGetHier() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        HierarchyStore result = dimensionHierarichyStore.getHier("testDimensionHierarichyStoreHier");
        assertNull("result", result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testGetHier1() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        HierarchyStore hiers = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        dimensionHierarichyStore.setHiers("testDimensionHierarichyStoreHierName", hiers);
        Mockingbird.enterRecordingMode();
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", hierarchyStore, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        HierarchyStore result = dimensionHierarichyStore.getHier("testDimensionHierarichyStoreHier");
        assertSame("result", hierarchyStore, result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testGetMemberCache() throws Throwable {
        Schema rolapSchema = (Schema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testDimensionHierarichyStoreKey", new Util.PropertyList(), Mockingbird.getProxyObject(DataSource.class), "testDimensionHierarichyStoreMd5Bytes"});
        Map membersCache = new HashMap(100, 100.0F);
        RolapDimension dimension = (RolapDimension) callPrivateMethod("mondrian.rolap.RolapDimension", "<init>", new Class[] {Schema.class, String.class, String.class, boolean.class, String.class, DimensionType.class, boolean.class, Map.class}, null, new Object[] {rolapSchema, "testDimensionHierarichyStoreName", "testDimensionHierarichyStoreCaption", Boolean.TRUE, "testDimensionHierarichyStoreDescription", DimensionType.StandardDimension, Boolean.FALSE, new HashMap(1000, 1000.0F)});
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        MemberStore result = dimensionHierarichyStore.getMemberCache("testDimensionHierarichyStoreLevelName");
        assertNull("result", result);
        assertSame("dimensionHierarichyStore.membersCache", membersCache, getPrivateField(dimensionHierarichyStore, "membersCache"));
    }
    
    public void testProcessCacheFromFileStore() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        HierarchyStore hiers = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        dimensionHierarichyStore.setHiers("testDimensionHierarichyStoreHierName", hiers);
        Mockingbird.enterRecordingMode();
        Collection abstractCollection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.setReturnValue(false, hashMap, "values", "()java.util.Collection", abstractCollection, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractCollection, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, hierarchyStore, 1);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.setReturnValue(hierarchyStore.getRolapHierarchy(), rolapHierarchy);
        RolapLevel[] rolapLevels = new RolapLevel[1];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels[0] = rolapLevel;
        Mockingbird.setReturnValue(rolapHierarchy.getLevels(), rolapLevels);
        Mockingbird.setReturnValue(rolapLevel.isAll(), true);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, hiers, 1);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.setReturnValue(hiers.getRolapHierarchy(), rolapHierarchy2);
        RolapLevel[] rolapLevels2 = new RolapLevel[1];
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels2[0] = rolapLevel2;
        Mockingbird.setReturnValue(rolapHierarchy2.getLevels(), rolapLevels2);
        Mockingbird.setReturnValue(rolapLevel2.isAll(), true);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromFileStore("testDimensionHierarichyStoreFileStore");
        assertTrue("result", result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testProcessCacheFromFileStore1() throws Throwable {
        Schema rolapSchema = (Schema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testDimensionHierarichyStoreKey", new Util.PropertyList(), Mockingbird.getProxyObject(DataSource.class), "testDimensionHierarichyStoreMd5Bytes"});
        RolapDimension dimension = (RolapDimension) callPrivateMethod("mondrian.rolap.RolapDimension", "<init>", new Class[] {Schema.class, String.class, String.class, boolean.class, String.class, DimensionType.class, boolean.class, Map.class}, null, new Object[] {rolapSchema, "testDimensionHierarichyStoreName", "testDimensionHierarichyStoreCaption", Boolean.TRUE, "testDimensionHierarichyStoreDescription", DimensionType.StandardDimension, Boolean.FALSE, new HashMap(1000, 1000.0F)});
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, new HashMap(100, 100.0F), "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromFileStore("testDimensionHierarichyStoreFileStore");
        assertTrue("result", result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testProcessCacheFromFileStoreWithAggressiveMocks() throws Throwable {
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Dialect.Datatype datatype = (Dialect.Datatype) Mockingbird.getProxyObject(Dialect.Datatype.class);
        setPrivateField(dimensionHierarichyStore, "hiers", map);
        setPrivateField(dimensionHierarichyStore, "membersCache", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(hierarchyStore2, "rolapHierarchy", rolapHierarchy2);
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        setPrivateField(rolapLevel2, "keyExp", column);
        setPrivateField(rolapLevel2, "datatype", datatype);
        column.name = "";
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.TRUE, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromFileStore("");
        assertTrue("result", result);
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        boolean actual = ((LogService) getPrivateField(DimensionHierarichyStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("dimensionHierarichyStoreDimensionHierarichyStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testProcessCacheFromFileStoreWithAggressiveMocks1() throws Throwable {
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Dialect.Datatype datatype = (Dialect.Datatype) Mockingbird.getProxyObject(Dialect.Datatype.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels3 = new Level[0];
        setPrivateField(dimensionHierarichyStore, "hiers", map);
        setPrivateField(dimensionHierarichyStore, "membersCache", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(hierarchyStore2, "rolapHierarchy", rolapHierarchy2);
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "datatype", datatype);
        setPrivateField(rolapLevel2, "datatype", datatype);
        column.name = "";
        setPrivateField(rolapLevel2, "keyExp", column2);
        column2.name = "";
        setPrivateField(hierarchyStore3, "rolapHierarchy", rolapHierarchy3);
        setPrivateField(rolapHierarchy3, "levels", levels3);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadHierarichyFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.HierarchyStore,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromFileStore("");
        assertTrue("result", result);
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        boolean actual = ((LogService) getPrivateField(DimensionHierarichyStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("dimensionHierarichyStoreDimensionHierarichyStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testProcessCacheFromFileStoreWithAggressiveMocks2() throws Throwable {
        storeStaticField(DimensionHierarichyStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels2 = new Level[0];
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels3 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Dialect.Datatype datatype = (Dialect.Datatype) Mockingbird.getProxyObject(Dialect.Datatype.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(dimensionHierarichyStore, "hiers", map);
        setPrivateField(dimensionHierarichyStore, "membersCache", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(hierarchyStore2, "rolapHierarchy", rolapHierarchy2);
        setPrivateField(rolapHierarchy2, "levels", levels2);
        setPrivateField(hierarchyStore3, "rolapHierarchy", rolapHierarchy3);
        setPrivateField(rolapHierarchy3, "levels", levels3);
        levels3[0] = rolapLevel;
        levels3[1] = rolapLevel2;
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "datatype", datatype);
        setPrivateField(rolapLevel2, "datatype", datatype);
        column.name = "";
        setPrivateField(rolapLevel2, "keyExp", column2);
        column2.name = "";
        setPrivateField(DimensionHierarichyStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setException(true, DimensionCacheLoader.class, "loadHierarichyFromFileStore", "(com.huawei.unibi.molap.engine.datastorage.HierarchyStore,java.lang.String)void", iOException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromFileStore("");
        assertFalse("result", result);
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertNotNull("dimensionHierarichyStoreDimensionHierarichyStore.LOGGER", getPrivateField(DimensionHierarichyStore.class, "LOGGER"));
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testProcessCacheFromSlice() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        HierarchyStore hiers = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        dimensionHierarichyStore.setHiers("testDimensionHierarichyStoreHierName", hiers);
        ArrayList slices = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Collection abstractCollection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Mockingbird.setReturnValue(false, hashMap, "values", "()java.util.Collection", abstractCollection, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractCollection, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, hierarchyStore, 1);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.setReturnValue(hierarchyStore.getRolapHierarchy(), rolapHierarchy);
        RolapLevel[] rolapLevels = new RolapLevel[1];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels[0] = rolapLevel;
        Mockingbird.setReturnValue(rolapHierarchy.getLevels(), rolapLevels);
        Mockingbird.setReturnValue(rolapLevel.isAll(), true);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, hiers, 1);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.setReturnValue(hiers.getRolapHierarchy(), rolapHierarchy2);
        RolapLevel[] rolapLevels2 = new RolapLevel[1];
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels2[0] = rolapLevel2;
        Mockingbird.setReturnValue(rolapHierarchy2.getLevels(), rolapLevels2);
        Mockingbird.setReturnValue(rolapLevel2.isAll(), true);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromSlice(slices, "testDimensionHierarichyStoreFileStore");
        assertTrue("result", result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testProcessCacheFromSlice1() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        boolean result = dimensionHierarichyStore.processCacheFromSlice((List) Mockingbird.getProxyObject(ArrayList.class), "testDimensionHierarichyStoreFileStore");
        assertTrue("result", result);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testProcessCacheFromSliceWithAggressiveMocks() throws Throwable {
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Dialect.Datatype datatype = (Dialect.Datatype) Mockingbird.getProxyObject(Dialect.Datatype.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        setPrivateField(dimensionHierarichyStore, "hiers", map);
        setPrivateField(dimensionHierarichyStore, "membersCache", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(hierarchyStore2, "rolapHierarchy", rolapHierarchy2);
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "datatype", datatype);
        column.name = "";
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromSlices", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.util.List,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromSlice(list, "");
        assertTrue("result", result);
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testProcessCacheFromSliceWithAggressiveMocks1() throws Throwable {
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Collection collection = (Collection) Mockingbird.getProxyObject(Collection.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[0];
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels2 = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Dialect.Datatype datatype = (Dialect.Datatype) Mockingbird.getProxyObject(Dialect.Datatype.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        DimensionHierarichyStore dimensionHierarichyStore3 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class, true);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels3 = new Level[0];
        setPrivateField(dimensionHierarichyStore, "hiers", map);
        setPrivateField(dimensionHierarichyStore, "membersCache", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.values(), collection);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(hierarchyStore2, "rolapHierarchy", rolapHierarchy2);
        setPrivateField(hierarchyStore2, "dimeName", "");
        Mockingbird.enterNormalMode();
        hierarchyStore2.setHierName("");
        setPrivateField(rolapHierarchy2, "levels", levels2);
        levels2[0] = rolapLevel;
        levels2[1] = rolapLevel2;
        setPrivateField(rolapLevel, "keyExp", column);
        setPrivateField(rolapLevel, "datatype", datatype);
        setPrivateField(rolapLevel2, "datatype", datatype);
        column.name = "";
        setPrivateField(rolapLevel2, "keyExp", column2);
        column2.name = "";
        setPrivateField(hierarchyStore3, "rolapHierarchy", rolapHierarchy3);
        setPrivateField(rolapHierarchy3, "levels", levels3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(collection.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromSlices", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.util.List,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadMemberFromSlices", "(com.huawei.unibi.molap.engine.datastorage.MemberStore,java.util.List,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(list.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore2, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", null, 1);
        Mockingbird.setReturnValue(arrayList3.add((Object) null), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore3, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore3, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", null, 1);
        Mockingbird.setReturnValue(arrayList3.add((Object) null), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "loadHierarchyFromSlice", "(com.huawei.unibi.molap.engine.datastorage.HierarchyStore,java.util.List,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        boolean result = dimensionHierarichyStore.processCacheFromSlice(list, "");
        assertTrue("result", result);
        assertNotNull("dimensionHierarichyStore.membersCache", getPrivateField(dimensionHierarichyStore, "membersCache"));
        assertNotNull("dimensionHierarichyStore.hiers", getPrivateField(dimensionHierarichyStore, "hiers"));
    }
    
    public void testSetHiers() throws Throwable {
        RolapCubeDimension dimension = (RolapCubeDimension) Mockingbird.getProxyObject(RolapCubeDimension.class);
        LinkedHashMap membersCache = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.enterRecordingMode();
        RolapCubeHierarchy[] rolapCubeHierarchys = new RolapCubeHierarchy[0];
        Mockingbird.setReturnValue(dimension.getHierarchies(), rolapCubeHierarchys);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        HierarchyStore hiers = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(DimensionHierarichyStore.class);
        dimensionHierarichyStore.setHiers("testDimensionHierarichyStoreHierName", hiers);
        assertEquals("dimensionHierarichyStore.hiers.size()", 0, ((Map) getPrivateField(dimensionHierarichyStore, "hiers")).size());
    }
    
    public void testGetMemberThrowsNullPointerException() throws Throwable {
        RolapDimension dimension = (RolapDimension) callPrivateMethod("mondrian.rolap.RolapDimension", "<init>", new Class[] {Schema.class, String.class, String.class, boolean.class, String.class, DimensionType.class, boolean.class, Map.class}, null, new Object[] {null, "testDimensionHierarichyStoreName", "testDimensionHierarichyStoreCaption", Boolean.TRUE, "testDimensionHierarichyStoreDescription", DimensionType.TimeDimension, Boolean.FALSE, new HashMap(100, 100.0F)});
        Map membersCache = new HashMap(1000, 1000.0F);
        DimensionHierarichyStore dimensionHierarichyStore = new DimensionHierarichyStore(dimension, membersCache, "testDimensionHierarichyStoreCubeName", "testDimensionHierarichyStoreSchemaName");
        try {
            dimensionHierarichyStore.getMember(100L, "testDimensionHierarichyStoreTableName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionHierarichyStore.class, ex);
            assertSame("dimensionHierarichyStore.membersCache", membersCache, getPrivateField(dimensionHierarichyStore, "membersCache"));
        }
    }
}

