/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:53:37 PM
 * Time to generate: 00:13.319 seconds
 *
 */

package com.huawei.unibi.molap.engine.filters;

import com.agitar.lib.junit.AgitarTestCase;

public class InMemFilterModelAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InMemFilterModel.class;
    }
    
    public void testConstructor() throws Throwable {
        InMemFilterModel inMemFilterModel = new InMemFilterModel();
        assertEquals("inMemFilterModel.getMaxSize()", 0, inMemFilterModel.getMaxSize());
        assertNull("inMemFilterModel.getFilter()", inMemFilterModel.getFilter());
        assertNull("inMemFilterModel.getMaxKey()", inMemFilterModel.getMaxKey());
    }
    
    public void testConstructor1() throws Throwable {
        byte[][] maxKey = new byte[1][];
        byte[][][] filter = new byte[3][][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        assertEquals("inMemFilterModel.getMaxSize()", 100, inMemFilterModel.getMaxSize());
        assertSame("inMemFilterModel.getFilter()", filter, inMemFilterModel.getFilter());
        assertSame("inMemFilterModel.getMaxKey()", maxKey, inMemFilterModel.getMaxKey());
    }
    
    public void testSetColExcludeDimOffset() throws Throwable {
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[3][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        int[] colExcludeDimOffset = new int[2];
        inMemFilterModel.setColExcludeDimOffset(colExcludeDimOffset);
        assertSame("inMemFilterModel.getColExcludeDimOffset()", colExcludeDimOffset, inMemFilterModel.getColExcludeDimOffset());
    }
    
    public void testSetColIncludeDimOffset() throws Throwable {
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[3][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        int[] colIncludeDimOffset = new int[1];
        inMemFilterModel.setColIncludeDimOffset(colIncludeDimOffset);
        assertSame("inMemFilterModel.getColIncludeDimOffset()", colIncludeDimOffset, inMemFilterModel.getColIncludeDimOffset());
    }
    
    public void testSetExcludeFilter() throws Throwable {
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[3][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        byte[][][] excludeFilter = new byte[2][][];
        inMemFilterModel.setExcludeFilter(excludeFilter);
        assertSame("inMemFilterModel.getExcludeFilter()", excludeFilter, inMemFilterModel.getExcludeFilter());
    }
    
    public void testSetExcludePredicateKeys() throws Throwable {
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[3][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        long[][] excludePredicateKeys = new long[0][];
        inMemFilterModel.setExcludePredicateKeys(excludePredicateKeys);
        assertSame("inMemFilterModel.getExcludePredicateKeys()", excludePredicateKeys, inMemFilterModel.getExcludePredicateKeys());
    }
    
    public void testSetIncludePredicateKeys() throws Throwable {
        byte[][][] filter = new byte[0][][];
        byte[][] maxKey = new byte[3][];
        InMemFilterModel inMemFilterModel = new InMemFilterModel(filter, maxKey, 100);
        long[][] includePredicateKeys = new long[2][];
        inMemFilterModel.setIncludePredicateKeys(includePredicateKeys);
        assertSame("inMemFilterModel.getIncludePredicateKeys()", includePredicateKeys, inMemFilterModel.getIncludePredicateKeys());
    }
}

