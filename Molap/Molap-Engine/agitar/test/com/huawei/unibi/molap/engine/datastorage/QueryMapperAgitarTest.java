/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:09:33 PM
 * Time to generate: 01:25.600 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class QueryMapperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return QueryMapper.class;
    }
    
    public void testConstructor() throws Throwable {
        new QueryMapper();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetActiveQueriesCount() throws Throwable {
        QueryMapper.getActiveQueriesCount("testQueryMapper\rCubeUniqueName");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetActiveQueriesCount1() throws Throwable {
        QueryMapper.getActiveQueriesCount("testQueryMapperCubeUniqueName");
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetQueriesPerSlice() throws Throwable {
        storeStaticField(QueryMapper.class, "executionMap");
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(QueryMapper.class, "executionMap", map);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(QueryMapper.class);
        QueryMapper.getQueriesPerSlice(inMemoryCube);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 3 assertions
    }
    
    public void testGetQueriesPerSlice1() throws Throwable {
        storeStaticField(QueryMapper.class, "executionMap");
        storeStaticField(QueryMapper.class, "executionToSlicesMap");
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(inMemoryCube, "id", new Long(0L));
        setPrivateField(QueryMapper.class, "executionMap", map);
        setPrivateField(QueryMapper.class, "executionToSlicesMap", map2);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", map3, 1);
        Mockingbird.setReturnValue(map3.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), list);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "contains", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), list2);
        Mockingbird.setReturnValue(false, list2, "contains", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), list3);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, list3, "contains", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(entry5.getValue(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), list4);
        Mockingbird.setReturnValue(false, list4, "contains", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(entry6.getValue(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(QueryMapper.class);
        List result = QueryMapper.getQueriesPerSlice(inMemoryCube);
        assertNotNull("result", result);
        assertNotNull("QueryMapper.executionToSlicesMap", getPrivateField(QueryMapper.class, "executionToSlicesMap"));
        assertNotNull("QueryMapper.executionMap", getPrivateField(QueryMapper.class, "executionMap"));
    }
    
    public void testGetSlicesForThread() throws Throwable {
        QueryMapper.getSlicesForThread(new Long(1L));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testGetSlicesForThread1() throws Throwable {
        storeStaticField(QueryMapper.class, "executionToSlicesMap");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        setPrivateField(QueryMapper.class, "executionToSlicesMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), obj);
        Mockingbird.setReturnValue(map.get(null), null);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(java.util.Collection)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterTestMode(QueryMapper.class);
        List result = QueryMapper.getSlicesForThread(null);
        assertNotNull("result", result);
        assertNotNull("QueryMapper.executionToSlicesMap", getPrivateField(QueryMapper.class, "executionToSlicesMap"));
    }
    
    public void testInvokeListeners() throws Throwable {
        storeStaticField(QueryMapper.class, "listeners");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(QueryMapper.class, "listeners", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), list);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.enterTestMode(QueryMapper.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.QueryMapper", "invokeListeners", new Class[] {Long.class}, null, new Object[] {null});
        assertNotNull("QueryMapper.listeners", getPrivateField(QueryMapper.class, "listeners"));
    }
    
    public void testInvokeListeners1() throws Throwable {
        storeStaticField(QueryMapper.class, "listeners");
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        SliceListener sliceListener = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener2 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener3 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener4 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        setPrivateField(QueryMapper.class, "listeners", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(null), list);
        Mockingbird.setReturnValue(list.size(), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener);
        sliceListener.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener.stillListening(), true);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener2);
        sliceListener2.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener2.stillListening(), false);
        Mockingbird.setReturnValue(arrayList.add(sliceListener2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener3);
        sliceListener3.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener3.stillListening(), false);
        Mockingbird.setReturnValue(arrayList.add(sliceListener3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener4);
        sliceListener4.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener4.stillListening(), true);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(list.removeAll(arrayList), false);
        Mockingbird.enterTestMode(QueryMapper.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.QueryMapper", "invokeListeners", new Class[] {Long.class}, null, new Object[] {null});
        assertNotNull("QueryMapper.listeners", getPrivateField(QueryMapper.class, "listeners"));
    }
    
    public void testQueryEnd() throws Throwable {
        QueryMapper.queryEnd("testString", 100L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testQueryEnd1() throws Throwable {
        QueryMapper.queryEnd("testQueryMapperCubeUniqueName", 100L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testQueryEnd2() throws Throwable {
        QueryMapper.queryEnd("testQueryMapperCubeUniqueName", 100L, true);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testQueryEnd3() throws Throwable {
        QueryMapper.queryEnd("testQueryMapperCubeUniqueName", 100L, false);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 2 assertions
    }
    
    public void testQueryEnd4() throws Throwable {
        QueryMapper.queryEnd("testQueryMapper\rCubeUniqueName", 100L, true);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testQueryEnd5() throws Throwable {
        storeStaticField(QueryMapper.class, "executionMap");
        storeStaticField(QueryMapper.class, "executionToSlicesMap");
        storeStaticField(QueryMapper.class, "listeners");
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        SliceListener sliceListener = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener2 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener3 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        SliceListener sliceListener4 = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(QueryMapper.class, "executionMap", map);
        setPrivateField(QueryMapper.class, "executionToSlicesMap", map2);
        setPrivateField(QueryMapper.class, "listeners", map3);
        Mockingbird.setReturnValue(false, thread, "getId", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", map4, 1);
        Mockingbird.setReturnValue(false, map4, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map3.get(null), list);
        Mockingbird.setReturnValue(list.size(), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener);
        sliceListener.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener.stillListening(), true);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener2);
        sliceListener2.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener2.stillListening(), false);
        Mockingbird.setReturnValue(arrayList.add(sliceListener2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener3);
        sliceListener3.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener3.stillListening(), false);
        Mockingbird.setReturnValue(arrayList.add(sliceListener3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), sliceListener4);
        sliceListener4.fireQueryFinish(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(sliceListener4.stillListening(), true);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), -1);
        Mockingbird.enterTestMode(QueryMapper.class);
        QueryMapper.queryEnd("", 0L, true);
        assertNotNull("QueryMapper.executionToSlicesMap", getPrivateField(QueryMapper.class, "executionToSlicesMap"));
        assertNotNull("QueryMapper.executionMap", getPrivateField(QueryMapper.class, "executionMap"));
    }
    
    public void testQueryStart() throws Throwable {
        QueryMapper.queryStart("", 100L);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 3 assertions
    }
    
    public void testQueryStart1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        Mockingbird.setReturnValue(thread.getId(), 21L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(21L)}, new Long(21L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "containsKey", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(QueryMapper.class);
        QueryMapper.queryStart("testQueryMapperCubeUniqueName", 100L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testQueryStart2() throws Throwable {
        storeStaticField(QueryMapper.class, "LOGGER");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(QueryMapper.class, "executionMap");
        storeStaticField(QueryMapper.class, "executionToSlicesMap");
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(QueryMapper.class, "executionMap", map);
        setPrivateField(QueryMapper.class, "executionToSlicesMap", map2);
        setPrivateField(QueryMapper.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, thread, "getId", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, map2, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(map.get(""), null);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findCache", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getActiveSliceIds", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(QueryMapper.class);
        QueryMapper.queryStart("", 0L);
        assertNotNull("QueryMapper.LOGGER", getPrivateField(QueryMapper.class, "LOGGER"));
        assertNotNull("QueryMapper.executionToSlicesMap", getPrivateField(QueryMapper.class, "executionToSlicesMap"));
        assertNotNull("QueryMapper.executionMap", getPrivateField(QueryMapper.class, "executionMap"));
    }
    
    public void testRegisterSliceListener() throws Throwable {
        SliceListener listener = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        Mockingbird.enterRecordingMode();
        Long long2 = new Long(-127L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(-127L)}, long2, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(-127L)}, long2, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ArrayList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(QueryMapper.class);
        QueryMapper.registerSliceListener(listener, 100L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRegisterSliceListener1() throws Throwable {
        QueryMapper.registerSliceListener(new SliceListener(null), 100L);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testQueryStartThrowsNullPointerException() throws Throwable {
        try {
            QueryMapper.queryStart("testQueryMapperCubeUniqueName", 100L, 1000L);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 4 assertions
        }
    }
    
    public void testQueryStartThrowsThrowable() throws Throwable {
        storeStaticField(QueryMapper.class, "executionToSlicesMap");
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(QueryMapper.class, "executionToSlicesMap", null);
        Mockingbird.setReturnValue(false, thread, "getId", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.enterTestMode(QueryMapper.class);
        try {
            QueryMapper.queryStart("", 0L);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
            // dependencies on static and environment state led to removal of 5 assertions
        }
    }
}

