/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:50:01 PM
 * Time to generate: 00:13.709 seconds
 *
 */

package com.huawei.unibi.molap.engine.aggregator.impl;

import com.agitar.lib.junit.AgitarTestCase;

public class CountAggregatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CountAggregator.class;
    }
    
    public void testConstructor() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        assertEquals("countAggregator.getValue()", 0.0, countAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        byte[] key = new byte[0];
        countAggregator.agg(100.0, key, 100, 1000);
        assertEquals("countAggregator.getValue()", 1.0, countAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg1() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        countAggregator.agg(100.0, 1000.0);
        assertEquals("countAggregator.getValue()", 1.0, countAggregator.getValue(), 1.0E-6);
    }
    
    public void testGetValue() throws Throwable {
        byte[] key = new byte[0];
        CountAggregator countAggregator = new CountAggregator();
        countAggregator.agg(100.0, key, 100, 1000);
        double result = countAggregator.getValue();
        assertEquals("result", 1.0, result, 1.0E-6);
    }
    
    public void testGetValue1() throws Throwable {
        double result = new CountAggregator().getValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetValueObject() throws Throwable {
        Double result = (Double) new CountAggregator().getValueObject();
        assertEquals("result", 0.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetValueObject1() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        byte[] key = new byte[0];
        countAggregator.agg(100.0, key, 100, 1000);
        Double result = (Double) countAggregator.getValueObject();
        assertEquals("result", 1.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testMerge() throws Throwable {
        CountAggregator aggregator = new CountAggregator();
        aggregator.merge(aggregator);
        assertEquals("aggregator.getValue()", 0.0, aggregator.getValue(), 1.0E-6);
    }
    
    public void testMergeThrowsClassCastException() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        try {
            countAggregator.merge(new MaxAggregator());
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(CountAggregator.class, ex);
            assertEquals("countAggregator.getValue()", 0.0, countAggregator.getValue(), 1.0E-6);
        }
    }
    
    public void testMergeThrowsNullPointerException() throws Throwable {
        CountAggregator countAggregator = new CountAggregator();
        try {
            countAggregator.merge(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CountAggregator.class, ex);
            assertEquals("countAggregator.getValue()", 0.0, countAggregator.getValue(), 1.0E-6);
        }
    }
}

