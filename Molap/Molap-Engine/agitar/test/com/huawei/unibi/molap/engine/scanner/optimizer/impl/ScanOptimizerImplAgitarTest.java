/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:09:19 PM
 * Time to generate: 00:30.811 seconds
 *
 */

package com.huawei.unibi.molap.engine.scanner.optimizer.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.keygenerator.KeyGenException;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.Bits;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;

public class ScanOptimizerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ScanOptimizerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        assertSame("scanOptimizerImpl.generator", keyGenerator, scanOptimizerImpl.generator);
        assertEquals("scanOptimizerImpl.endKey.length", 0, scanOptimizerImpl.endKey.length);
        assertSame("scanOptimizerImpl.maxKey", maxKey, scanOptimizerImpl.maxKey);
        assertSame("scanOptimizerImpl.filters", filters, scanOptimizerImpl.filters);
        assertNull("scanOptimizerImpl.nextEndKey", scanOptimizerImpl.nextEndKey);
    }
    
    public void testConstructor1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(ScanOptimizerImpl.class, "LOGGER");
        long[] longs = new long[0];
        long[][] longs2 = new long[0][0];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        KeyGenException keyGenException = (KeyGenException) Mockingbird.getProxyObject(KeyGenException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(ScanOptimizerImpl.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(keyGenerator.generateKey(longs), keyGenException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode();
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(longs, longs2, keyGenerator);
        assertNotNull("scanOptimizerImpl.generator", scanOptimizerImpl.generator);
        assertNotNull("scanOptimizerImplScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        assertNull("scanOptimizerImpl.endKey", scanOptimizerImpl.endKey);
        assertEquals("scanOptimizerImpl.maxKey.length", 0, scanOptimizerImpl.maxKey.length);
        assertEquals("scanOptimizerImpl.filters.length", 0, scanOptimizerImpl.filters.length);
        assertNull("scanOptimizerImpl.nextEndKey", scanOptimizerImpl.nextEndKey);
    }
    
    public void testCheckWithFilter() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[2];
        longs[0] = 67L;
        long[][] filters = new long[7][];
        filters[2] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[5];
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[2]", 67L, key[2]);
        assertEquals("result", 2, result);
    }
    
    public void testCheckWithFilter1() throws Throwable {
        long[] longs = new long[3];
        long[][] filters = new long[1][];
        filters[0] = longs;
        long[] key = new long[1];
        key[0] = 46L;
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter2() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[3];
        long[] longs2 = new long[2];
        longs2[0] = 67L;
        long[][] filters = new long[7][];
        filters[2] = longs2;
        filters[4] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[5];
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[2]", 67L, key[2]);
        assertEquals("result", 4, result);
    }
    
    public void testCheckWithFilter3() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[0];
        long[][] filters = new long[3][];
        filters[0] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter4() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[3];
        long[][] filters = new long[7][];
        filters[4] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[5];
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[4]", 1L, key[4]);
        assertEquals("result", 4, result);
    }
    
    public void testCheckWithFilter5() throws Throwable {
        long[] longs = new long[2];
        longs[0] = 56L;
        long[][] filters = new long[1][];
        filters[0] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = scanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 56L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testCompareTo() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[2];
        long[] longs2 = new long[5];
        longs2[0] = 100L;
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs, longs2})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testCompareTo1() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        byte[] byteKey = new byte[1];
        long[][] filters2 = new long[4][];
        long[] maxKey2 = new long[3];
        long[] key = new long[1];
        new ScanOptimizerImpl(maxKey2, filters2, keyGenerator).getNextKey(key, byteKey);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {key, maxKey2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCompareTo2() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[0];
        long[][] filters = new long[4][];
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs2 = new long[0];
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs2, longs})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCompareTo3() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[2];
        long[] longs2 = new long[5];
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs, longs2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testGetNextKey() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[0];
        long[][] filters = new long[3][];
        filters[0] = longs;
        long[] maxKey = new long[3];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        long[] key = new long[2];
        byte[] byteKey = new byte[0];
        byte[] result = scanOptimizerImpl.getNextKey(key, byteKey);
        assertEquals("scanOptimizerImpl.nextEndKey.length", 2, scanOptimizerImpl.nextEndKey.length);
        assertEquals("result.length", 0, result.length);
        assertSame("scanOptimizerImpl.generator", keyGenerator, scanOptimizerImpl.generator);
    }
    
    public void testGetNextKey1() throws Throwable {
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        long[] key = new long[1];
        scanOptimizerImpl.getNextKey(key, scanOptimizerImpl.endKey);
        long[] key2 = new long[0];
        byte[] byteKey = new byte[2];
        byte[] result = scanOptimizerImpl.getNextKey(key2, byteKey);
        assertNull("result", result);
        assertSame("scanOptimizerImpl.generator", keyGenerator, scanOptimizerImpl.generator);
        boolean actual = ((LogService) getPrivateField(ScanOptimizerImpl.class, "LOGGER")).isDebugEnabled();
        assertTrue("scanOptimizerImplScanOptimizerImpl.LOGGER.isDebugEnabled()", actual);
        assertEquals("scanOptimizerImpl.nextEndKey.length", 1, scanOptimizerImpl.nextEndKey.length);
    }
    
    public void testGetNextKey2() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 3;
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[3][];
        long[][] excludeFilters = new long[1][];
        ScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        byte[] byteKey = new byte[1];
        byteKey[0] = (byte)1;
        long[] key = new long[2];
        byte[] result = includeExcludeScanOptimizerImpl.getNextKey(key, byteKey);
        assertNull("result", result);
        assertTrue("(IncludeExcludeScanOptimizerImpl) includeExcludeScanOptimizerImpl.isDone", ((IncludeExcludeScanOptimizerImpl) includeExcludeScanOptimizerImpl).isDone);
    }
    
    public void testGetNextKey3() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        long[] maxKey = new long[0];
        long[][] filters = new long[2][];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        long[] key = new long[2];
        key[0] = -1L;
        byte[] byteKey = new byte[1];
        scanOptimizerImpl.getNextKey(key, byteKey);
        long[] key2 = new long[1];
        byte[] byteKey2 = new byte[0];
        byte[] result = scanOptimizerImpl.getNextKey(key2, byteKey2);
        assertEquals("scanOptimizerImpl.nextEndKey.length", 1, scanOptimizerImpl.nextEndKey.length);
        assertFalse("scanOptimizerImpl.nextEndKey[0] had new Long(0L) removed", new Long(0L).equals(new Long(scanOptimizerImpl.nextEndKey[0])));
        assertEquals("key2[0]", 1L, key2[0]);
        assertEquals("result.length", 0, result.length);
        assertSame("scanOptimizerImpl.generator", keyGenerator, scanOptimizerImpl.generator);
    }
    
    public void testGetNextKey4() throws Throwable {
        int[] lens = new int[0];
        byte[] byteKey = new byte[1];
        long[][] filters = new long[4][];
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        scanOptimizerImpl.getNextKey(key, byteKey);
        byte[] byteKey2 = new byte[0];
        byte[] result = scanOptimizerImpl.getNextKey(key, byteKey2);
        assertNull("result", result);
    }
    
    public void testGetNextKey5() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] key = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        byte[] result = scanOptimizerImpl.getNextKey(key, (byte[]) null);
        assertNull("result", result);
        boolean actual = ((LogService) getPrivateField(ScanOptimizerImpl.class, "LOGGER")).isDebugEnabled();
        assertTrue("scanOptimizerImplScanOptimizerImpl.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testIsDone() throws Throwable {
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        boolean result = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens)).isDone();
        assertFalse("result", result);
    }
    
    public void testSetKey() throws Throwable {
        long[] longs = new long[2];
        long[][] filters = new long[1][];
        filters[0] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        key[0] = 56L;
        int result = scanOptimizerImpl.setKey(key, 1);
        assertEquals("result", 1, result);
    }
    
    public void testSetKey1() throws Throwable {
        int[] lens = new int[0];
        long[][] filters = new long[4][];
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        int result = scanOptimizerImpl.setKey(key, 0);
        assertEquals("result", 0, result);
    }
    
    public void testSetKey2() throws Throwable {
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        int result = scanOptimizerImpl.setKey(key, 1);
        assertEquals("result", 1, result);
    }
    
    public void testSetKeyWithAggressiveMocks() throws Throwable {
        ScanOptimizerImpl scanOptimizerImpl = (ScanOptimizerImpl) Mockingbird.getProxyObject(ScanOptimizerImpl.class, true);
        long[][] longs = new long[3][0];
        long[] longs2 = new long[1];
        long[] longs3 = new long[0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[3];
        scanOptimizerImpl.filters = longs;
        longs2[0] = 0L;
        longs[2] = longs3;
        longs[1] = longs4;
        longs[0] = longs5;
        longs5[0] = 0L;
        longs5[1] = 0L;
        longs5[2] = 1L;
        Mockingbird.enterTestMode(ScanOptimizerImpl.class);
        int result = scanOptimizerImpl.setKey(longs2, 3);
        assertEquals("result", 0, result);
    }
    
    public void testSetKeyWithAggressiveMocks1() throws Throwable {
        ScanOptimizerImpl scanOptimizerImpl = (ScanOptimizerImpl) Mockingbird.getProxyObject(ScanOptimizerImpl.class, true);
        long[][] longs = new long[3][0];
        long[] longs2 = new long[1];
        long[] longs3 = new long[2];
        long[] longs4 = new long[0];
        long[] longs5 = new long[2];
        scanOptimizerImpl.filters = longs;
        scanOptimizerImpl.maxKey = longs2;
        longs3[1] = 0L;
        longs3[0] = -1L;
        longs[2] = longs4;
        longs[1] = longs5;
        longs[0] = null;
        longs5[0] = 0L;
        longs5[1] = 0L;
        longs2[0] = 0L;
        Mockingbird.enterTestMode(ScanOptimizerImpl.class);
        int result = scanOptimizerImpl.setKey(longs3, 3);
        assertEquals("result", 0, result);
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[2][];
        int[] lens = new int[4];
        try {
            new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(Bits.class, ex);
            assertNotNull("ScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNegativeArraySizeException() throws Throwable {
        long[][] filters = new long[2][];
        long[] maxKey = new long[3];
        int[] lens = new int[3];
        lens[0] = -63;
        try {
            new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
            assertNotNull("ScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        try {
            new ScanOptimizerImpl(maxKey, filters, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertNotNull("ScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[2];
        long[] longs2 = new long[0];
        long[][] filters = new long[3][];
        filters[0] = longs2;
        filters[1] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        long[] longs = new long[1];
        longs[0] = -10L;
        long[] longs2 = new long[2];
        long[][] filters = new long[2][];
        filters[0] = longs;
        filters[1] = longs2;
        long[] key = new long[3];
        long[] maxKey = new long[0];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        long[] longs = new long[2];
        longs[0] = -1L;
        long[][] filters = new long[2][];
        filters[1] = longs;
        long[] key = new long[3];
        long[] maxKey = new long[0];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        long[] longs = new long[3];
        long[] longs2 = new long[3];
        long[][] filters = new long[2][];
        filters[0] = longs;
        filters[1] = longs2;
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        int[] lens = new int[0];
        long[][] filters = new long[1][];
        long[] maxKey = new long[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 2, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[0];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 0, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        long[] longs = new long[3];
        longs[0] = -9L;
        long[] longs2 = new long[3];
        long[][] filters = new long[2][];
        filters[0] = longs;
        filters[1] = longs2;
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        long[] longs = new long[1];
        longs[0] = -10L;
        long[][] filters = new long[2][];
        filters[0] = longs;
        long[] key = new long[3];
        long[] maxKey = new long[0];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException8() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[2];
        long[] longs2 = new long[2];
        long[] longs3 = new long[0];
        long[][] filters = new long[3][];
        filters[0] = longs3;
        filters[1] = longs2;
        filters[2] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException9() throws Throwable {
        long[] longs = new long[3];
        longs[0] = -9L;
        longs[1] = -8L;
        longs[2] = 31L;
        long[][] filters = new long[2][];
        filters[0] = longs;
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("key[0]", 31L, key[0]);
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException10() throws Throwable {
        int[] lens = new int[0];
        long[] key = new long[3];
        long[] longs = new long[1];
        long[][] filters = new long[2][];
        filters[1] = longs;
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException11() throws Throwable {
        int[] lens = new int[0];
        long[] key = new long[3];
        long[] longs = new long[1];
        longs[0] = 46L;
        long[][] filters = new long[2][];
        filters[1] = longs;
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("key[1]", 46L, key[1]);
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException12() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[0];
        long[][] filters = new long[1][];
        filters[0] = longs;
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException13() throws Throwable {
        long[] longs = new long[2];
        long[][] filters = new long[1][];
        filters[0] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        maxKey[0] = 100L;
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter(maxKey);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("maxKey.length", 2, maxKey.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException14() throws Throwable {
        long[] longs = new long[3];
        longs[0] = -9L;
        longs[1] = -8L;
        longs[2] = 31L;
        long[] longs2 = new long[3];
        long[][] filters = new long[2][];
        filters[0] = longs;
        filters[1] = longs2;
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("key[0]", 31L, key[0]);
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, null, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        try {
            scanOptimizerImpl.checkWithFilter(key);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 1, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsNullPointerException1() throws Throwable {
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.checkWithFilter((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testCompareToThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[0];
        long[] longs2 = new long[4];
        long[] maxKey = new long[1];
        long[][] filters = new long[1][];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs2, longs});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testCompareToThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[0];
        long[][] filters = new long[4][];
        long[] maxKey = new long[3];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs2 = new long[5];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs2, longs});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testCompareToThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[2];
        long[][] filters = new long[1][];
        int[] lens = new int[0];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {longs, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testCompareToThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[0];
        long[] maxKey = new long[1];
        long[][] filters = new long[1][];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl", "compareTo", new Class[] {long[].class, long[].class}, scanOptimizerImpl, new Object[] {null, longs});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testSetKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        long[] key = new long[0];
        long[] longs = new long[2];
        long[][] filters = new long[1][];
        filters[0] = longs;
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.setKey(key, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 0, key.length);
        }
    }
    
    public void testSetKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        long[] maxKey = new long[0];
        long[][] filters = new long[0][];
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes = new byte[0];
        Mockingbird.setReturnValue(keyGenerator.generateKey(maxKey), bytes);
        Mockingbird.enterTestMode(ScanOptimizerImpl.class);
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, keyGenerator);
        long[] key = new long[0];
        try {
            scanOptimizerImpl.setKey(key, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 0, key.length);
        }
    }
    
    public void testSetKeyThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[0];
        long[] key = new long[0];
        long[][] filters = new long[1][];
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.setKey(key, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertEquals("key.length", 0, key.length);
        }
    }
    
    public void testSetKeyThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        long[] longs = new long[2];
        long[][] filters = new long[1][];
        filters[0] = longs;
        long[] maxKey = new long[2];
        ScanOptimizerImpl scanOptimizerImpl = new ScanOptimizerImpl(maxKey, filters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            scanOptimizerImpl.setKey((long[]) null, 1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
}

