/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:51:49 PM
 * Time to generate: 01:28.601 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.metadata.SliceMetaData;
import com.huawei.unibi.molap.util.MolapUtil;
import com.huawei.unibi.molap.util.MolapUtilException;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.Iterator;
import java.util.List;
import mondrian.olap.CacheControl;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.RolapUtil;

public class CubeSliceLoaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CubeSliceLoader.class;
    }
    
    public void testConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBackgroundMergeSlices() throws Throwable {
        CubeSliceLoader.getInstance().backgroundMergeSlices("testCubeSliceLoaderCubeName");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDeleteSliceFromCubeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo2 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        CubeSlicePathInfo cubeSlicePathInfo3 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo3);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        setPrivateField(inMemoryCube, "cubeSlicePathInfo", cubeSlicePathInfo);
        setPrivateField(cubeSlicePathInfo, "loadFolder", "");
        setPrivateField(inMemoryCube2, "cubeSlicePathInfo", cubeSlicePathInfo2);
        setPrivateField(cubeSlicePathInfo2, "loadFolder", "");
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        setPrivateField(cubeSlicePathInfo3, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo3, "loadFolder", "X");
        setPrivateField(cubeSlicePathInfo3, "cubeUniqueName", "");
        setPrivateField(cubeSlicePathInfo3, "tableName", "");
        Mockingbird.setReturnValue(false, restructureStore, "getSlices", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "unRegisterSlice", "(java.lang.String,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore, "removeSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "deleteSliceFromCube", new Class[] {String.class}, cubeSliceLoader, new Object[] {""});
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testGetInstance() throws Throwable {
        CubeSliceLoader result = CubeSliceLoader.getInstance();
        assertNotNull("result", result);
    }
    
    public void testIdentifySliceToMerge() throws Throwable {
        InMemoryCube result = CubeSliceLoader.getInstance().identifySliceToMerge("testCubeSliceLoaderCubeName");
        assertNull("result", result);
    }
    
    public void testLoadSliceFromFiles() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        instance.loadSliceFromFiles("testCubeSliceLoaderFilesLocaton");
        boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
        assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testLoadSliceFromFilesWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(cubeSlicePathInfo, "rsPath", "");
        setPrivateField(cubeSlicePathInfo, "tableName", "");
        setPrivateField(cubeSlicePathInfo, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(inMemoryCubeStore.getRolapCube(""), null);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, interruptedException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.loadSliceFromFiles("");
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testLoadSliceFromFilesWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        SliceMetaData sliceMetaData = new SliceMetaData();
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        CacheControl cacheControl = (CacheControl) Mockingbird.getProxyObject(CacheControl.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        setPrivateField(rolapCube2, "schema", rolapSchema);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(cubeSlicePathInfo, "rsPath", "");
        setPrivateField(cubeSlicePathInfo, "tableName", "");
        setPrivateField(cubeSlicePathInfo, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", rolapCube, 1);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", null, 1);
        Mockingbird.enterNormalMode();
        inMemoryCube.setRolapCube(rolapCube2);
        Mockingbird.enterRecordingMode();
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Mockingbird.replaceObjectForRecording(RestructureStore.class, "<init>()", restructureStore);
        inMemoryCubeStore.registerSlice(inMemoryCube, restructureStore);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InMemoryCube.class), "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, rolapConnection, "getCacheControl", "(java.io.PrintWriter)mondrian.olap.CacheControl", cacheControl, 1);
        Mockingbird.setReturnValue(false, cacheControl, "flushSchema", "(mondrian.olap.Schema)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.loadSliceFromFiles("");
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testLoadSliceFromFilesWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        CacheControl cacheControl = (CacheControl) Mockingbird.getProxyObject(CacheControl.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        setPrivateField(rolapCube2, "schema", rolapSchema);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(cubeSlicePathInfo, "rsPath", "");
        setPrivateField(cubeSlicePathInfo, "tableName", "");
        setPrivateField(cubeSlicePathInfo, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getRolapCube", "(java.lang.String)mondrian.rolap.RolapCube", rolapCube, 1);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", null, 1);
        Mockingbird.enterNormalMode();
        inMemoryCube.setRolapCube(rolapCube2);
        Mockingbird.enterRecordingMode();
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Mockingbird.replaceObjectForRecording(RestructureStore.class, "<init>()", restructureStore);
        inMemoryCubeStore.registerSlice(inMemoryCube, restructureStore);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setReturnValue(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(InMemoryCube.class), "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, rolapConnection, "getCacheControl", "(java.io.PrintWriter)mondrian.olap.CacheControl", cacheControl, 1);
        Mockingbird.setReturnValue(false, cacheControl, "flushSchema", "(mondrian.olap.Schema)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.loadSliceFromFiles("");
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testReadSliceMetaDataFile() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        Object result = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "readSliceMetaDataFile", new Class[] {String.class}, instance, new Object[] {"testCubeSliceLoaderPath"});
        assertNull("result", result);
        boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
        assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testReadSliceMetaDataFileWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        ClassNotFoundException classNotFoundException = (ClassNotFoundException) Mockingbird.getProxyObject(ClassNotFoundException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setException(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, classNotFoundException, 1);
        Mockingbird.setReturnValue(false, classNotFoundException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        SliceMetaData result = (SliceMetaData) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "readSliceMetaDataFile", new Class[] {String.class}, cubeSliceLoader, new Object[] {""});
        assertNull("result", result);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testUpdateSlices() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        instance.updateSlices(null, (String[]) null);
        boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
        assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testUpdateSlicesWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo2 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo3 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo4 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo5 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        strings[0] = "";
        strings[1] = "";
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(inMemoryCube, "cubeSlicePathInfo", cubeSlicePathInfo2);
        setPrivateField(cubeSlicePathInfo2, "loadFolder", "");
        setPrivateField(inMemoryCube2, "cubeSlicePathInfo", cubeSlicePathInfo3);
        setPrivateField(cubeSlicePathInfo3, "loadFolder", "");
        setPrivateField(inMemoryCube3, "cubeSlicePathInfo", cubeSlicePathInfo4);
        setPrivateField(cubeSlicePathInfo4, "loadFolder", "");
        setPrivateField(inMemoryCube4, "cubeSlicePathInfo", cubeSlicePathInfo5);
        setPrivateField(cubeSlicePathInfo5, "loadFolder", "X");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, (Throwable) Mockingbird.getProxyObject(InterruptedException.class), 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo6 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo6);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        setPrivateField(cubeSlicePathInfo6, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo6, "loadFolder", "");
        setPrivateField(cubeSlicePathInfo6, "cubeUniqueName", "");
        setPrivateField(cubeSlicePathInfo6, "tableName", "");
        Mockingbird.setReturnValue(false, restructureStore, "getSlices", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "unRegisterSlice", "(java.lang.String,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore, "removeSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo7 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo7);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore2, 1);
        setPrivateField(cubeSlicePathInfo7, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo7, "loadFolder", "X");
        setPrivateField(cubeSlicePathInfo7, "cubeUniqueName", "");
        setPrivateField(cubeSlicePathInfo7, "tableName", "");
        Mockingbird.setReturnValue(false, restructureStore2, "getSlices", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "unRegisterSlice", "(java.lang.String,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore2, "removeSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        MolapUtil.deleteFoldersAndFiles(strings);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.updateSlices(null, strings);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testUpdateSlicesWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo2 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo3 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo4 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeSlicePathInfo cubeSlicePathInfo5 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        strings[0] = "";
        strings[1] = "";
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        setPrivateField(inMemoryCube, "cubeSlicePathInfo", cubeSlicePathInfo2);
        setPrivateField(cubeSlicePathInfo2, "loadFolder", "");
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(inMemoryCube2, "cubeSlicePathInfo", cubeSlicePathInfo3);
        setPrivateField(cubeSlicePathInfo3, "loadFolder", "");
        setPrivateField(inMemoryCube3, "cubeSlicePathInfo", cubeSlicePathInfo4);
        setPrivateField(cubeSlicePathInfo4, "loadFolder", "");
        setPrivateField(inMemoryCube4, "cubeSlicePathInfo", cubeSlicePathInfo5);
        setPrivateField(cubeSlicePathInfo5, "loadFolder", "X");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(0), 1);
        CubeSlicePathInfo cubeSlicePathInfo6 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo6);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        setPrivateField(cubeSlicePathInfo6, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo6, "loadFolder", "");
        setPrivateField(cubeSlicePathInfo6, "cubeUniqueName", "");
        setPrivateField(cubeSlicePathInfo6, "tableName", "");
        Mockingbird.setReturnValue(false, restructureStore, "getSlices", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "unRegisterSlice", "(java.lang.String,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore, "removeSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo7 = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo7);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore2, 1);
        setPrivateField(cubeSlicePathInfo7, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo7, "loadFolder", "X");
        setPrivateField(cubeSlicePathInfo7, "cubeUniqueName", "");
        setPrivateField(cubeSlicePathInfo7, "tableName", "");
        Mockingbird.setReturnValue(false, restructureStore2, "getSlices", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "unRegisterSlice", "(java.lang.String,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore2, "removeSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        MolapUtil.deleteFoldersAndFiles(strings);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.updateSlices(null, strings);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testUpdateSlicesWithAggressiveMocks2() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        setPrivateField(cubeSlicePathInfo, "schemaName", "");
        setPrivateField(cubeSlicePathInfo, "cubeName", "");
        setPrivateField(cubeSlicePathInfo, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo, "loadPath", "");
        setPrivateField(cubeSlicePathInfo, "tableName", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", rolapCube, 1);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        Mockingbird.setReturnValue(false, inMemoryCube, "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, interruptedException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore, "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        MolapUtil.deleteFoldersAndFiles((String[]) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.updateSlices("", (String[]) null);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testUpdateSlicesWithAggressiveMocks3() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        MolapUtilException molapUtilException = (MolapUtilException) Mockingbird.getProxyObject(MolapUtilException.class);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        setPrivateField(cubeSlicePathInfo, "schemaName", "");
        setPrivateField(cubeSlicePathInfo, "cubeName", "");
        setPrivateField(cubeSlicePathInfo, "rsFolder", "");
        setPrivateField(cubeSlicePathInfo, "loadPath", "");
        setPrivateField(cubeSlicePathInfo, "tableName", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", rolapCube, 1);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        Mockingbird.setReturnValue(false, inMemoryCube, "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getActiveQueriesCount", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, interruptedException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, restructureStore, "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        MolapUtil.deleteFoldersAndFiles((String[]) null);
        Mockingbird.setExceptionForVoid(molapUtilException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.updateSlices("", (String[]) null);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testUpdateSlicesWithAggressiveMocks4() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeSliceLoader.class, "LOGGER");
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        String[] strings = new String[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        setPrivateField(CubeSliceLoader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        CubeSlicePathInfo cubeSlicePathInfo = (CubeSlicePathInfo) Mockingbird.getProxyObject(CubeSlicePathInfo.class);
        Mockingbird.replaceObjectForRecording(CubeSlicePathInfo.class, "<init>(java.lang.String)", cubeSlicePathInfo);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        setPrivateField(cubeSlicePathInfo, "schemaName", "");
        setPrivateField(cubeSlicePathInfo, "cubeName", "");
        setPrivateField(cubeSlicePathInfo, "cubeUniqueName", "");
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, null, 1);
        Mockingbird.setReturnValue(true, RolapUtil.class, "getCube", "(java.lang.String,java.lang.String)mondrian.rolap.RolapCube", null, 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(500L)}, interruptedException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        cubeSliceLoader.updateSlices("", strings);
        assertNotNull("cubeSliceLoaderCubeSliceLoader.LOGGER", getPrivateField(CubeSliceLoader.class, "LOGGER"));
    }
    
    public void testDeleteSliceFromCubeThrowsNullPointerException() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "deleteSliceFromCube", new Class[] {String.class}, instance, new Object[] {"testCubeSliceLoaderLoadPath"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testDeleteSliceFromCubeThrowsNullPointerException1() throws Throwable {
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "<init>", new Class[] {}, null, new Object[] {});
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "deleteSliceFromCube", new Class[] {String.class}, cubeSliceLoader, new Object[] {"E:\\agitarOne\\work\\L00102056F2china\fhuawei\u0008com-agitar-4\\tmp\\agitar-l00102056\\Agitator3804841034765019680Ydir\\Agitator5.tmp"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSliceLoader.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("cubeSliceLoaderCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testLoadSliceFromFilesThrowsNullPointerException() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        try {
            instance.loadSliceFromFiles(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testReadSliceMetaDataFileThrowsThrowableWithAggressiveMocks() throws Throwable {
        CubeSliceLoader cubeSliceLoader = (CubeSliceLoader) Mockingbird.getProxyObject(CubeSliceLoader.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setReturnValue(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, obj, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(CubeSliceLoader.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSliceLoader", "readSliceMetaDataFile", new Class[] {String.class}, cubeSliceLoader, new Object[] {""});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(CubeSliceLoader.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("cubeSliceLoaderCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testUpdateSlicesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        String[] slicePathsToDelete = new String[0];
        try {
            instance.updateSlices(null, slicePathsToDelete);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CubeSliceLoader.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testUpdateSlicesThrowsNullPointerException() throws Throwable {
        CubeSliceLoader instance = CubeSliceLoader.getInstance();
        String[] slicePathsToDelete = new String[3];
        try {
            instance.updateSlices("testCubeSliceLoaderNewSlicePath", slicePathsToDelete);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            boolean actual = ((LogService) getPrivateField(CubeSliceLoader.class, "LOGGER")).isDebugEnabled();
            assertTrue("instanceCubeSliceLoader.LOGGER.isDebugEnabled()", actual);
        }
    }
}

