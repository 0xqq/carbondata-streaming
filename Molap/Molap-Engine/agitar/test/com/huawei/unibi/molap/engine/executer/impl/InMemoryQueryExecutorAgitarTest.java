/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:59:00 PM
 * Time to generate: 03:28.044 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.aggregator.MeasureAggregator;
import com.huawei.unibi.molap.engine.aggregator.impl.SumAggregator;
import com.huawei.unibi.molap.engine.aggregator.util.AggUtil;
import com.huawei.unibi.molap.engine.datastorage.CubeDataStore;
import com.huawei.unibi.molap.engine.datastorage.DataStore;
import com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore;
import com.huawei.unibi.molap.engine.datastorage.HierarchyStore;
import com.huawei.unibi.molap.engine.datastorage.InMemoryCube;
import com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore;
import com.huawei.unibi.molap.engine.datastorage.Member;
import com.huawei.unibi.molap.engine.datastorage.MemberStore;
import com.huawei.unibi.molap.engine.datastorage.QueryMapper;
import com.huawei.unibi.molap.engine.datastorage.RestructureStore;
import com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore;
import com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor;
import com.huawei.unibi.molap.engine.filters.InMemFilterModel;
import com.huawei.unibi.molap.engine.filters.InMemoryFilter;
import com.huawei.unibi.molap.engine.filters.IncludeExcludeKeyFilterImpl;
import com.huawei.unibi.molap.engine.filters.KeyFilterImpl;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.util.ArrayWrapper;
import com.huawei.unibi.molap.engine.util.ByteArrayWrapper;
import com.huawei.unibi.molap.engine.util.CacheUtil;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import com.huawei.unibi.molap.keygenerator.KeyGenException;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.factory.KeyGeneratorFactory;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.molap.metadata.SliceMetaData;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import it.unimi.dsi.fastutil.doubles.Double2ObjectOpenHashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import mondrian.olap.Dimension;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.SqlStatement;

public class InMemoryQueryExecutorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InMemoryQueryExecutor.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testInMemoryQueryExecutorColName", 100, "testInMemoryQueryExecutorName", new MolapMetadata.Cube("testInMemoryQueryExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(dimList);
        assertEquals("inMemoryQueryExecutor.cubeName", "testInMemoryQueryExecutorName", getPrivateField(inMemoryQueryExecutor, "cubeName"));
        int actual = ((MolapMetadata.Dimension[]) getPrivateField(inMemoryQueryExecutor, "dimTables")).length;
        assertEquals("inMemoryQueryExecutor.dimTables.length", 1, actual);
        assertNull("inMemoryQueryExecutor.queryId", getPrivateField(inMemoryQueryExecutor, "queryId"));
        assertEquals("inMemoryQueryExecutor.getCubeUniqueName()", "null_testInMemoryQueryExecutorName", inMemoryQueryExecutor.getCubeUniqueName());
        assertNull("inMemoryQueryExecutor.getSchemaName()", inMemoryQueryExecutor.getSchemaName());
        assertEquals("inMemoryQueryExecutor.slices.size()", 0, ((Collection) getPrivateField(inMemoryQueryExecutor, "slices")).size());
        int actual2 = ((KeyGenerator) getPrivateField(inMemoryQueryExecutor, "keyGenerator")).getDimCount();
        assertEquals("inMemoryQueryExecutor.keyGenerator.getDimCount()", 1, actual2);
    }
    
    public void testConstructor1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        assertNull("inMemoryQueryExecutor.cubeName", getPrivateField(inMemoryQueryExecutor, "cubeName"));
        int actual = ((MolapMetadata.Dimension[]) getPrivateField(inMemoryQueryExecutor, "dimTables")).length;
        assertEquals("inMemoryQueryExecutor.dimTables.length", 0, actual);
        assertNull("inMemoryQueryExecutor.queryId", getPrivateField(inMemoryQueryExecutor, "queryId"));
        assertEquals("inMemoryQueryExecutor.getCubeUniqueName()", "null_null", inMemoryQueryExecutor.getCubeUniqueName());
        assertNull("inMemoryQueryExecutor.getSchemaName()", inMemoryQueryExecutor.getSchemaName());
        assertEquals("inMemoryQueryExecutor.slices.size()", 0, ((Collection) getPrivateField(inMemoryQueryExecutor, "slices")).size());
        int actual2 = ((KeyGenerator) getPrivateField(inMemoryQueryExecutor, "keyGenerator")).getDimCount();
        assertEquals("inMemoryQueryExecutor.keyGenerator.getDimCount()", 0, actual2);
    }
    
    public void testConstructor2() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(null);
        assertNull("inMemoryQueryExecutor.cubeName", getPrivateField(inMemoryQueryExecutor, "cubeName"));
        assertNull("inMemoryQueryExecutor.dimTables", getPrivateField(inMemoryQueryExecutor, "dimTables"));
        assertNull("inMemoryQueryExecutor.queryId", getPrivateField(inMemoryQueryExecutor, "queryId"));
        assertEquals("inMemoryQueryExecutor.getCubeUniqueName()", "null_null", inMemoryQueryExecutor.getCubeUniqueName());
        assertNull("inMemoryQueryExecutor.getSchemaName()", inMemoryQueryExecutor.getSchemaName());
        assertEquals("inMemoryQueryExecutor.slices.size()", 0, ((Collection) getPrivateField(inMemoryQueryExecutor, "slices")).size());
        assertNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testConstructor3() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.ignoreConstructorExceptions(AbstractMolapExecutor.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        Mockingbird.enterNormalMode();
        dimension.setNoOfbits(0);
        dimension2.setNoOfbits(0);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap3, 1);
        Mockingbird.setReturnValue(false, hashMap3, "get", "(java.lang.Object)java.lang.Object", new Object[] {"QUERY_ID"}, "", 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        Mockingbird.setReturnValue(false, thread, "getId", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getSlicesForThread", "(java.lang.Long)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getActiveSlices", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(true, Long.class, "parseLong", "(java.lang.String)long", new Long(0L), 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "queryStart", "(java.lang.String,long)void", null, 1);
        Mockingbird.enterTestMode();
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(list);
        assertEquals("inMemoryQueryExecutor.cubeName", "", getPrivateField(inMemoryQueryExecutor, "cubeName"));
        int actual = ((MolapMetadata.Dimension[]) getPrivateField(inMemoryQueryExecutor, "dimTables")).length;
        assertEquals("inMemoryQueryExecutor.dimTables.length", 2, actual);
        assertEquals("inMemoryQueryExecutor.queryId", "", getPrivateField(inMemoryQueryExecutor, "queryId"));
        assertEquals("inMemoryQueryExecutor.getCubeUniqueName()", "", inMemoryQueryExecutor.getCubeUniqueName());
        assertEquals("inMemoryQueryExecutor.getSchemaName()", "", inMemoryQueryExecutor.getSchemaName());
        assertNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
        assertNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testConstructor4() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.ignoreConstructorExceptions(AbstractMolapExecutor.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.enterNormalMode();
        dimension.setCube(cube);
        cube.setName("");
        dimensions[0] = dimension2;
        dimensions[1] = dimension3;
        dimension2.setNoOfbits(0);
        dimension3.setNoOfbits(0);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, null, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), dimension);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap3, 1);
        Mockingbird.setReturnValue(false, hashMap3, "get", "(java.lang.Object)java.lang.Object", new Object[] {"QUERY_ID"}, "", 1);
        Mockingbird.setReturnValue(false, list, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        Mockingbird.setReturnValue(false, thread, "getId", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, QueryMapper.class, "getSlicesForThread", "(java.lang.Long)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getSllicesbyIds", "(java.lang.String,java.util.List)java.util.List", null, 1);
        Mockingbird.enterTestMode();
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(list);
        assertEquals("inMemoryQueryExecutor.cubeName", "", getPrivateField(inMemoryQueryExecutor, "cubeName"));
        int actual = ((MolapMetadata.Dimension[]) getPrivateField(inMemoryQueryExecutor, "dimTables")).length;
        assertEquals("inMemoryQueryExecutor.dimTables.length", 2, actual);
        assertEquals("inMemoryQueryExecutor.queryId", "", getPrivateField(inMemoryQueryExecutor, "queryId"));
        assertEquals("inMemoryQueryExecutor.getCubeUniqueName()", "", inMemoryQueryExecutor.getCubeUniqueName());
        assertEquals("inMemoryQueryExecutor.getSchemaName()", "", inMemoryQueryExecutor.getSchemaName());
        assertNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
        assertNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testLocalByteArrayWrapperConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRestructureHolderConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testComputeColExcludePredicateKeysWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InMemFilterModel inMemFilterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.enterNormalMode();
        dimension.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension2.setDataType(type2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveExcludedMembers(), list);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension2);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveExcludedMembers(), list2);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list2.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), new Integer(0));
        Mockingbird.setReturnValue(arrayList.get(1), new Integer(0));
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.computeColExcludePredicateKeys(map, inMemFilterModel, dimensions, null);
        assertNull("inMemoryQueryExecutor.getCubeUniqueName()", inMemoryQueryExecutor.getCubeUniqueName());
    }
    
    public void testComputeColIncludePredicateKeysWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InMemFilterModel inMemFilterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.enterNormalMode();
        dimension.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension2.setDataType(type2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), list);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension2);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list2);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list2.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), new Integer(0));
        Mockingbird.setReturnValue(arrayList.get(1), new Integer(0));
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel, dimensions, null);
        assertNull("inMemoryQueryExecutor.getCubeUniqueName()", inMemoryQueryExecutor.getCubeUniqueName());
    }
    
    public void testCreateDataFromAggregatesWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "createDataFromAggregates", new Class[] {List.class, MolapResultHolder.class, Map.class, MolapMetadata.Dimension[].class, boolean.class, int.class, boolean.class, String.class, List.class, int.class, boolean.class}, inMemoryQueryExecutor, new Object[] {null, molapResultHolder, map, dimensions, Boolean.FALSE, new Integer(2), Boolean.TRUE, "", null, new Integer(0), Boolean.FALSE});
        boolean actual = ((LogService) getPrivateField(InMemoryQueryExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER.isDebugEnabled()", actual);
        assertNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testCreateDataFromAggregatesWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, dimension, "getTotalAttributeCount", "()int", new Integer(-2), 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, dimension2, "getTotalAttributeCount", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "createDataFromAggregates", new Class[] {List.class, MolapResultHolder.class, Map.class, MolapMetadata.Dimension[].class, boolean.class, int.class, boolean.class, String.class, List.class, int.class, boolean.class}, inMemoryQueryExecutor, new Object[] {null, molapResultHolder, null, dimensions, Boolean.TRUE, new Integer(2), Boolean.FALSE, "", null, new Integer(0), Boolean.FALSE});
        boolean actual = ((LogService) getPrivateField(InMemoryQueryExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER.isDebugEnabled()", actual);
        assertNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testCreateDataFromAggregatesWithAggressiveMocks2() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes = new byte[0];
        long[] longs = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs2 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        Mockingbird.enterNormalMode();
        byteArrayWrapper.setActualData(bytes);
        byteArrayWrapper2.setActualData(bytes2);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.size(), 0);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs, 1);
        Mockingbird.setReturnValue(entry.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs2, 1);
        Mockingbird.setReturnValue(entry2.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "createDataFromAggregates", new Class[] {List.class, MolapResultHolder.class, Map.class, MolapMetadata.Dimension[].class, boolean.class, int.class, boolean.class, String.class, List.class, int.class, boolean.class}, inMemoryQueryExecutor, new Object[] {null, null, map, dimensions, Boolean.FALSE, new Integer(2), Boolean.TRUE, "", null, new Integer(0), Boolean.FALSE});
        boolean actual = ((LogService) getPrivateField(InMemoryQueryExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryQueryExecutor.keyGenerator", getPrivateField(inMemoryQueryExecutor, "keyGenerator"));
    }
    
    public void testExecuteAggTableCountWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getSize(), 2L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore3, 1);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore4, 1);
        Mockingbird.setReturnValue(cubeDataStore4.getSize(), -2L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        SumAggregator sumAggregator = new SumAggregator();
        Mockingbird.replaceObjectForRecording(SumAggregator.class, "<init>()", sumAggregator);
        sumAggregator.agg(1.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "createData", "(com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[])void", null, 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeAggTableCount("", molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testExecuteAggTableCountWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getSize(), 0L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore3, 1);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore4, 1);
        Mockingbird.setReturnValue(cubeDataStore4.getSize(), 1L);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        SumAggregator sumAggregator = new SumAggregator();
        Mockingbird.replaceObjectForRecording(SumAggregator.class, "<init>()", sumAggregator);
        sumAggregator.agg(1.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "createData", "(com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[])void", null, 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeAggTableCount("", molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testExecuteDimensionCount() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testInMemoryQueryExecutorColName", 100, "testInMemoryQueryExecutorName");
        MolapResultHolder hIterator = new MolapResultHolder(new ArrayList(1000));
        inMemoryQueryExecutor.executeDimensionCount(dimension, hIterator);
        assertEquals("hIterator.getColumnCount()", 1, hIterator.getColumnCount());
        boolean actual = ((LogService) getPrivateField(InMemoryQueryExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER.isDebugEnabled()", actual);
        assertEquals("inMemoryQueryExecutor.slices.size()", 0, ((Collection) getPrivateField(inMemoryQueryExecutor, "slices")).size());
    }
    
    public void testExecuteDimensionCountWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        SumAggregator sumAggregator = new SumAggregator();
        Mockingbird.replaceObjectForRecording(SumAggregator.class, "<init>()", sumAggregator);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getCount(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getCount(), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        sumAggregator.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "createData", "(com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[])void", null, 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeDimensionCount(dimension, molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testExecuteDimensionWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        int[] ints = new int[0];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore4 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects = new Object[0];
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects2 = new Object[2];
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Member member3 = (Member) Mockingbird.getProxyObject(Member.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Member member4 = (Member) Mockingbird.getProxyObject(Member.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(molapFilterInfo, "excludedMembers", list2);
        setPrivateField(molapFilterInfo2, "excludedMembers", list3);
        setPrivateField(molapFilterInfo2, "includedMembers", list4);
        Mockingbird.enterNormalMode();
        member.setAttributes(objects);
        member2.setAttributes(objects2);
        objects2[0] = obj;
        objects2[1] = obj2;
        member3.setAttributes((Object[]) null);
        member4.setAttributes((Object[]) null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore.getMembers(molapFilterInfo), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo2);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore2.getMembers(molapFilterInfo2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(map.get(dimension), null);
        Mockingbird.setReturnValue(memberStore3.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore4, 1);
        Mockingbird.setReturnValue(map.get(dimension), null);
        Mockingbird.setReturnValue(memberStore4.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {arrayList3}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member);
        Mockingbird.setReturnValue(arrayList2.get(0), list5);
        Mockingbird.setReturnValue(member.toString(), "");
        Mockingbird.setReturnValue(false, list5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member2);
        Mockingbird.setReturnValue(arrayList2.get(0), list6);
        Mockingbird.setReturnValue(member2.toString(), "");
        Mockingbird.setReturnValue(false, list6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList2.add(arrayList4), false);
        Mockingbird.setReturnValue(arrayList2.get(1), list7);
        Mockingbird.setReturnValue(false, list7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList2.add(arrayList5), false);
        Mockingbird.setReturnValue(arrayList2.get(2), list8);
        Mockingbird.setReturnValue(false, list8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member3);
        Mockingbird.setReturnValue(arrayList2.get(0), list9);
        Mockingbird.setReturnValue(member3.toString(), "");
        Mockingbird.setReturnValue(false, list9, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member4);
        Mockingbird.setReturnValue(arrayList2.get(0), list10);
        Mockingbird.setReturnValue(member4.toString(), "");
        Mockingbird.setReturnValue(false, list10, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeDimension("", dimension, ints, map, molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
        assertInvocationCount(logService, "info", 2);
        assertInvocationCount(list2, "size", 1);
        assertInvocationCount(list3, "size", 1);
        assertInvocationCount(list4, "size", 1);
        assertInvocationCount(list5, "add", 1);
        assertInvocationCount(list6, "add", 1);
        assertInvocationCount(list9, "add", 1);
        assertInvocationCount(list10, "add", 1);
        assertInvocationCount(list7, "add", 1);
        assertInvocationCount(list8, "add", 1);
    }
    
    public void testExecuteDimensionWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        int[] ints = new int[0];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore4 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects = new Object[0];
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects2 = new Object[2];
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Member member3 = (Member) Mockingbird.getProxyObject(Member.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        Member member4 = (Member) Mockingbird.getProxyObject(Member.class);
        List list11 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(molapFilterInfo, "excludedMembers", list2);
        setPrivateField(molapFilterInfo2, "excludedMembers", list3);
        setPrivateField(molapFilterInfo3, "excludedMembers", list4);
        setPrivateField(molapFilterInfo3, "includedMembers", list5);
        Mockingbird.enterNormalMode();
        member.setAttributes(objects);
        member2.setAttributes(objects2);
        objects2[0] = obj;
        objects2[1] = obj2;
        member3.setAttributes((Object[]) null);
        member4.setAttributes((Object[]) null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore.getMembers(molapFilterInfo), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo2);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore2.getMembers(molapFilterInfo2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo3);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, list5, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(memberStore3.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore4, 1);
        Mockingbird.setReturnValue(map.get(dimension), null);
        Mockingbird.setReturnValue(memberStore4.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {arrayList3}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member);
        Mockingbird.setReturnValue(arrayList2.get(0), list6);
        Mockingbird.setReturnValue(member.toString(), "");
        Mockingbird.setReturnValue(false, list6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member2);
        Mockingbird.setReturnValue(arrayList2.get(0), list7);
        Mockingbird.setReturnValue(member2.toString(), "");
        Mockingbird.setReturnValue(false, list7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList2.add(arrayList4), false);
        Mockingbird.setReturnValue(arrayList2.get(1), list8);
        Mockingbird.setReturnValue(false, list8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList2.add(arrayList5), false);
        Mockingbird.setReturnValue(arrayList2.get(2), list9);
        Mockingbird.setReturnValue(false, list9, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member3);
        Mockingbird.setReturnValue(arrayList2.get(0), list10);
        Mockingbird.setReturnValue(member3.toString(), "");
        Mockingbird.setReturnValue(false, list10, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member4);
        Mockingbird.setReturnValue(arrayList2.get(0), list11);
        Mockingbird.setReturnValue(member4.toString(), "");
        Mockingbird.setReturnValue(false, list11, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeDimension("", dimension, ints, map, molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testExecuteDimensionWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        int[] ints = new int[0];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore4 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects = new Object[0];
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Object[] objects2 = new Object[2];
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Member member3 = (Member) Mockingbird.getProxyObject(Member.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Member member4 = (Member) Mockingbird.getProxyObject(Member.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(molapFilterInfo, "excludedMembers", list2);
        setPrivateField(molapFilterInfo2, "excludedMembers", list3);
        Mockingbird.enterNormalMode();
        member.setAttributes(objects);
        member2.setAttributes(objects2);
        objects2[0] = obj;
        objects2[1] = obj2;
        member3.setAttributes((Object[]) null);
        member4.setAttributes((Object[]) null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore.getMembers(molapFilterInfo), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(map.get(dimension), molapFilterInfo2);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(memberStore2.getMembers(molapFilterInfo2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(map.get(dimension), null);
        Mockingbird.setReturnValue(memberStore3.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore4, 1);
        Mockingbird.setReturnValue(map.get(dimension), null);
        Mockingbird.setReturnValue(memberStore4.getAllMembers(), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {arrayList3}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member);
        Mockingbird.setReturnValue(arrayList2.get(0), list4);
        Mockingbird.setReturnValue(member.toString(), "");
        Mockingbird.setReturnValue(false, list4, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member2);
        Mockingbird.setReturnValue(arrayList2.get(0), list5);
        Mockingbird.setReturnValue(member2.toString(), "");
        Mockingbird.setReturnValue(false, list5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), list6);
        Mockingbird.setReturnValue(false, list6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList2.add(arrayList4), false);
        Mockingbird.setReturnValue(arrayList2.get(2), list7);
        Mockingbird.setReturnValue(false, list7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member3);
        Mockingbird.setReturnValue(arrayList2.get(0), list8);
        Mockingbird.setReturnValue(member3.toString(), "");
        Mockingbird.setReturnValue(false, list8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), member4);
        Mockingbird.setReturnValue(arrayList2.get(0), list9);
        Mockingbird.setReturnValue(member4.toString(), "");
        Mockingbird.setReturnValue(false, list9, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeDimension("", dimension, ints, map, molapResultHolder);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testExecuteHierarichiesWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[2];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension8 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints3 = new int[0];
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        MolapMetadata.Dimension dimension9 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        byte[] bytes4 = new byte[0];
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes5 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes6 = new byte[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        KeyValue keyValue3 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes7 = new byte[0];
        KeyValue keyValue4 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes8 = new byte[0];
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension10 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints4 = new int[0];
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints5 = new int[0];
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube3 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension11 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore3 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set6 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension12 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension13 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints6 = new int[0];
        Set set7 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension14 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension15 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints7 = new int[0];
        Set set8 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo5 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo6 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        long[] longs = new long[0];
        byte[] bytes9 = new byte[0];
        KeyValue keyValue5 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes10 = new byte[0];
        MeasureAggregator[] measureAggregators3 = new MeasureAggregator[0];
        long[] longs2 = new long[0];
        byte[] bytes11 = new byte[0];
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube4 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy4 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension16 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore4 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        InMemoryCube inMemoryCube5 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube5 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list11 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy5 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy6 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy7 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension17 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore5 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        ints[0] = 0;
        ints[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        dimension.setOrdinal(0);
        dimension2.setOrdinal(0);
        dimension3.setOrdinal(1);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(rolapCube, "hierarchyList", list3);
        setPrivateField(rolapHierarchy, "subName", "X");
        setPrivateField(rolapHierarchy, "dimension", dimension8);
        setPrivateField(hierarchyStore, "btreeStore", hierarchyBtreeStore);
        dimension9.setOrdinal(0);
        keyValue.setBackKeyArray(bytes5);
        keyValue.setKeyOffset(0);
        keyValue.setKeyLength(0);
        keyValue2.setBackKeyArray(bytes6);
        keyValue2.setKeyOffset(0);
        keyValue2.setKeyLength(0);
        keyValue3.setBackKeyArray(bytes7);
        keyValue3.setKeyOffset(0);
        keyValue3.setKeyLength(0);
        keyValue4.setBackKeyArray(bytes8);
        keyValue4.setKeyOffset(0);
        keyValue4.setKeyLength(0);
        inMemoryCube2.setRolapCube(rolapCube2);
        setPrivateField(rolapCube2, "hierarchyList", list4);
        setPrivateField(rolapHierarchy2, "subName", "X");
        setPrivateField(rolapHierarchy2, "dimension", dimension10);
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore2);
        inMemoryCube3.setRolapCube(rolapCube3);
        setPrivateField(rolapCube3, "hierarchyList", list5);
        setPrivateField(rolapHierarchy3, "subName", "X");
        setPrivateField(rolapHierarchy3, "dimension", dimension11);
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore3);
        dimension12.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension13.setDataType(type2);
        dimension14.setDataType(type3);
        dimension15.setDataType(type2);
        keyValue5.setBackKeyArray(bytes10);
        keyValue5.setKeyOffset(0);
        keyValue5.setKeyLength(0);
        inMemoryCube4.setRolapCube(rolapCube4);
        setPrivateField(rolapCube4, "hierarchyList", list10);
        setPrivateField(rolapHierarchy4, "subName", "X");
        setPrivateField(rolapHierarchy4, "dimension", dimension16);
        setPrivateField(hierarchyStore4, "btreeStore", null);
        inMemoryCube5.setRolapCube(rolapCube5);
        setPrivateField(rolapCube5, "hierarchyList", list11);
        setPrivateField(rolapHierarchy5, "subName", "");
        setPrivateField(rolapHierarchy6, "subName", "");
        setPrivateField(rolapHierarchy7, "subName", "X");
        setPrivateField(rolapHierarchy7, "dimension", dimension17);
        setPrivateField(hierarchyStore5, "btreeStore", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(arrayList.add(new Integer(0)), false);
        Mockingbird.setReturnValue(arrayList.add(new Integer(0)), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "addAll", "(java.util.Collection)boolean", new Object[] {arrayList}, boolean2, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {arrayList2}, null, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension3);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(hashMap.put(new Integer(0), new Integer(0)), null);
        Mockingbird.setReturnValue(list2.get(0), dimension4);
        Mockingbird.setReturnValue(dimension4.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.get(0), dimension5);
        Mockingbird.setReturnValue(dimension5.getTotalAttributeCount(), 0);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.get(0), null);
        Mockingbird.setReturnValue(hashMap2.put((Object) null, new Integer(0)), null);
        Mockingbird.setReturnValue(arrayList2.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension6);
        Mockingbird.setReturnValue(dimension6.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), null);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(arrayList2.get(1), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension7);
        Mockingbird.setReturnValue(dimension7.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap3);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator3, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), rolapHierarchy);
        Mockingbird.setReturnValue(false, dimension8, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList3}, ints2, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList4}, ints3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 0);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", Mockingbird.getProxyObject(FileHolderImpl.class));
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes, 1);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(map), true);
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = (IncludeExcludeKeyFilterImpl) Mockingbird.getProxyObject(IncludeExcludeKeyFilterImpl.class);
        Mockingbird.replaceObjectForRecording(IncludeExcludeKeyFilterImpl.class, "<init>(com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.keygenerator.KeyGenerator,long[])", includeExcludeKeyFilterImpl);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes2, 1);
        FilterTreeScanner filterTreeScanner = (FilterTreeScanner) Mockingbird.getProxyObject(FilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(FilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", filterTreeScanner);
        filterTreeScanner.setFilter(includeExcludeKeyFilterImpl);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes4, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue2);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators2);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue3);
        byteArrayWrapper.setData(bytes7, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper2);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue4);
        byteArrayWrapper2.setData(bytes8, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper2), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper2, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", new ByteArrayWrapper());
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), true);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, list4, "iterator", "()java.util.Iterator", iterator6, 1);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(false, dimension10, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore2, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore2, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints4, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints5, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set5);
        Mockingbird.setReturnValue(set5.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "addPointKeyInList", "(long[][],int,long[],java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList7, "size", "()int", new Object[] {}, new Integer(0), 1);
        HashMap hashMap4 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap4);
        Mockingbird.setReturnValue(arrayList7.size(), -1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        hashMap3.putAll(hashMap4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, list5, "iterator", "()java.util.Iterator", iterator10, 1);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(false, dimension11, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore3, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore3, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(map.entrySet(), set6);
        Mockingbird.setReturnValue(set6.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension12);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension12), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension13);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list6);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(list6.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 2);
        Mockingbird.setReturnValue(list6.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list6, dimension13), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList8}, ints6, 1);
        ArrayList arrayList9 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList9);
        Mockingbird.setReturnValue(map.entrySet(), set7);
        Mockingbird.setReturnValue(set7.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension14);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension14), null);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension15);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list7);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(list7.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 2);
        Mockingbird.setReturnValue(list7.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list7, dimension15), null);
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList9}, ints7, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set8);
        Mockingbird.setReturnValue(set8.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getValue(), molapFilterInfo5);
        Mockingbird.setReturnValue(molapFilterInfo5.getEffectiveIncludedMembers(), list8);
        Mockingbird.setReturnValue(list8.size(), 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getValue(), molapFilterInfo6);
        Mockingbird.setReturnValue(molapFilterInfo6.getEffectiveIncludedMembers(), list9);
        Mockingbird.setReturnValue(list9.size(), 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList10 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList10);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "addPointKeyInList", "(long[][],int,long[],java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList10, "size", "()int", new Object[] {}, new Integer(0), 1);
        HashMap hashMap5 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap5);
        Mockingbird.setReturnValue(arrayList10.size(), 1);
        Mockingbird.setReturnValue(arrayList10.get(0), longs);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes9);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", keyValue5, 1);
        ByteArrayWrapper byteArrayWrapper3 = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), "<init>()", byteArrayWrapper3);
        Mockingbird.setReturnValue(false, byteArrayWrapper3, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators3, 1);
        Mockingbird.setReturnValue(hashMap5.put(byteArrayWrapper3, measureAggregators3), null);
        Mockingbird.setReturnValue(arrayList10.size(), 2);
        Mockingbird.setReturnValue(arrayList10.get(1), longs2);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs2), bytes11);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList10.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(arrayList10.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        hashMap3.putAll(hashMap5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, list10, "iterator", "()java.util.Iterator", iterator14, 1);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), rolapHierarchy4);
        Mockingbird.setReturnValue(false, dimension16, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore4, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore4, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore4, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube5);
        Mockingbird.setReturnValue(false, list11, "iterator", "()java.util.Iterator", iterator15, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), rolapHierarchy5);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), rolapHierarchy6);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), rolapHierarchy7);
        Mockingbird.setReturnValue(false, dimension17, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube5, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore5, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore5, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore5, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList11 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList11);
        Mockingbird.setReturnValue(arrayList11.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, dimension9, "getTotalAttributeCount", "()int", new Integer(-2), 1);
        Mockingbird.setReturnValue(false, arrayList11, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dimension2.getTotalAttributeCount(), 2);
        Mockingbird.setReturnValue(hashMap3.isEmpty(), true);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeHierarichies("X", ints, list2, map, molapResultHolder);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteHierarichiesWithAggressiveMocks1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[2];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension7 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints3 = new int[0];
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        byte[] bytes4 = new byte[0];
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes5 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes6 = new byte[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        KeyValue keyValue3 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes7 = new byte[0];
        KeyValue keyValue4 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes8 = new byte[0];
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension9 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints4 = new int[0];
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        int[] ints5 = new int[0];
        Set set6 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube3 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension10 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore3 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Set set7 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension11 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension12 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints6 = new int[0];
        Set set8 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension13 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension14 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo5 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints7 = new int[0];
        Set set9 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo6 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo7 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        long[] longs = new long[0];
        byte[] bytes9 = new byte[0];
        KeyValue keyValue5 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes10 = new byte[0];
        MeasureAggregator[] measureAggregators3 = new MeasureAggregator[0];
        long[] longs2 = new long[0];
        byte[] bytes11 = new byte[0];
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube4 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list11 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy4 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension15 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore4 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        InMemoryCube inMemoryCube5 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube5 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list12 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy5 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy6 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy7 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension16 = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        DimensionHierarichyStore dimensionHierarichyStore5 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        ints[0] = 1;
        ints[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        dimension.setOrdinal(0);
        dimension2.setOrdinal(0);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(rolapCube, "hierarchyList", list3);
        setPrivateField(rolapHierarchy, "subName", null);
        setPrivateField(rolapHierarchy, "name", "X");
        setPrivateField(rolapHierarchy, "dimension", dimension7);
        setPrivateField(hierarchyStore, "btreeStore", hierarchyBtreeStore);
        dimension8.setOrdinal(0);
        keyValue.setBackKeyArray(bytes5);
        keyValue.setKeyOffset(0);
        keyValue.setKeyLength(0);
        keyValue2.setBackKeyArray(bytes6);
        keyValue2.setKeyOffset(0);
        keyValue2.setKeyLength(0);
        keyValue3.setBackKeyArray(bytes7);
        keyValue3.setKeyOffset(0);
        keyValue3.setKeyLength(0);
        keyValue4.setBackKeyArray(bytes8);
        keyValue4.setKeyOffset(0);
        keyValue4.setKeyLength(0);
        inMemoryCube2.setRolapCube(rolapCube2);
        setPrivateField(rolapCube2, "hierarchyList", list5);
        setPrivateField(rolapHierarchy2, "subName", "X");
        setPrivateField(rolapHierarchy2, "dimension", dimension9);
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore2);
        inMemoryCube3.setRolapCube(rolapCube3);
        setPrivateField(rolapCube3, "hierarchyList", list6);
        setPrivateField(rolapHierarchy3, "subName", "X");
        setPrivateField(rolapHierarchy3, "dimension", dimension10);
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore3);
        dimension11.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension12.setDataType(type2);
        dimension13.setDataType(type3);
        dimension14.setDataType(type2);
        keyValue5.setBackKeyArray(bytes10);
        keyValue5.setKeyOffset(0);
        keyValue5.setKeyLength(0);
        inMemoryCube4.setRolapCube(rolapCube4);
        setPrivateField(rolapCube4, "hierarchyList", list11);
        setPrivateField(rolapHierarchy4, "subName", "X");
        setPrivateField(rolapHierarchy4, "dimension", dimension15);
        setPrivateField(hierarchyStore4, "btreeStore", null);
        inMemoryCube5.setRolapCube(rolapCube5);
        setPrivateField(rolapCube5, "hierarchyList", list12);
        setPrivateField(rolapHierarchy5, "subName", "");
        setPrivateField(rolapHierarchy6, "subName", "");
        setPrivateField(rolapHierarchy7, "subName", "X");
        setPrivateField(rolapHierarchy7, "dimension", dimension16);
        setPrivateField(hierarchyStore5, "btreeStore", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(new Integer(0)), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(false, arrayList2, "addAll", "(java.util.Collection)boolean", new Object[] {arrayList}, boolean2, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {arrayList2}, null, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(hashMap.put(new Integer(0), new Integer(0)), null);
        Mockingbird.setReturnValue(list2.get(1), dimension3);
        Mockingbird.setReturnValue(dimension3.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.get(0), dimension4);
        Mockingbird.setReturnValue(dimension4.getTotalAttributeCount(), 0);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.get(0), null);
        Mockingbird.setReturnValue(hashMap2.put((Object) null, new Integer(0)), null);
        Mockingbird.setReturnValue(arrayList2.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension5);
        Mockingbird.setReturnValue(dimension5.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), null);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(arrayList2.get(1), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension6);
        Mockingbird.setReturnValue(dimension6.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap3);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator3, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), rolapHierarchy);
        Mockingbird.setReturnValue(false, dimension7, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList3}, ints2, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList4}, ints3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), list4);
        Mockingbird.setReturnValue(list4.size(), 0);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", Mockingbird.getProxyObject(FileHolderImpl.class));
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes, 1);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(map), true);
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = (IncludeExcludeKeyFilterImpl) Mockingbird.getProxyObject(IncludeExcludeKeyFilterImpl.class);
        Mockingbird.replaceObjectForRecording(IncludeExcludeKeyFilterImpl.class, "<init>(com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.keygenerator.KeyGenerator,long[])", includeExcludeKeyFilterImpl);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes2, 1);
        FilterTreeScanner filterTreeScanner = (FilterTreeScanner) Mockingbird.getProxyObject(FilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(FilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", filterTreeScanner);
        filterTreeScanner.setFilter(includeExcludeKeyFilterImpl);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes4, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue2);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators2);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue3);
        byteArrayWrapper.setData(bytes7, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper2);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue4);
        byteArrayWrapper2.setData(bytes8, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper2), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper2, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", new ByteArrayWrapper());
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), true);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, list5, "iterator", "()java.util.Iterator", iterator7, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(false, dimension9, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore2, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore2, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints4, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set5);
        Mockingbird.setReturnValue(set5.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints5, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set6);
        Mockingbird.setReturnValue(set6.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "addPointKeyInList", "(long[][],int,long[],java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList7, "size", "()int", new Object[] {}, new Integer(0), 1);
        HashMap hashMap4 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap4);
        Mockingbird.setReturnValue(arrayList7.size(), -1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        hashMap3.putAll(hashMap4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, list6, "iterator", "()java.util.Iterator", iterator11, 1);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(false, dimension10, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore3, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore3, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(map.entrySet(), set7);
        Mockingbird.setReturnValue(set7.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension11);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension11), null);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension12);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveIncludedMembers(), list7);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(list7.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 2);
        Mockingbird.setReturnValue(list7.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list7, dimension12), null);
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList8}, ints6, 1);
        ArrayList arrayList9 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList9);
        Mockingbird.setReturnValue(map.entrySet(), set8);
        Mockingbird.setReturnValue(set8.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension13);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension13), null);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), dimension14);
        Mockingbird.setReturnValue(entry5.getValue(), molapFilterInfo5);
        Mockingbird.setReturnValue(molapFilterInfo5.getEffectiveExcludedMembers(), list8);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list8.size(), 1);
        Mockingbird.setReturnValue(list8.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list8, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list8.size(), 2);
        Mockingbird.setReturnValue(list8.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list8, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list8.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list8, dimension14), null);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList9}, ints7, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set9);
        Mockingbird.setReturnValue(set9.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), entry6);
        Mockingbird.setReturnValue(entry6.getValue(), molapFilterInfo6);
        Mockingbird.setReturnValue(molapFilterInfo6.getEffectiveIncludedMembers(), list9);
        Mockingbird.setReturnValue(list9.size(), 1);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), entry7);
        Mockingbird.setReturnValue(entry7.getValue(), molapFilterInfo7);
        Mockingbird.setReturnValue(molapFilterInfo7.getEffectiveIncludedMembers(), list10);
        Mockingbird.setReturnValue(list10.size(), 1);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList10 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList10);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "addPointKeyInList", "(long[][],int,long[],java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList10, "size", "()int", new Object[] {}, new Integer(0), 1);
        HashMap hashMap5 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap5);
        Mockingbird.setReturnValue(arrayList10.size(), 1);
        Mockingbird.setReturnValue(arrayList10.get(0), longs);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes9);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", keyValue5, 1);
        ByteArrayWrapper byteArrayWrapper3 = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), "<init>()", byteArrayWrapper3);
        Mockingbird.setReturnValue(false, byteArrayWrapper3, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators3, 1);
        Mockingbird.setReturnValue(hashMap5.put(byteArrayWrapper3, measureAggregators3), null);
        Mockingbird.setReturnValue(arrayList10.size(), 2);
        Mockingbird.setReturnValue(arrayList10.get(1), longs2);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs2), bytes11);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList10.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(arrayList10.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        hashMap3.putAll(hashMap5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, list11, "iterator", "()java.util.Iterator", iterator15, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), rolapHierarchy4);
        Mockingbird.setReturnValue(false, dimension15, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore4, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore4, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore4, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube5);
        Mockingbird.setReturnValue(false, list12, "iterator", "()java.util.Iterator", iterator16, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), rolapHierarchy5);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), rolapHierarchy6);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), rolapHierarchy7);
        Mockingbird.setReturnValue(false, dimension16, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube5, "getDimensionAndHierarchyCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore5, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore5, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore5, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList11 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList11);
        Mockingbird.setReturnValue(arrayList11.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, dimension8, "getTotalAttributeCount", "()int", new Integer(-2), 1);
        Mockingbird.setReturnValue(false, arrayList11, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dimension2.getTotalAttributeCount(), 2);
        Mockingbird.setReturnValue(hashMap3.isEmpty(), true);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeHierarichies("X", ints, list2, map, molapResultHolder);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteHierarichiesWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        int[] ints = new int[2];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        DimensionHierarichyStore dimensionHierarichyStore = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        long[][] longs = new long[0][0];
        long[][] longs2 = new long[0][0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        DimensionHierarichyStore dimensionHierarichyStore2 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        long[][] longs3 = new long[0][0];
        long[][] longs4 = new long[0][0];
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes5 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes6 = new byte[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        KeyValue keyValue3 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes7 = new byte[0];
        KeyValue keyValue4 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes8 = new byte[0];
        DimensionHierarichyStore dimensionHierarichyStore3 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        long[][] longs5 = new long[0][0];
        long[][] longs6 = new long[0][0];
        DimensionHierarichyStore dimensionHierarichyStore4 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        long[][] longs7 = new long[0][0];
        long[][] longs8 = new long[0][0];
        DimensionHierarichyStore dimensionHierarichyStore5 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore6 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore6 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        DimensionHierarichyStore dimensionHierarichyStore7 = (DimensionHierarichyStore) Mockingbird.getProxyObject(DimensionHierarichyStore.class);
        HierarchyStore hierarchyStore7 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore5 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        KeyGenException keyGenException = (KeyGenException) Mockingbird.getProxyObject(KeyGenException.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        ints[0] = 1;
        ints[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        dimension.setOrdinal(0);
        dimension2.setOrdinal(0);
        setPrivateField(hierarchyStore, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore2);
        keyValue.setBackKeyArray(bytes5);
        keyValue.setKeyOffset(0);
        keyValue.setKeyLength(0);
        keyValue2.setBackKeyArray(bytes6);
        keyValue2.setKeyOffset(0);
        keyValue2.setKeyLength(0);
        keyValue3.setBackKeyArray(bytes7);
        keyValue3.setKeyOffset(0);
        keyValue3.setKeyLength(0);
        keyValue4.setBackKeyArray(bytes8);
        keyValue4.setKeyOffset(0);
        keyValue4.setKeyLength(0);
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyStore5, "btreeStore", null);
        setPrivateField(hierarchyStore6, "btreeStore", null);
        setPrivateField(hierarchyStore7, "btreeStore", hierarchyBtreeStore5);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "tolist", "(int[])java.util.List", new Object[] {ints}, null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "addAll", "(java.util.Collection)boolean", new Object[] {null}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {arrayList}, null, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(hashMap.put(new Integer(0), new Integer(0)), null);
        Mockingbird.setReturnValue(list2.get(1), dimension3);
        Mockingbird.setReturnValue(dimension3.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list2.get(0), dimension4);
        Mockingbird.setReturnValue(dimension4.getTotalAttributeCount(), 0);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), null);
        Mockingbird.setReturnValue(hashMap2.put((Object) null, new Integer(0)), null);
        Mockingbird.setReturnValue(arrayList.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension5);
        Mockingbird.setReturnValue(dimension5.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), null);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(arrayList.get(1), new Integer(0));
        Mockingbird.setReturnValue(list2.get(0), dimension6);
        Mockingbird.setReturnValue(dimension6.getTotalAttributeCount(), 0);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap3);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", new Object[] {null, ""}, dimensionHierarichyStore, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore, 1);
        InMemFilterModel inMemFilterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel);
        Mockingbird.enterNormalMode();
        inMemFilterModel.setIncludePredicateKeys(longs);
        inMemFilterModel.setExcludePredicateKeys(longs2);
        Mockingbird.enterRecordingMode();
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel, dimensions, keyGenerator);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 0);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", Mockingbird.getProxyObject(FileHolderImpl.class));
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getScanner", "(com.huawei.unibi.molap.keygenerator.KeyGenerator,long[],long[],java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.scanner.Scanner", scanner, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes, 1);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", new ByteArrayWrapper());
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaxKeyBasedOnDimensions", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])byte[]", bytes2, 1);
        Mockingbird.setReturnValue(scanner.isDone(), true);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore2, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore2, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore2, 1);
        InMemFilterModel inMemFilterModel2 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel2);
        Mockingbird.enterNormalMode();
        inMemFilterModel2.setIncludePredicateKeys(longs3);
        inMemFilterModel2.setExcludePredicateKeys(longs4);
        Mockingbird.enterRecordingMode();
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel2, dimensions, keyGenerator);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 0);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", Mockingbird.getProxyObject(FileHolderImpl.class));
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getScanner", "(com.huawei.unibi.molap.keygenerator.KeyGenerator,long[],long[],java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.scanner.Scanner", scanner2, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore2, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaxKeyBasedOnDimensions", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])byte[]", bytes4, 1);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue2);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,int,byte[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), measureAggregators2);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue3);
        byteArrayWrapper.setData(bytes7, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", byteArrayWrapper2);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue4);
        byteArrayWrapper2.setData(bytes8, 0, 0, bytes4, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap3.get(byteArrayWrapper2), null);
        Mockingbird.setReturnValue(false, byteArrayWrapper2, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(false, hashMap3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", new ByteArrayWrapper());
        Mockingbird.setReturnValue(scanner2.isDone(), true);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore3, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore3, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore3, 1);
        InMemFilterModel inMemFilterModel3 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel3);
        Mockingbird.enterNormalMode();
        inMemFilterModel3.setIncludePredicateKeys(longs5);
        inMemFilterModel3.setExcludePredicateKeys(longs6);
        Mockingbird.enterRecordingMode();
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel3, dimensions, keyGenerator);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        boolean existsOnAllDimensions = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "constraintsExistsOnAllDimensions", new Class[] {Map.class}, inMemoryQueryExecutor, new Object[] {map})).booleanValue();
        Mockingbird.setReturnValue(existsOnAllDimensions, true);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "handlePointQueries", "(int[],com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],com.huawei.unibi.molap.engine.datastorage.InMemoryCube,com.huawei.unibi.molap.engine.datastorage.DataStore,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)java.util.Map", null, 1);
        hashMap3.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore4, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore4, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore4, 1);
        InMemFilterModel inMemFilterModel4 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel4);
        Mockingbird.enterNormalMode();
        inMemFilterModel4.setIncludePredicateKeys(longs7);
        inMemFilterModel4.setExcludePredicateKeys(longs8);
        Mockingbird.enterRecordingMode();
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel4, dimensions, keyGenerator);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(map.size(), 1);
        boolean existsOnAllDimensions2 = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "constraintsExistsOnAllDimensions", new Class[] {Map.class}, inMemoryQueryExecutor, new Object[] {map})).booleanValue();
        Mockingbird.setReturnValue(existsOnAllDimensions2, true);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "handlePointQueries", "(int[],com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],com.huawei.unibi.molap.engine.datastorage.InMemoryCube,com.huawei.unibi.molap.engine.datastorage.DataStore,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)java.util.Map", null, 1);
        hashMap3.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore5, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore5, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore5, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore6, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore6, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore6, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getDimensionCache", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)com.huawei.unibi.molap.engine.datastorage.DimensionHierarichyStore", dimensionHierarichyStore7, 1);
        Mockingbird.setReturnValue(false, dimensionHierarichyStore7, "getHier", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.HierarchyStore", hierarchyStore7, 1);
        InMemFilterModel inMemFilterModel5 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel5);
        inMemoryQueryExecutor.computeColIncludePredicateKeys(map, inMemFilterModel5, dimensions, keyGenerator);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", keyGenException, 1);
        Mockingbird.setReturnValue(false, keyGenException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.executeHierarichies("", ints, list2, map, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[3];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(0));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(1));
        setPrivateField(measure6, "keyOrdinal", new Integer(0));
        setPrivateField(measure7, "keyOrdinal", new Integer(0));
        Mockingbird.enterNormalMode();
        measure8.setAggName("count");
        measure9.setAggName("");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        strings[2] = "";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type2);
        dimension7.setDataType(type3);
        dimension8.setDataType(type2);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure4);
        Mockingbird.setReturnValue(arrayList2.add(measure4), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure5);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure7);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure8);
        Mockingbird.setReturnValue(arrayList3.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure9);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), 1);
        Mockingbird.setReturnValue(arrayList3.get(0), new Integer(-2));
        Mockingbird.setReturnValue(list.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list4);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list4.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list4, dimension6), null);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints2, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list5);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(list5.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 2);
        Mockingbird.setReturnValue(list5.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list5, dimension8), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list6, 1);
        Mockingbird.setReturnValue(list6.add((Object) null), false);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list7);
        Mockingbird.setReturnValue(list7.size(), 0);
        Mockingbird.setReturnValue(list7.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list8);
        Mockingbird.setReturnValue(list8.size(), 0);
        Mockingbird.setReturnValue(list8.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(arrayList7.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(arrayList8.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[3];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(1));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(0));
        setPrivateField(measure6, "keyOrdinal", new Integer(1));
        Mockingbird.enterNormalMode();
        measure7.setAggName("count");
        measure8.setAggName("count");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        strings[2] = "";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type2);
        dimension7.setDataType(type3);
        dimension8.setDataType(type2);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure4);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure5);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(arrayList2.add(measure6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list4, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(list4.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure7);
        Mockingbird.setReturnValue(arrayList4.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure8);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList4, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(arrayList4.size(), 1);
        Mockingbird.setReturnValue(arrayList4.get(0), new Integer(0));
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list5, 1);
        Mockingbird.setReturnValue(list5.get(0), measure9);
        Mockingbird.setReturnValue(measure9.getCopy(), measure10);
        Mockingbird.setReturnValue(list2.add(measure10), false);
        Mockingbird.setReturnValue(list2.size(), -1);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList5, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list6);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(list6.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 2);
        Mockingbird.setReturnValue(list6.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list6, dimension6), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints2, 1);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list7);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(list7.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 2);
        Mockingbird.setReturnValue(list7.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list7, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list7, dimension8), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList7}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list8, 1);
        Mockingbird.setReturnValue(list8.add((Object) null), false);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list9);
        Mockingbird.setReturnValue(list9.size(), 0);
        Mockingbird.setReturnValue(list9.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list10);
        Mockingbird.setReturnValue(list10.size(), 0);
        Mockingbird.setReturnValue(list10.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(arrayList8.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(arrayList8.size(), 0);
        Mockingbird.setReturnValue(arrayList8.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList9 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList9);
        Mockingbird.setReturnValue(arrayList9.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList9, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator18);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator18.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks2() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[3];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        measure.setAggName("avg");
        measure2.setAggName("avg");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        strings[2] = "";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type2);
        dimension7.setDataType(type3);
        dimension8.setDataType(type2);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Mockingbird.setReturnValue(arrayList.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure2);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), -1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list3);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list3.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list3, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list3.size(), 2);
        Mockingbird.setReturnValue(list3.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list3, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list3, dimension6), null);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList3}, ints2, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list4);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list4.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list4, dimension8), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList4}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list5, 1);
        Mockingbird.setReturnValue(list5.add((Object) null), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list6);
        Mockingbird.setReturnValue(list6.size(), 0);
        Mockingbird.setReturnValue(list6.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list7);
        Mockingbird.setReturnValue(list7.size(), 0);
        Mockingbird.setReturnValue(list7.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(arrayList5.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(arrayList5.size(), 0);
        Mockingbird.setReturnValue(arrayList5.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(arrayList6.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(null, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks3() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[3];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(1));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(0));
        setPrivateField(measure6, "keyOrdinal", new Integer(1));
        Mockingbird.enterNormalMode();
        measure7.setAggName("count");
        measure8.setAggName("count");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        strings[2] = "";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type2);
        dimension7.setDataType(type3);
        dimension8.setDataType(type2);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure4);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure5);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(arrayList2.add(measure6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list4, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(list4.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure7);
        Mockingbird.setReturnValue(arrayList4.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure8);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList4, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(arrayList4.size(), -1);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList5, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list5);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(list5.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 2);
        Mockingbird.setReturnValue(list5.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list5, dimension6), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints2, 1);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list6);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(list6.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 2);
        Mockingbird.setReturnValue(list6.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list6, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list6, dimension8), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList7}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list7, 1);
        Mockingbird.setReturnValue(list7.add((Object) null), false);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list8);
        Mockingbird.setReturnValue(list8.size(), 0);
        Mockingbird.setReturnValue(list8.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list9);
        Mockingbird.setReturnValue(list9.size(), 0);
        Mockingbird.setReturnValue(list9.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(arrayList8.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(arrayList8.size(), 0);
        Mockingbird.setReturnValue(arrayList8.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList9 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList9);
        Mockingbird.setReturnValue(arrayList9.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList9, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator18);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator18.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks4() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure11 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure12 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[3];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(1));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(0));
        setPrivateField(measure6, "keyOrdinal", new Integer(1));
        Mockingbird.enterNormalMode();
        measure7.setAggName("count");
        measure8.setAggName("count");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        strings[2] = "";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type2);
        dimension7.setDataType(type3);
        dimension8.setDataType(type2);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure4);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure5);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(arrayList2.add(measure6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure7);
        Mockingbird.setReturnValue(arrayList3.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure8);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), 1);
        Mockingbird.setReturnValue(arrayList3.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure9);
        Mockingbird.setReturnValue(arrayList.contains(new Integer(0)), true);
        Mockingbird.setReturnValue(measure9.getCopy(), measure10);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure11);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, arrayList, "contains", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(measure11.getCopy(), measure12);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list4);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list4.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list4, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list4, dimension6), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints2, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), list5);
        Mockingbird.setReturnValue(false, type2, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean3, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(list5.get(0), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 2);
        Mockingbird.setReturnValue(list5.get(1), "");
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, list5, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates((List) list5, dimension8), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list6, 1);
        Mockingbird.setReturnValue(list6.add((Object) null), false);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list7);
        Mockingbird.setReturnValue(list7.size(), 0);
        Mockingbird.setReturnValue(list7.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list8);
        Mockingbird.setReturnValue(list8.size(), 0);
        Mockingbird.setReturnValue(list8.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(arrayList7.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(arrayList8.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator18);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator18.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks5() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure11 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure12 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[2];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type4 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type5 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(1));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(0));
        setPrivateField(measure6, "keyOrdinal", new Integer(1));
        Mockingbird.enterNormalMode();
        measure7.setAggName("count");
        measure8.setAggName("count");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type3);
        dimension7.setDataType(type4);
        dimension8.setDataType(type5);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure4);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure5);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(arrayList2.add(measure6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure7);
        Mockingbird.setReturnValue(arrayList3.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure8);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), 1);
        Mockingbird.setReturnValue(arrayList3.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure9);
        Mockingbird.setReturnValue(arrayList.contains(new Integer(0)), true);
        Mockingbird.setReturnValue(measure9.getCopy(), measure10);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure11);
        Mockingbird.setReturnValue(false, arrayList, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(measure11.getCopy(), measure12);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension6), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints2, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type4, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type5, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension8), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        Mockingbird.setReturnValue(map.size(), 0);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list4, 1);
        Mockingbird.setReturnValue(list4.add((Object) null), false);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(hashMap.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getKey(), obj);
        Mockingbird.setReturnValue(entry5.getValue(), list5);
        Mockingbird.setReturnValue(list5.size(), 0);
        Mockingbird.setReturnValue(list5.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getKey(), obj2);
        Mockingbird.setReturnValue(entry6.getValue(), list6);
        Mockingbird.setReturnValue(list6.size(), 0);
        Mockingbird.setReturnValue(list6.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), true);
        Mockingbird.setReturnValue(iterator15.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator13.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(arrayList7.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(arrayList8.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set5);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set5.iterator(), iterator18);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry7);
        Mockingbird.setReturnValue(entry7.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry7.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry8.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator18.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks6() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure11 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure12 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[2];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension5 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension6 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type3 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        int[] ints2 = new int[0];
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension7 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type4 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapMetadata.Dimension dimension8 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        SqlStatement.Type type5 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        MolapFilterInfo molapFilterInfo4 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        int[] ints3 = new int[0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints4 = new int[2];
        int[] ints5 = new int[2];
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set3 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry5 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo5 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry6 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo6 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry7 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo7 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        long[][] longs = new long[0][0];
        long[][][] longs2 = new long[0][0][0];
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Set set4 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry8 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry9 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        KeyGenerator keyGenerator3 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Set set5 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ByteArrayWrapper byteArrayWrapper = new ByteArrayWrapper();
        byte[] bytes2 = new byte[0];
        long[] longs3 = new long[0];
        byte[] bytes3 = new byte[0];
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        byte[] bytes4 = new byte[0];
        long[] longs4 = new long[0];
        byte[] bytes5 = new byte[0];
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Set set6 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator19 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry10 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper3 = new ByteArrayWrapper();
        byte[] bytes6 = new byte[0];
        long[] longs5 = new long[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Map.Entry entry11 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        ByteArrayWrapper byteArrayWrapper4 = new ByteArrayWrapper();
        byte[] bytes7 = new byte[0];
        long[] longs6 = new long[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        double[][] doubles = new double[0][0];
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "keyGenerator", keyGenerator);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(measure, "keyOrdinal", new Integer(0));
        setPrivateField(measure2, "keyOrdinal", new Integer(0));
        setPrivateField(measure3, "keyOrdinal", new Integer(1));
        setPrivateField(measure4, "keyOrdinal", new Integer(0));
        setPrivateField(measure5, "keyOrdinal", new Integer(0));
        setPrivateField(measure6, "keyOrdinal", new Integer(1));
        Mockingbird.enterNormalMode();
        measure7.setAggName("count");
        measure8.setAggName("count");
        inMemoryCube2.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator2);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        strings[0] = "";
        strings[1] = "X";
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        dimensions3[0] = dimension3;
        dimensions3[1] = dimension4;
        dimension5.setDataType(type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        dimension6.setDataType(type3);
        dimension7.setDataType(type4);
        dimension8.setDataType(type5);
        dimension3.setOrdinal(1);
        dimension4.setOrdinal(1);
        ints4[0] = 1;
        ints4[1] = 0;
        ints5[0] = -1;
        ints5[1] = 0;
        setPrivateField(obj, "metaData", sliceMetaData2);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData2.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData3);
        setPrivateField(obj2, "updateRequired", Boolean.TRUE);
        sliceMetaData3.setKeyGenerator(keyGenerator3);
        byteArrayWrapper.setActualData(bytes2);
        byteArrayWrapper2.setActualData(bytes4);
        byteArrayWrapper3.setActualData(bytes6);
        byteArrayWrapper4.setActualData(bytes7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), null);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure);
        Mockingbird.setReturnValue(list3.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(arrayList2.add(measure2), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure3);
        Mockingbird.setReturnValue(list3.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure4);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure5);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), measure6);
        Mockingbird.setReturnValue(arrayList2.add(measure6), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure7);
        Mockingbird.setReturnValue(arrayList3.add(new Integer(0)), false);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), measure8);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(arrayList3.size(), 1);
        Mockingbird.setReturnValue(arrayList3.get(0), new Integer(0));
        Mockingbird.setReturnValue(list2.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure9);
        Mockingbird.setReturnValue(arrayList.contains(new Integer(0)), true);
        Mockingbird.setReturnValue(measure9.getCopy(), measure10);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), true);
        Mockingbird.setReturnValue(iterator8.next(), measure11);
        Mockingbird.setReturnValue(false, arrayList, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(measure11.getCopy(), measure12);
        Mockingbird.setReturnValue(false, list2, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", Mockingbird.getProxyObject(InMemFilterModel.class));
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), dimension5);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension5), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), dimension6);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), null);
        Mockingbird.setReturnValue(false, type3, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension6), null);
        Mockingbird.setReturnValue(iterator10.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList5}, ints2, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator11);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), dimension7);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type4, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension7), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), true);
        Mockingbird.setReturnValue(iterator11.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), dimension8);
        Mockingbird.setReturnValue(entry4.getValue(), molapFilterInfo4);
        Mockingbird.setReturnValue(molapFilterInfo4.getEffectiveExcludedMembers(), null);
        Mockingbird.setReturnValue(false, type5, "equals", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(inMemoryQueryExecutor.getSurrogates(null, dimension8), null);
        Mockingbird.setReturnValue(iterator11.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "toIntArray", "(java.util.List)int[]", new Object[] {arrayList6}, ints3, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartKey", "(long[],long[][],long[][])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "generateKey", "(long[])byte[]", bytes, 1);
        TreeSet treeSet = (TreeSet) Mockingbird.getProxyObject(TreeSet.class);
        Mockingbird.replaceObjectForRecording(TreeSet.class, "<init>()", treeSet);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints4, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeyByteOffsets", "(int)int[]", ints5, 1);
        Mockingbird.setReturnValue(false, treeSet, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(treeSet.add(new Integer(0)), false);
        Mockingbird.setReturnValue(treeSet.size(), 2);
        Mockingbird.setReturnValue(treeSet.iterator(), iterator12);
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), true);
        Mockingbird.setReturnValue(iterator12.next(), new Integer(0));
        Mockingbird.setReturnValue(iterator12.hasNext(), false);
        Mockingbird.setReturnValue(map.size(), 2);
        Mockingbird.setReturnValue(map.entrySet(), set3);
        Mockingbird.setReturnValue(set3.iterator(), iterator13);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry5);
        Mockingbird.setReturnValue(entry5.getValue(), molapFilterInfo5);
        Mockingbird.setReturnValue(molapFilterInfo5.getEffectiveIncludedMembers(), list4);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry6);
        Mockingbird.setReturnValue(entry6.getValue(), molapFilterInfo6);
        Mockingbird.setReturnValue(molapFilterInfo6.getEffectiveIncludedMembers(), list5);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(iterator13.hasNext(), true);
        Mockingbird.setReturnValue(iterator13.next(), entry7);
        Mockingbird.setReturnValue(entry7.getValue(), molapFilterInfo7);
        Mockingbird.setReturnValue(molapFilterInfo7.getEffectiveIncludedMembers(), list6);
        Mockingbird.setReturnValue(list6.size(), 0);
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class);
        Mockingbird.replaceObjectForRecording(ParallelSliceExecutorImpl.class, "<init>(com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", parallelSliceExecutorImpl);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(cubeDataStore2.getDataStoreRange(), longs);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getValidRanges", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,long[][],long[],long[])long[][][]", longs2, 1);
        Mockingbird.setReturnValue(parallelSliceExecutorImpl.executeSliceInParallel(longs2), null);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list7, 1);
        Mockingbird.setReturnValue(list7.add((Object) null), false);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList7);
        Mockingbird.setReturnValue(hashMap.entrySet(), set4);
        Mockingbird.setReturnValue(set4.iterator(), iterator14);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), entry8);
        Mockingbird.setReturnValue(entry8.getKey(), obj);
        Mockingbird.setReturnValue(entry8.getValue(), list8);
        Mockingbird.setReturnValue(list8.size(), 0);
        Mockingbird.setReturnValue(list8.iterator(), iterator15);
        Mockingbird.setReturnValue(iterator15.hasNext(), false);
        Mockingbird.setReturnValue(false, arrayList7, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator14.hasNext(), true);
        Mockingbird.setReturnValue(iterator14.next(), entry9);
        Mockingbird.setReturnValue(entry9.getKey(), obj2);
        Mockingbird.setReturnValue(entry9.getValue(), list9);
        Mockingbird.setReturnValue(list9.size(), 0);
        Mockingbird.setReturnValue(list9.iterator(), iterator16);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), null);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator16.hasNext(), true);
        Mockingbird.setReturnValue(iterator16.next(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, hashMap2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator16.hasNext(), false);
        Mockingbird.setReturnValue(hashMap2.keySet(), set5);
        Mockingbird.setReturnValue(set5.iterator(), iterator17);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), byteArrayWrapper);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs3, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes3, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), true);
        Mockingbird.setReturnValue(iterator17.next(), byteArrayWrapper2);
        Mockingbird.setReturnValue(false, keyGenerator3, "getKeyArray", "(byte[])long[]", longs4, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes5, 1);
        Mockingbird.setReturnValue(iterator17.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.add(hashMap2), false);
        Mockingbird.setReturnValue(iterator14.hasNext(), false);
        Mockingbird.setReturnValue(arrayList7.size(), 0);
        Mockingbird.setReturnValue(arrayList7.iterator(), iterator18);
        Mockingbird.setReturnValue(iterator18.hasNext(), true);
        Mockingbird.setReturnValue(iterator18.next(), null);
        HashMap hashMap3 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap3);
        Mockingbird.setReturnValue(false, hashMap3, "putAll", "(java.util.Map)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(iterator18.hasNext(), false);
        Mockingbird.setReturnValue(list2.size(), 2);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList8);
        Mockingbird.setReturnValue(arrayList8.add(new Integer(0)), false);
        Mockingbird.setReturnValue(false, arrayList8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(hashMap3.size(), 0);
        Mockingbird.setReturnValue(hashMap3.entrySet(), set6);
        Mockingbird.replaceObjectForRecording(Double2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Double2ObjectOpenHashMap.class));
        Mockingbird.setReturnValue(set6.iterator(), iterator19);
        Mockingbird.setReturnValue(iterator19.hasNext(), true);
        Mockingbird.setReturnValue(iterator19.next(), entry10);
        Mockingbird.setReturnValue(entry10.getKey(), byteArrayWrapper3);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs5, 1);
        Mockingbird.setReturnValue(entry10.getValue(), measureAggregators);
        Mockingbird.setReturnValue(iterator19.hasNext(), true);
        Mockingbird.setReturnValue(iterator19.next(), entry11);
        Mockingbird.setReturnValue(entry11.getKey(), byteArrayWrapper4);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs6, 1);
        Mockingbird.setReturnValue(entry11.getValue(), measureAggregators2);
        Mockingbird.setReturnValue(iterator19.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getResult", "(java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,java.lang.String,double[][])double[][]", doubles, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "sortAndSetResult", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,java.util.List,int,int,int,double[][],int[],it.unimi.dsi.fastutil.doubles.Double2ObjectMap,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions2, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks7() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Thread thread = (Thread) Mockingbird.getProxyObject(Thread.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings = new String[0];
        String[] strings2 = new String[0];
        int[] ints = new int[0];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        long[][] longs = new long[0][0];
        long[][] longs2 = new long[0][0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        byte[] bytes = new byte[0];
        int[] ints2 = new int[0];
        InMemFilterModel inMemFilterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        SliceMetaData sliceMetaData2 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        KeyGenerator keyGenerator2 = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        String[] strings3 = new String[0];
        String[] strings4 = new String[0];
        int[] ints3 = new int[0];
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[0];
        long[][] longs3 = new long[0][0];
        long[][] longs4 = new long[0][0];
        MolapMetadata.Measure[] measures2 = new MolapMetadata.Measure[0];
        byte[] bytes2 = new byte[0];
        int[] ints4 = new int[0];
        InMemFilterModel inMemFilterModel2 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        CubeDataStore cubeDataStore4 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData3 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        SliceMetaData sliceMetaData4 = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        setPrivateField(inMemoryQueryExecutor, "queryId", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Thread.class, "currentThread", "()java.lang.Thread", new Object[] {}, thread, 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        inMemoryCube3.setRsStore(restructureStore);
        sliceMetaData.setKeyGenerator(keyGenerator);
        sliceMetaData.setDimensions(strings);
        sliceMetaData.setMeasures(strings2);
        sliceMetaData.setMeasureOrdinal(ints);
        setPrivateField(inMemFilterModel, "maxSize", new Integer(0));
        inMemFilterModel.setIncludePredicateKeys(longs);
        inMemFilterModel.setExcludePredicateKeys(longs2);
        setPrivateField(cubeDataStore2, "data", null);
        inMemoryCube4.setRsStore(restructureStore2);
        sliceMetaData2.setKeyGenerator(keyGenerator2);
        sliceMetaData2.setDimensions(strings3);
        sliceMetaData2.setMeasures(strings4);
        sliceMetaData2.setMeasureOrdinal(ints3);
        setPrivateField(inMemFilterModel2, "maxSize", new Integer(0));
        inMemFilterModel2.setIncludePredicateKeys(longs3);
        inMemFilterModel2.setExcludePredicateKeys(longs4);
        setPrivateField(cubeDataStore4, "data", null);
        setPrivateField(obj, "metaData", sliceMetaData3);
        setPrivateField(obj, "updateRequired", Boolean.FALSE);
        sliceMetaData3.setKeyGenerator(null);
        setPrivateField(obj2, "metaData", sliceMetaData4);
        setPrivateField(obj2, "updateRequired", Boolean.FALSE);
        sliceMetaData4.setKeyGenerator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, thread, "setName", "(java.lang.String)void", null, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMeasureIndexes", "(java.util.List,java.lang.String)java.util.List", new Object[] {list2, "avg"}, list3, 1);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getOriginalMeasures", "(java.util.List,java.util.List)java.util.List", new Object[] {list2, null}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMeasureIndexes", "(java.util.List,java.lang.String)java.util.List", new Object[] {null, "count"}, list4, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), new Integer(0));
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "updateMeasuresWithSum", "(java.util.List,java.util.List)void", new Object[] {list2, list3}, null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj3);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "updateRestructureHolder", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String[],java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions2, 1);
        InMemFilterModel inMemFilterModel3 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel3);
        Mockingbird.setReturnValue(false, keyGenerator, "getDimCount", "()int", new Integer(0), 1);
        Mockingbird.enterNormalMode();
        inMemFilterModel3.setIncludePredicateKeys(longs);
        inMemFilterModel3.setExcludePredicateKeys(longs2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColIncludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaxKeyBasedOnDimensions", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])byte[]", bytes, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaskedByte", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)int[]", ints2, 1);
        Mockingbird.setReturnValue(map.size(), 0);
        boolean existsOnAllDimensions = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "constraintsExistsOnAllDimensions", new Class[] {Map.class}, inMemoryQueryExecutor, new Object[] {map})).booleanValue();
        Mockingbird.setReturnValue(existsOnAllDimensions, true);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore2, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "handlePointQueries", "(int[],com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],com.huawei.unibi.molap.engine.datastorage.InMemoryCube,com.huawei.unibi.molap.engine.datastorage.DataStore,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)java.util.Map", null, 1);
        Mockingbird.setReturnValue(hashMap.get(obj3), null);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(hashMap.put(obj3, arrayList2), null);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore3, 1);
        Mockingbird.setReturnValue(false, restructureStore2, "getSliceMetaCache", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", sliceMetaData2, 1);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), "<init>()", obj4);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "updateRestructureHolder", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String[],java.util.List,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, arrayList3, "toArray", "(java.lang.Object[])java.lang.Object[]", dimensions3, 1);
        InMemFilterModel inMemFilterModel4 = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        Mockingbird.replaceObjectForRecording(InMemFilterModel.class, "<init>()", inMemFilterModel4);
        Mockingbird.setReturnValue(false, keyGenerator2, "getDimCount", "()int", new Integer(0), 1);
        Mockingbird.enterNormalMode();
        inMemFilterModel4.setIncludePredicateKeys(longs3);
        inMemFilterModel4.setExcludePredicateKeys(longs4);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColIncludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "computeColExcludePredicateKeys", "(java.util.Map,com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)void", null, 1);
        Mockingbird.setReturnValue(false, keyGenerator2, "getKeySizeInBytes", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "setStartAndEndKeys", "(long[],long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", null, 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures2, 1);
        Mockingbird.replaceObjectForRecording(SliceExecutionInfo.class, "<init>()", new SliceExecutionInfo());
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaxKeyBasedOnDimensions", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])byte[]", bytes2, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "getMaskedByte", "(com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)int[]", ints4, 1);
        Mockingbird.setReturnValue(map.size(), 0);
        boolean existsOnAllDimensions2 = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "constraintsExistsOnAllDimensions", new Class[] {Map.class}, inMemoryQueryExecutor, new Object[] {map})).booleanValue();
        Mockingbird.setReturnValue(existsOnAllDimensions2, true);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore4, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "handlePointQueries", "(int[],com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.metadata.MolapMetadata$Measure[],com.huawei.unibi.molap.engine.datastorage.InMemoryCube,com.huawei.unibi.molap.engine.datastorage.DataStore,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],com.huawei.unibi.molap.keygenerator.KeyGenerator)java.util.Map", null, 1);
        Mockingbird.setReturnValue(hashMap.get(obj4), null);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(hashMap.put(obj4, arrayList4), null);
        Mockingbird.setReturnValue(arrayList4.add((Object) null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(hashMap.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), obj);
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "mergeSliceResults", "(java.util.List)java.util.Map", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(arrayList5.add((Object) null), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), obj2);
        Mockingbird.setReturnValue(entry2.getValue(), null);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "mergeSliceResults", "(java.util.List)java.util.Map", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(arrayList5.add((Object) null), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "mergeSliceResults", "(java.util.List)java.util.Map", new Object[] {arrayList5}, null, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "createDataFromAggregates", "(java.util.List,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.util.Map,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],boolean,int,boolean,java.lang.String,java.util.List,int,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        inMemoryQueryExecutor.execute(cube, null, "", dimensions, (List) list2, map, false);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCubeUniqueName() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testInMemoryQueryExecutorColName", 100, "testInMemoryQueryExecutorName", new MolapMetadata.Cube("testInMemoryQueryExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        String result = new InMemoryQueryExecutor(dimList).getCubeUniqueName();
        assertEquals("result", "null_testInMemoryQueryExecutorName", result);
    }
    
    public void testGetDimensionCacheWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        inMemoryCube.setRolapCube(rolapCube);
        setPrivateField(rolapCube, "hierarchyList", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, list, "iterator", "()java.util.Iterator", iterator, 1);
        setPrivateField(rolapHierarchy, "subName", "");
        setPrivateField(rolapHierarchy2, "subName", "");
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), rolapHierarchy);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        DimensionHierarichyStore result = (DimensionHierarichyStore) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getDimensionCache", new Class[] {InMemoryCube.class, String.class}, inMemoryQueryExecutor, new Object[] {inMemoryCube, "X"});
        assertNull("result", result);
    }
    
    public void testGetFilterByteArrayWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        long[] longs = new long[0];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        byte[][] result = (byte[][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getFilterByteArray", new Class[] {long[].class, int.class, MolapMetadata.Dimension[].class, KeyGenerator.class}, inMemoryQueryExecutor, new Object[] {longs, new Integer(0), dimensions, null});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetMaxKeyBasedOnDimensionsWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[1];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "fill", "(long[],long)void", null, 1);
        byte[] bytes = new byte[0];
        dimensions[0] = dimension;
        dimensions[1] = dimension2;
        Mockingbird.enterNormalMode();
        dimension.setOrdinal(0);
        dimension2.setOrdinal(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, keyGenerator, "generateKey", "(long[])byte[]", bytes, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        byte[] result = inMemoryQueryExecutor.getMaxKeyBasedOnDimensions(dimensions, keyGenerator, dimensions2);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetMaxValueWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore4 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getMaxValue(), -1L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getMaxValue(), -1L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(memberStore3.getMaxValue(), 1L);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore4, 1);
        Mockingbird.setReturnValue(memberStore4.getMaxValue(), 2L);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Long result = inMemoryQueryExecutor.getMaxValue(dimension);
        assertEquals("result", 2L, result.longValue());
        assertNotNull("inMemoryQueryExecutor.slices", getPrivateField(inMemoryQueryExecutor, "slices"));
    }
    
    public void testGetMemberBySortIndexWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getActualKeyFromSortedIndex(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getActualKeyFromSortedIndex(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(memberStore3.getActualKeyFromSortedIndex(0), member);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Member result = (Member) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getMemberBySortIndex", new Class[] {List.class, MolapMetadata.Dimension.class, int.class}, inMemoryQueryExecutor, new Object[] {list, dimension, new Integer(0)});
        assertNull("result.getAttributes()", result.getAttributes());
    }
    
    public void testGetMemberBySortIndexWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getActualKeyFromSortedIndex(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getActualKeyFromSortedIndex(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Member result = (Member) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getMemberBySortIndex", new Class[] {List.class, MolapMetadata.Dimension.class, int.class}, inMemoryQueryExecutor, new Object[] {list, dimension, new Integer(0)});
        assertNull("result", result);
    }
    
    public void testGetMemberIdByName() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        dimension.setColName("");
        dimension.setActualCol(false);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getMemberId("", false), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(false, memberStore2, "getMemberId", "(java.lang.String,boolean)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Long result = (Long) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getMemberIdByName", new Class[] {List.class, MolapMetadata.Dimension.class, String.class}, null, new Object[] {list, dimension, ""});
        assertNull("result", result);
    }
    
    public void testGetResultWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        double[][] doubles = new double[0][0];
        double[][] doubles2 = new double[0][0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), null);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        ResultComparartor resultComparartor = (ResultComparartor) Mockingbird.getProxyObject(ResultComparartor.class);
        Mockingbird.replaceObjectForRecording(ResultComparartor.class, "<init>(int)", resultComparartor);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {doubles, resultComparartor}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "encodeToRows", "(double[][])double[][]", new Object[] {doubles}, doubles2, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        double[][] result = (double[][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getResult", new Class[] {List.class, MolapMetadata.Dimension[].class, boolean.class, String.class, double[][].class}, inMemoryQueryExecutor, new Object[] {list, dimensions, Boolean.FALSE, "", doubles});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetResultWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        double[][] doubles = new double[0][0];
        double[][] doubles2 = new double[0][0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "encodeToRows", "(double[][])double[][]", new Object[] {doubles}, doubles2, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        double[][] result = (double[][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getResult", new Class[] {List.class, MolapMetadata.Dimension[].class, boolean.class, String.class, double[][].class}, inMemoryQueryExecutor, new Object[] {null, dimensions, Boolean.TRUE, "", doubles});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetResultWithAggressiveMocks2() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        double[][] doubles = new double[0][0];
        double[][] doubles2 = new double[0][0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "encodeToRows", "(double[][])double[][]", new Object[] {doubles}, doubles2, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        double[][] result = (double[][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getResult", new Class[] {List.class, MolapMetadata.Dimension[].class, boolean.class, String.class, double[][].class}, inMemoryQueryExecutor, new Object[] {null, dimensions, Boolean.FALSE, "", doubles});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetScannerWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(null), false);
        Mockingbird.setReturnValue(CacheUtil.checkAnyIncludeExists(null), true);
        InMemoryFilter keyFilterImpl = (InMemoryFilter) callPrivateMethod("com.huawei.unibi.molap.engine.filters.KeyFilterImpl", "<init>", new Class[] {}, null, new Object[] {});
        Mockingbird.replaceObjectForRecording(KeyFilterImpl.class, "<init>(com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.keygenerator.KeyGenerator,long[])", keyFilterImpl);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs2), bytes2);
        FilterTreeScanner filterTreeScanner = (FilterTreeScanner) Mockingbird.getProxyObject(FilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(FilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", filterTreeScanner);
        filterTreeScanner.setFilter(keyFilterImpl);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Scanner result = (Scanner) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getScanner", new Class[] {KeyGenerator.class, long[].class, long[].class, Map.class, InMemFilterModel.class, FileHolder.class}, inMemoryQueryExecutor, new Object[] {keyGenerator, longs, longs2, null, null, null});
        assertNotNull("result", result);
    }
    
    public void testGetScannerWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        byte[] bytes = new byte[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(null), false);
        Mockingbird.setReturnValue(CacheUtil.checkAnyIncludeExists(null), false);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Scanner result = (Scanner) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getScanner", new Class[] {KeyGenerator.class, long[].class, long[].class, Map.class, InMemFilterModel.class, FileHolder.class}, inMemoryQueryExecutor, new Object[] {keyGenerator, longs, longs2, null, null, null});
        assertNotNull("result", result);
    }
    
    public void testGetSchemaName() throws Throwable {
        String result = new InMemoryQueryExecutor(new ArrayList(100)).getSchemaName();
        assertNull("result", result);
    }
    
    public void testGetSortIndexById() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getSortedIndex(0), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getSortedIndex(0), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(memberStore3.getSortedIndex(0), 0);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getSortIndexById", new Class[] {List.class, MolapMetadata.Dimension.class, int.class}, null, new Object[] {list, dimension, new Integer(0)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testGetSortIndexById1() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        dimension.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(memberStore.getSortedIndex(0), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(memberStore2.getSortedIndex(0), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getSortIndexById", new Class[] {List.class, MolapMetadata.Dimension.class, int.class}, null, new Object[] {list, dimension, new Integer(0)})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testGetSurrogatesWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[] result = inMemoryQueryExecutor.getSurrogates((List) list, null);
        assertNull("result", result);
    }
    
    public void testGetSurrogatesWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore2 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube3 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore3 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        InMemoryCube inMemoryCube4 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        MemberStore memberStore4 = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        setPrivateField(inMemoryQueryExecutor, "slices", list);
        dimension.setColName("");
        dimension.setActualCol(false);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(false, inMemoryCube, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore, 1);
        Mockingbird.setReturnValue(false, memberStore, "getMemberId", "(java.lang.String,boolean)int", new Integer(1), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube2);
        Mockingbird.setReturnValue(false, inMemoryCube2, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore2, 1);
        Mockingbird.setReturnValue(false, memberStore2, "getMemberId", "(java.lang.String,boolean)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube3);
        Mockingbird.setReturnValue(false, inMemoryCube3, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore3, 1);
        Mockingbird.setReturnValue(false, memberStore3, "getMemberId", "(java.lang.String,boolean)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), inMemoryCube4);
        Mockingbird.setReturnValue(false, inMemoryCube4, "getMemberCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.MemberStore", memberStore4, 1);
        Mockingbird.setReturnValue(false, memberStore4, "getMemberId", "(java.lang.String,boolean)int", new Integer(1), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(long[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[] result = inMemoryQueryExecutor.getSurrogates((List) list2, dimension);
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", 1L, result[0]);
    }
    
    public void testGetValidRangesWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", Mockingbird.getProxyObject(ArrayWrapper.class));
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[][][] result = (long[][][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getValidRanges", new Class[] {InMemoryCube.class, long[][].class, long[].class, long[].class}, inMemoryQueryExecutor, new Object[] {null, null, longs, longs2});
        assertNull("result", result);
    }
    
    public void testGetValidRangesWithAggressiveMocks1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        long[][] longs = new long[0][0];
        long[] longs2 = new long[0];
        long[] longs3 = new long[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", Mockingbird.getProxyObject(ArrayWrapper.class));
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[][][] result = (long[][][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getValidRanges", new Class[] {InMemoryCube.class, long[][].class, long[].class, long[].class}, inMemoryQueryExecutor, new Object[] {null, longs, longs2, longs3});
        assertNull("result", result);
    }
    
    public void testGetValidRangesWithAggressiveMocks2() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        long[][] longs = new long[3][0];
        long[] longs2 = new long[0];
        long[] longs3 = new long[0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        long[] longs6 = new long[0];
        longs[2] = longs2;
        longs[1] = longs3;
        longs[0] = longs4;
        Mockingbird.enterRecordingMode();
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper);
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper2);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper2), 0);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper3), 0);
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper4), -2);
        arrayWrapper.initialize(longs6);
        Mockingbird.setNormalReturnForVoid();
        ArrayWrapper arrayWrapper5 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper5);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper5), -1);
        ArrayWrapper arrayWrapper6 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper6);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper6), -1);
        ArrayWrapper arrayWrapper7 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper7);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper7), 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[][][] result = (long[][][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getValidRanges", new Class[] {InMemoryCube.class, long[][].class, long[].class, long[].class}, inMemoryQueryExecutor, new Object[] {null, longs, longs5, longs6});
        assertNull("result", result);
    }
    
    public void testGetValidRangesWithAggressiveMocks3() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        long[][] longs = new long[2][0];
        long[] longs2 = new long[0];
        long[] longs3 = new long[0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        longs[1] = longs2;
        longs[0] = longs3;
        Mockingbird.enterRecordingMode();
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper);
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper2);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper2), 0);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper3), -2);
        arrayWrapper.initialize(longs5);
        Mockingbird.setNormalReturnForVoid();
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper4), -1);
        ArrayWrapper arrayWrapper5 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper5);
        Mockingbird.setReturnValue(arrayWrapper.compareTo(arrayWrapper5), -1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        long[][][] result = (long[][][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "getValidRanges", new Class[] {InMemoryCube.class, long[][].class, long[].class, long[].class}, inMemoryQueryExecutor, new Object[] {null, longs, longs4, longs5});
        assertNull("result", result);
    }
    
    public void testHandlePointQueriesWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        int[] ints = new int[2];
        InMemFilterModel inMemFilterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        long[][] longs = new long[1][0];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        DataStore dataStore = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        long[] longs2 = new long[2];
        long[] longs3 = new long[1];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        long[] longs6 = new long[0];
        byte[] bytes = new byte[0];
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes2 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        long[] longs7 = new long[0];
        byte[] bytes3 = new byte[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        ints[0] = 0;
        ints[1] = 0;
        inMemFilterModel.setIncludePredicateKeys(longs);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        longs[0] = longs2;
        longs2[0] = 0L;
        longs2[1] = 0L;
        Mockingbird.enterNormalMode();
        keyValue.setBackKeyArray(bytes2);
        keyValue.setKeyOffset(0);
        keyValue.setKeyLength(0);
        measureAggregators[0] = measureAggregator;
        measureAggregators[1] = measureAggregator2;
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, longs3, "clone", "()java.lang.Object", longs4, 1);
        Mockingbird.setReturnValue(arrayList.add(longs4), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Object.class), "clone", "()java.lang.Object", longs5, 1);
        Mockingbird.setReturnValue(arrayList.add(longs5), false);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(0), 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), longs6);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs6), bytes);
        Mockingbird.setReturnValue(false, dataStore, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", keyValue, 1);
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), "<init>()", byteArrayWrapper);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setActualData", "(byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(AggUtil.getAggregators(measures, false, keyGenerator, null), measureAggregators);
        Mockingbird.setReturnValue(keyValue.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator, "agg", "(double,double)void", null, 1);
        Mockingbird.setReturnValue(keyValue.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator2, "agg", "(double,double)void", null, 1);
        Mockingbird.setReturnValue(hashMap.put(byteArrayWrapper, measureAggregators), null);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), longs7);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs7), bytes3);
        Mockingbird.setReturnValue(false, dataStore, "get", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        Map result = (Map) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "handlePointQueries", new Class[] {int[].class, InMemFilterModel.class, MolapMetadata.Measure[].class, InMemoryCube.class, DataStore.class, MolapMetadata.Dimension[].class, KeyGenerator.class}, inMemoryQueryExecutor, new Object[] {ints, inMemFilterModel, measures, null, dataStore, dimensions, keyGenerator});
        assertNotNull("result", result);
        assertNotNull("inMemoryQueryExecutorInMemoryQueryExecutor.LOGGER", getPrivateField(InMemoryQueryExecutor.class, "LOGGER"));
    }
    
    public void testLocalByteArrayWrapperEqualsWithAggressiveMocks() throws Throwable {
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper", "equals", new Class[] {Object.class}, byteArrayWrapper, new Object[] {null})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testLocalByteArrayWrapperEqualsWithAggressiveMocks1() throws Throwable {
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), true);
        ByteArrayWrapper byteArrayWrapper2 = new ByteArrayWrapper();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(ByteArrayWrapper.class, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper", "equals", new Class[] {Object.class}, byteArrayWrapper, new Object[] {byteArrayWrapper2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testLocalByteArrayWrapperHashCodeWithAggressiveMocks() throws Throwable {
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"), true);
        byte[] bytes = new byte[2];
        setPrivateField(byteArrayWrapper, "actualData", bytes);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$LocalByteArrayWrapper", "hashCode", new Class[] {}, byteArrayWrapper, new Object[] {})).intValue();
        assertEquals("result", 961, result);
    }
    
    public void testMergeByteArrayMapResult() throws Throwable {
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[0];
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MeasureAggregator[] measureAggregators3 = new MeasureAggregator[0];
        MeasureAggregator[] measureAggregators4 = new MeasureAggregator[0];
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MeasureAggregator[] measureAggregators5 = new MeasureAggregator[0];
        MeasureAggregator[] measureAggregators6 = new MeasureAggregator[0];
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MeasureAggregator[] measureAggregators7 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator[] measureAggregators8 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator3 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator4 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        measureAggregators7[0] = measureAggregator;
        measureAggregators7[1] = measureAggregator2;
        measureAggregators8[0] = measureAggregator3;
        measureAggregators8[1] = measureAggregator4;
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), null);
        Mockingbird.setReturnValue(entry.getValue(), measureAggregators);
        Mockingbird.setReturnValue(map2.containsKey(null), true);
        Mockingbird.setReturnValue(entry.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), measureAggregators2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), null);
        Mockingbird.setReturnValue(entry2.getValue(), measureAggregators3);
        Mockingbird.setReturnValue(map2.containsKey(null), false);
        Mockingbird.setReturnValue(entry2.getKey(), null);
        Mockingbird.setReturnValue(entry2.getValue(), measureAggregators4);
        Mockingbird.setReturnValue(map2.put((Object) null, measureAggregators4), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), null);
        Mockingbird.setReturnValue(entry3.getValue(), measureAggregators5);
        Mockingbird.setReturnValue(map2.containsKey(null), false);
        Mockingbird.setReturnValue(entry3.getKey(), null);
        Mockingbird.setReturnValue(entry3.getValue(), measureAggregators6);
        Mockingbird.setReturnValue(map2.put((Object) null, measureAggregators6), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getKey(), null);
        Mockingbird.setReturnValue(entry4.getValue(), measureAggregators7);
        Mockingbird.setReturnValue(map2.containsKey(null), true);
        Mockingbird.setReturnValue(entry4.getKey(), null);
        Mockingbird.setReturnValue(map2.get(null), measureAggregators8);
        Mockingbird.setReturnValue(false, measureAggregator3, "merge", "(com.huawei.unibi.molap.engine.aggregator.MeasureAggregator)void", null, 1);
        Mockingbird.setReturnValue(false, measureAggregator4, "merge", "(com.huawei.unibi.molap.engine.aggregator.MeasureAggregator)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        InMemoryQueryExecutor.mergeByteArrayMapResult((Map) map, (Map) map2);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMergeSliceResults() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        List arrayList = new ArrayList(1000);
        arrayList.add(new HashMap(100, 100.0F));
        arrayList.add(new IdentityHashMap());
        HashMap result = (HashMap) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "mergeSliceResults", new Class[] {List.class}, inMemoryQueryExecutor, new Object[] {arrayList});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMergeSliceResults1() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        HashMap hashMap = new HashMap(100, 100.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add((Object) null);
        arrayList.set(0, hashMap);
        HashMap result = (HashMap) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "mergeSliceResults", new Class[] {List.class}, inMemoryQueryExecutor, new Object[] {arrayList});
        assertSame("result", hashMap, result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {obj})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks1() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        setPrivateField(obj, "metaData", null);
        setPrivateField(obj2, "metaData", null);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks2() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        setPrivateField(obj, "metaData", sliceMetaData);
        setPrivateField(obj2, "metaData", sliceMetaData);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(sliceMetaData.equals(sliceMetaData), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks3() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {null})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks4() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        setPrivateField(obj, "metaData", null);
        setPrivateField(obj2, "metaData", new SliceMetaData());
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testRestructureHolderEqualsWithAggressiveMocks5() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        SliceMetaData sliceMetaData = (SliceMetaData) Mockingbird.getProxyObject(SliceMetaData.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        SliceMetaData sliceMetaData2 = new SliceMetaData();
        setPrivateField(obj, "metaData", sliceMetaData);
        setPrivateField(obj2, "metaData", sliceMetaData2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(sliceMetaData.equals(sliceMetaData2), false);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "equals", new Class[] {Object.class}, obj, new Object[] {obj2})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testRestructureHolderHashCodeWithAggressiveMocks() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        setPrivateField(obj, "rsStore", null);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "hashCode", new Class[] {}, obj, new Object[] {})).intValue();
        assertEquals("result", 31, result);
    }
    
    public void testRestructureHolderHashCodeWithAggressiveMocks1() throws Throwable {
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"), true);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(obj, "rsStore", restructureStore);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(restructureStore.hashCode(), -5);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder", "hashCode", new Class[] {}, obj, new Object[] {})).intValue();
        assertEquals("result", 26, result);
    }
    
    public void testSortMembersWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(InMemoryQueryExecutor.class, "LOGGER");
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        double[][] doubles = new double[0][0];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        double[][] doubles2 = new double[0][0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(InMemoryQueryExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        ResultComparartor resultComparartor = (ResultComparartor) Mockingbird.getProxyObject(ResultComparartor.class);
        Mockingbird.replaceObjectForRecording(ResultComparartor.class, "<init>(int)", resultComparartor);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {doubles, resultComparartor}, null, 1);
        Mockingbird.setReturnValue(false, inMemoryQueryExecutor, "encodeToRows", "(double[][])double[][]", new Object[] {doubles}, doubles2, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        double[][] result = (double[][]) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "sortMembers", new Class[] {double[][].class, InMemoryCube.class, MolapMetadata.Dimension[].class, String.class}, inMemoryQueryExecutor, new Object[] {doubles, null, dimensions, ""});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testTolist() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        int[] ints = new int[2];
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "tolist", new Class[] {int[].class}, inMemoryQueryExecutor, new Object[] {ints});
        assertEquals("result.size()", 2, result.size());
        assertEquals("(ArrayList) result.get(0)", new Integer(0), ((List) result).get(0));
    }
    
    public void testUpdateMeasuresWithSumWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(false, list2, "contains", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(list.set(0, (Object) null), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Mockingbird.setReturnValue(false, list2, "contains", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(measure.getCopy(), measure2);
        Mockingbird.setReturnValue(false, list, "set", "(int,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "updateMeasuresWithSum", new Class[] {List.class, List.class}, inMemoryQueryExecutor, new Object[] {list, list2});
        assertNull("inMemoryQueryExecutor.getCubeUniqueName()", inMemoryQueryExecutor.getCubeUniqueName());
    }
    
    public void testUpdateRestructureHolderWithAggressiveMocks() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class, true);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[2];
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        String[] strings = new String[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension[] dimensions3 = new MolapMetadata.Dimension[2];
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder"));
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        setPrivateField(inMemoryQueryExecutor, "dimTables", dimensions);
        dimensions2[0] = dimension;
        dimensions2[1] = dimension2;
        strings[0] = "X";
        strings[1] = "";
        dimensions[0] = dimension3;
        dimensions[1] = dimension4;
        setPrivateField(dimension3, "tableName", "");
        dimension3.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(dimension4, "tableName", "");
        Mockingbird.enterNormalMode();
        dimension4.setColName("");
        setPrivateField(dimension, "tableName", "");
        dimension.setColName("");
        setPrivateField(dimension2, "tableName", "");
        dimension2.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "X", 1);
        Mockingbird.enterTestMode(InMemoryQueryExecutor.class);
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "updateRestructureHolder", new Class[] {MolapMetadata.Dimension[].class, SliceMetaData.class, String[].class, List.class, MolapMetadata.Dimension[].class, Class.forName("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor$RestructureHolder")}, inMemoryQueryExecutor, new Object[] {dimensions2, null, strings, list, dimensions3, obj})).intValue();
        assertEquals("result", 2, result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testInMemoryQueryExecutorColName", 100, "testInMemoryQueryExecutorName", new MolapMetadata.Cube("testInMemoryQueryExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.add(dimension);
        try {
            new InMemoryQueryExecutor(dimList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryQueryExecutor.class, ex);
            assertEquals("(ArrayList) dimList.size()", 2, dimList.size());
        }
    }
    
    public void testMergeSliceResultsThrowsNullPointerException() throws Throwable {
        InMemoryQueryExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor", "mergeSliceResults", new Class[] {List.class}, inMemoryQueryExecutor, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryQueryExecutor.class, ex);
        }
    }
}

