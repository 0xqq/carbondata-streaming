/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:04:32 PM
 * Time to generate: 00:17.789 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.unibi.molap.engine.datasource.MolapDataSourceImpl;
import com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import java.util.ArrayList;
import java.util.List;
import mondrian.olap.Util;

public class MolapExecutorFactoryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapExecutorFactory.class;
    }
    
    public void testConstructor() throws Throwable {
        new MolapExecutorFactory();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetMolapExecutor() throws Throwable {
        InMemoryQueryExecutor result = (InMemoryQueryExecutor) MolapExecutorFactory.getMolapExecutor(new ArrayList(100), new MolapDataSourceImpl(Util.parseConnectString("Jdbc")));
        assertEquals("result.getCubeUniqueName()", "null_null", result.getCubeUniqueName());
    }
    
    public void testGetMolapExecutor1() throws Throwable {
        MolapExecutor result = MolapExecutorFactory.getMolapExecutor(new ArrayList(100), null);
        assertNull("result", result);
    }
    
    public void testGetMolapExecutorThrowsNullPointerException() throws Throwable {
        List dimTables = new ArrayList(100);
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testMolapExecutorFactoryColName", 100, "testMolapExecutorFactoryName");
        dimTables.add(dimension);
        try {
            MolapExecutorFactory.getMolapExecutor(dimTables, new MolapDataSourceImpl(Util.parseConnectString("Jdbc")));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryQueryExecutor.class, ex);
        }
    }
}

