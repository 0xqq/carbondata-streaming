/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:55:21 PM
 * Time to generate: 05:55.342 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage.tree;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.datastorage.store.impl.key.compressed.CompressedSingleArrayKeyFileStore;
import com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner;
import com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream;
import com.huawei.unibi.molap.engine.datastorage.streams.impl.FileDataInputStream;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.ParallelNonFilterTreeScanner;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.LeafNodeInfo;
import com.huawei.unibi.molap.util.MolapProperties;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import mondrian.olap.MondrianProperties;

public class CSBTreeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CSBTree.class;
    }
    
    public void testCSBTreePartConstructor() throws Throwable {
        int[] lens = new int[2];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreePartTableName", true);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart", "<init>", new Class[] {CSBTree.class}, null, new Object[] {cSBTree});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructor() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        assertTrue("cSBTree.isFileStore", ((Boolean) getPrivateField(cSBTree, "isFileStore")).booleanValue());
        assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
        assertEquals("cSBTree.tableName", "testCSBTreeTableName", getPrivateField(cSBTree, "tableName"));
        assertEquals("cSBTree.leafMaxEntry", 8192, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
        assertEquals("cSBTree.upperMaxChildren", 33, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 1, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 32, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertEquals("cSBTree.cpuUsagePercentage", 2, ((Number) getPrivateField(cSBTree, "cpuUsagePercentage")).intValue());
        assertEquals("cSBTree.valueCount", 100, ((Number) getPrivateField(cSBTree, "valueCount")).intValue());
        assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testConstructor1() throws Throwable {
        CSBTree cSBTree = new CSBTree(64, 100, 1000);
        assertEquals("cSBTree.leafMaxEntry", 32, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.upperMaxChildren", 1001, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 1, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 1000, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testConstructor2() throws Throwable {
        CSBTree cSBTree = new CSBTree(63, 100, 1000);
        assertEquals("cSBTree.leafMaxEntry", 32, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.upperMaxChildren", 1001, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 2, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 1000, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testConstructor3() throws Throwable {
        CSBTree cSBTree = new CSBTree(65, 100, 1000);
        assertEquals("cSBTree.leafMaxEntry", 32, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.upperMaxChildren", 1001, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 1, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 1000, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testConstructor4() throws Throwable {
        storeStaticField(CSBTree.class, "LOGGER");
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapProperties.getProperty("com.huawei.datastore.internalnodesize", "32"), "");
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(CSBTree.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(molapProperties.getProperty("molap.leaf.node.size", "8192"), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(mondrianProperties.getProperty("molap.rangeSplitValue", "3500000"), "");
        Mockingbird.setException(true, Long.class, "parseLong", "(java.lang.String)long", numberFormatException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(molapProperties.getProperty("molap.number.of.cores", "2"), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode();
        CSBTree cSBTree = new CSBTree(null, 0, "", false);
        assertFalse("cSBTree.isFileStore", ((Boolean) getPrivateField(cSBTree, "isFileStore")).booleanValue());
        assertNotNull("cSBTreeCSBTree.LOGGER", getPrivateField(CSBTree.class, "LOGGER"));
        assertEquals("cSBTree.tableName", "", getPrivateField(cSBTree, "tableName"));
        assertEquals("cSBTree.leafMaxEntry", 0, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.getRangeSplitValue()", 6000000L, cSBTree.getRangeSplitValue());
        assertEquals("cSBTree.upperMaxChildren", 1, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 1, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 0, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertEquals("cSBTree.cpuUsagePercentage", 0, ((Number) getPrivateField(cSBTree, "cpuUsagePercentage")).intValue());
        assertEquals("cSBTree.valueCount", 0, ((Number) getPrivateField(cSBTree, "valueCount")).intValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testConstructor5() throws Throwable {
        storeStaticField(CSBTree.class, "LOGGER");
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        NumberFormatException numberFormatException = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        NumberFormatException numberFormatException2 = (NumberFormatException) Mockingbird.getProxyObject(NumberFormatException.class);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapProperties.getProperty("com.huawei.datastore.internalnodesize", "32"), "");
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(CSBTree.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(molapProperties.getProperty("molap.leaf.node.size", "8192"), "");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(mondrianProperties.getProperty("molap.rangeSplitValue", "3500000"), "");
        Mockingbird.setException(true, Long.class, "parseLong", "(java.lang.String)long", numberFormatException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(molapProperties.getProperty("molap.number.of.cores", "2"), "");
        Mockingbird.setException(true, Integer.class, "parseInt", "(java.lang.String)int", numberFormatException2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode();
        CSBTree cSBTree = new CSBTree(null, 0, "", false);
        assertFalse("cSBTree.isFileStore", ((Boolean) getPrivateField(cSBTree, "isFileStore")).booleanValue());
        assertNotNull("cSBTreeCSBTree.LOGGER", getPrivateField(CSBTree.class, "LOGGER"));
        assertEquals("cSBTree.tableName", "", getPrivateField(cSBTree, "tableName"));
        assertEquals("cSBTree.leafMaxEntry", 0, ((Number) getPrivateField(cSBTree, "leafMaxEntry")).intValue());
        assertEquals("cSBTree.getRangeSplitValue()", 6000000L, cSBTree.getRangeSplitValue());
        assertEquals("cSBTree.upperMaxChildren", 1, ((Number) getPrivateField(cSBTree, "upperMaxChildren")).intValue());
        assertEquals("cSBTree.nCacheKeys", 1, ((Number) getPrivateField(cSBTree, "nCacheKeys")).intValue());
        assertEquals("cSBTree.upperMaxEntry", 0, ((Number) getPrivateField(cSBTree, "upperMaxEntry")).intValue());
        assertEquals("cSBTree.cpuUsagePercentage", 80, ((Number) getPrivateField(cSBTree, "cpuUsagePercentage")).intValue());
        assertEquals("cSBTree.valueCount", 0, ((Number) getPrivateField(cSBTree, "valueCount")).intValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testBinarySearchNonLeafNode() throws Throwable {
        int[] lens = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        byte[] bytes = new byte[2];
        Object result = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "binarySearchNonLeafNode", new Class[] {byte[].class, CSBNode.class, FileHolder.class}, cSBTree, new Object[] {bytes, new CSBTreeLeafNode(100, 1000, 0, false), new FileHolderImpl()});
        assertNull("result", result);
        assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testBuild() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        cSBTree.build(source, true);
        assertEquals("cSBTree.root.getnKeys()", 0, ((CSBNode) getPrivateField(cSBTree, "root")).getnKeys());
        assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
        assertNull("cSBTree.getRanges()", cSBTree.getRanges());
        assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
        assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
        assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testBuild1() throws Throwable {
        int[] lens = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        sources.add(fileDataInputStream);
        cSBTree.build(sources, true);
        assertEquals("cSBTree.root.getnKeys()", 0, ((CSBNode) getPrivateField(cSBTree, "root")).getnKeys());
        assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
        assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
        assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
        assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testBuildWithAggressiveMocks() throws Throwable {
        storeStaticField(CSBTree.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        byte[] bytes = new byte[0];
        LeafNodeInfo leafNodeInfo2 = new LeafNodeInfo();
        byte[] bytes2 = new byte[0];
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        CSBNode[] cSBNodes = new CSBNode[0];
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        byte[] bytes3 = new byte[0];
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        byte[] bytes4 = new byte[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(cSBTree, "isFileStore", Boolean.FALSE);
        setPrivateField(cSBTree, "upperMaxChildren", new Integer(2));
        setPrivateField(cSBTree, "upperMaxEntry", new Integer(1));
        setPrivateField(cSBTree, "tableName", "");
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        setPrivateField(cSBTree, "nLeaf", new Integer(0));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.enterNormalMode();
        leafNodeInfo.setNumberOfKeys(0);
        leafNodeInfo.setStartKey(bytes);
        leafNodeInfo2.setNumberOfKeys(1);
        leafNodeInfo2.setStartKey(bytes2);
        setPrivateField(CSBTree.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", fileHolderImpl);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(dataInputStream.getValueCompressionMode(), null);
        Mockingbird.setReturnValue(dataInputStream.getLeafNodeInfo(), list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), leafNodeInfo);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) Mockingbird.getProxyObject(CSBTreeLeafNode.class);
        Mockingbird.replaceObjectForRecording(CSBTreeLeafNode.class, "<init>(int,int,boolean,com.huawei.unibi.molap.datastorage.store.FileHolder,com.huawei.unibi.molap.metadata.LeafNodeInfo,com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel)", cSBTreeLeafNode);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList2.add(arrayList3), false);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), leafNodeInfo2);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        CSBTreeLeafNode cSBTreeLeafNode2 = (CSBTreeLeafNode) Mockingbird.getProxyObject(CSBTreeLeafNode.class);
        Mockingbird.replaceObjectForRecording(CSBTreeLeafNode.class, "<init>(int,int,boolean,com.huawei.unibi.molap.datastorage.store.FileHolder,com.huawei.unibi.molap.metadata.LeafNodeInfo,com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel)", cSBTreeLeafNode2);
        cSBTreeLeafNode.setNextNode(cSBTreeLeafNode2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CSBTree.class, true), "caclulateRanges", "(int,java.util.ArrayList,java.util.List,com.huawei.unibi.molap.datastorage.store.FileHolder)java.util.List", list2, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeySizeInBytes", "()int", new Integer(0), 1);
        CSBInternalNode cSBInternalNode = (CSBInternalNode) Mockingbird.getProxyObject(CSBInternalNode.class);
        Mockingbird.replaceObjectForRecording(CSBInternalNode.class, "<init>(int,int,java.lang.String)", cSBInternalNode);
        Mockingbird.setReturnValue(false, arrayList4, "add", "(java.lang.Object)boolean", boolean2, 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList6);
        Mockingbird.setReturnValue(arrayList5.add(arrayList6), false);
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, cSBNodes, 1);
        cSBInternalNode.setChildren(cSBNodes);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.get(0), list3);
        Mockingbird.setReturnValue(list3.get(1), bytes3);
        cSBInternalNode.setKey(0, bytes3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.get(0), list4);
        Mockingbird.setReturnValue(list4.get(1), bytes4);
        Mockingbird.setReturnValue(arrayList6.add(bytes4), false);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        fileHolderImpl.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CSBTree.class);
        cSBTree.build(dataInputStream, false);
        assertNull("cSBTree.getRanges()", cSBTree.getRanges());
        assertNotNull("cSBTreeCSBTree.LOGGER", getPrivateField(CSBTree.class, "LOGGER"));
        assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
        assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
        assertEquals("cSBTree.size()", 1L, cSBTree.size());
        assertEquals("cSBTree.nLeaf", 2, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
        assertNotNull("cSBTree.root", getPrivateField(cSBTree, "root"));
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testCaclulateRanges() throws Throwable {
        List arrayList = new ArrayList(100);
        int[] lens = new int[0];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(-3), new ArrayList(1000), arrayList, new FileHolderImpl()});
        assertEquals("cSBTree.getRangeSplitValue()", -1L, cSBTree.getRangeSplitValue());
        assertSame("result", arrayList, result);
        assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testCaclulateRanges1() throws Throwable {
        int[] lens = new int[0];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        ArrayList arrayList = new ArrayList(100);
        FileHolder fileHolderImpl = new FileHolderImpl();
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterTestMode(CSBTree.class);
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(0), arrayList, arrayList2, fileHolderImpl});
        assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
        assertEquals("result.size()", 0, result.size());
        assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testCaclulateRangesWithAggressiveMocks() throws Throwable {
        storeStaticField(CSBTree.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(cSBTree, "cpuUsagePercentage", new Integer(1));
        setPrivateField(cSBTree, "nLeaf", new Integer(0));
        setPrivateField(CSBTree.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), "<init>(com.huawei.unibi.molap.engine.datastorage.tree.CSBTree)", obj);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(0), 1);
        setPrivateField(obj, "rangeVals", null);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList2);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {obj}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CSBTree.class, true), "processRanges", "(java.util.List,com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.enterTestMode(CSBTree.class);
        List result = (List) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(1), arrayList, null, null});
        assertNull("result", result);
        assertNotNull("cSBTreeCSBTree.LOGGER", getPrivateField(CSBTree.class, "LOGGER"));
        assertEquals("cSBTree.getRangeSplitValue()", 1L, cSBTree.getRangeSplitValue());
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testGet() throws Throwable {
        byte[] key = new byte[1];
        byte[] startKey = new byte[2];
        byte[] endKey = new byte[2];
        int[] msrs = new int[2];
        int[] lens = new int[0];
        Scanner scanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        KeyValue result = new CSBTree(100, 1000, 0).get(key, scanner);
        assertNull("result", result);
    }
    
    public void testGetCompressionModel() throws Throwable {
        int[] lens = new int[0];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        ValueCompressionModel result = cSBTree.getCompressionModel();
        assertNull("result", result);
    }
    
    public void testGetKeyFromPartWithAggressiveMocks() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CSBNode[] cSBNodes = new CSBNode[1];
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) Mockingbird.getProxyObject(CSBTreeLeafNode.class);
        byte[] bytes = new byte[0];
        setPrivateField(cSBTree, "upperMaxChildren", new Integer(1));
        setPrivateField(cSBTree, "leafMaxEntry", new Integer(1));
        setPrivateField(obj, "internalNodeGroups", arrayList);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, cSBNodes, 1);
        cSBNodes[0] = cSBTreeLeafNode;
        Mockingbird.setReturnValue(false, cSBTreeLeafNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes, 1);
        Mockingbird.enterTestMode(CSBTree.class);
        byte[] result = (byte[]) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "getKeyFromPart", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), long.class, FileHolder.class}, cSBTree, new Object[] {obj, new Long(2L), null});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetNext() throws Throwable {
        int[] lens = new int[0];
        byte[] key = new byte[2];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        byte[] startKey = new byte[1];
        byte[] endKey = new byte[1];
        int[] msrs = new int[0];
        int[] lens2 = new int[0];
        Scanner scanner = new ParallelNonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens2), 100L, new KeyValue(), msrs, new FileHolderImpl());
        KeyValue result = cSBTree.getNext(key, scanner);
        assertNull("result", result);
    }
    
    public void testGetNextWithAggressiveMocks() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes2 = new byte[0];
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(false, cSBTree, "binarySearchNonLeafNode", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", cSBNode2, 1);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(false, cSBTree, "binarySearchNonLeafNode", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", cSBNode3, 1);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(false, cSBNode3, "getBackKeyArray", "(com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.getNext(bytes, null);
        assertNull("result", result);
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testGetRangeSplitValue() throws Throwable {
        int[] lens = new int[0];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        long result = cSBTree.getRangeSplitValue();
        assertEquals("result", 3500000L, result);
    }
    
    public void testGetRanges() throws Throwable {
        long[][] result = new CSBTree(100, 1000, 0).getRanges();
        assertNull("result", result);
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes2 = new byte[0];
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scanner.getFileHolder(), null);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(false, cSBTree, "binarySearchNonLeafNode", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode, null}, cSBNode2, 1);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(false, cSBTree, "binarySearchNonLeafNode", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode,com.huawei.unibi.molap.datastorage.store.FileHolder)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode2, null}, cSBNode3, 1);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getBackKeyArray(null), bytes2);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.get(bytes, scanner);
        assertNull("result", result);
    }
    
    public void testProcessRangesWithAggressiveMocks() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        setPrivateField(cSBTree, "rangeSplitValue", new Long(1L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        setPrivateField(obj, "totalKeys", new Long(-1L));
        setPrivateField(obj2, "totalKeys", new Long(0L));
        Mockingbird.setReturnValue(list.get(0), obj);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), obj2);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterTestMode(CSBTree.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "processRanges", new Class[] {List.class, Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), FileHolder.class}, cSBTree, new Object[] {list, null, null});
        assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testProcessRangesWithAggressiveMocks1() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        byte[] bytes = new byte[0];
        long[] longs = new long[0];
        byte[] bytes2 = new byte[0];
        long[] longs2 = new long[0];
        byte[] bytes3 = new byte[0];
        long[] longs3 = new long[0];
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"));
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        setPrivateField(cSBTree, "rangeSplitValue", new Long(1L));
        setPrivateField(obj, "rangeVals", list2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        setPrivateField(obj2, "totalKeys", new Long(3L));
        setPrivateField(obj3, "totalKeys", new Long(-1L));
        Mockingbird.setReturnValue(list.get(0), obj2);
        Mockingbird.setReturnValue(false, cSBTree, "getKeyFromPart", "(com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart,long,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", new Object[] {obj2, new Long(1L), null}, bytes, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeyArray(bytes), longs);
        Mockingbird.setReturnValue(list2.add(longs), false);
        Mockingbird.setReturnValue(false, cSBTree, "getKeyFromPart", "(com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart,long,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", new Object[] {obj2, new Long(2L), null}, bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeyArray(bytes2), longs2);
        Mockingbird.setReturnValue(list2.add(longs2), false);
        Mockingbird.setReturnValue(false, cSBTree, "getKeyFromPart", "(com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart,long,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", new Object[] {obj2, new Long(3L), null}, bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeyArray(bytes3), longs3);
        Mockingbird.setReturnValue(list2.add(longs3), false);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), obj3);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterTestMode(CSBTree.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "processRanges", new Class[] {List.class, Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), FileHolder.class}, cSBTree, new Object[] {list, obj, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSearch() throws Throwable {
        int[] lens = new int[0];
        int[] lens2 = new int[2];
        byte[] startKey = new byte[3];
        byte[] endKey = new byte[0];
        int[] msrs = new int[2];
        Scanner scanner = new ParallelNonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), 100L, new KeyValue(), msrs, null);
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens2), 100, "testCSBTreeTableName", true);
        byte[] key = new byte[3];
        KeyValue result = cSBTree.search(key, true, scanner);
        assertNull("result", result);
    }
    
    public void testSearchWithAggressiveMocks() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes4 = new byte[0];
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scanner.getFileHolder(), null);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode.getBackKeyArray(null), bytes2);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(0), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode2.getBackKeyArray(null), bytes3);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(0), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getBackKeyArray(null), bytes4);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        scanner.setDataStore(cSBTree, null, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.search(bytes, true, scanner);
        assertNull("result", result);
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks1() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes4 = new byte[0];
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), -1);
        Mockingbird.setReturnValue(false, cSBNode, "getBackKeyArray", "(com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(0), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), -1);
        Mockingbird.setReturnValue(false, cSBNode2, "getBackKeyArray", "(com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(0), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(false, cSBNode3, "getBackKeyArray", "(com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 1);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,byte[],com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.setReturnValue(cSBNode3.getValueSize(), (short)0);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.search(bytes, true, null);
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks2() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes4 = new byte[0];
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scanner.getFileHolder(), null);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode.getBackKeyArray(null), bytes2);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(0), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode2.getBackKeyArray(null), bytes3);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(0), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getBackKeyArray(null), bytes4);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 1);
        scanner.setDataStore(cSBTree, cSBNode3, 0);
        Mockingbird.setNormalReturnForVoid();
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        keyValue.setBlock(cSBNode3, bytes4, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.setReturnValue(cSBNode3.getValueSize(), (short)0);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.search(bytes, true, scanner);
        assertNotNull("result", result);
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks3() throws Throwable {
        CSBTree cSBTree = (CSBTree) Mockingbird.getProxyObject(CSBTree.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes4 = new byte[0];
        CSBNode cSBNode4 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        setPrivateField(cSBTree, "root", cSBNode);
        setPrivateField(cSBTree, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(scanner.getFileHolder(), null);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode.getBackKeyArray(null), bytes2);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(0), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode2.getBackKeyArray(null), bytes3);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(0), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getBackKeyArray(null), bytes4);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), -1);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        scanner.setDataStore(cSBTree, null, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(cSBNode3.getNext(), cSBNode4);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        keyValue.setBlock(cSBNode3, bytes4, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.setReturnValue(cSBNode3.getValueSize(), (short)0);
        Mockingbird.enterTestMode(CSBTree.class);
        KeyValue result = cSBTree.search(bytes, true, scanner);
        assertNotNull("result", result);
        assertNotNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
    }
    
    public void testSize() throws Throwable {
        long result = new CSBTree(100, 1000, 0).size();
        assertEquals("result", 0L, result);
    }
    
    public void testConstructorThrowsArithmeticException() throws Throwable {
        try {
            new CSBTree(0, 100, 1000);
            fail("Expected ArithmeticException to be thrown");
        } catch (ArithmeticException ex) {
            assertEquals("ex.getClass()", ArithmeticException.class, ex.getClass());
            assertThrownBy(CSBTree.class, ex);
        }
    }
    
    public void testBinarySearchNonLeafNodeThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBNode cSBInternalNode = new CSBInternalNode(100, 1000, "testCSBTreeTableName");
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        byte[] bytes = new byte[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "binarySearchNonLeafNode", new Class[] {byte[].class, CSBNode.class, FileHolder.class}, cSBTree, new Object[] {bytes, cSBInternalNode, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testBinarySearchNonLeafNodeThrowsNullPointerException1() throws Throwable {
        int[] measureLength = new int[3];
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        leafNodeInfo.setMeasureLength(measureLength);
        ValueCompressionModel compressionModel = ValueCompressionUtil.getValueCompressionModel("testCSBTreeMeasureMetaDataFileLocation", 100);
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        byte[] bytes = new byte[0];
        CSBNode cSBTreeLeafNode = new CSBTreeLeafNode(100, 1000, true, new FileHolderImpl(100), leafNodeInfo, compressionModel);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "binarySearchNonLeafNode", new Class[] {byte[].class, CSBNode.class, FileHolder.class}, cSBTree, new Object[] {bytes, cSBTreeLeafNode, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CompressedSingleArrayKeyFileStore.class, ex);
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testBinarySearchNonLeafNodeThrowsNullPointerException2() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) Mockingbird.getProxyObject(CSBTreeLeafNode.class);
        byte[] bytes = new byte[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBTreeLeafNode.getnKeys(), 0);
        byte[] bytes2 = new byte[0];
        Mockingbird.setReturnValue(cSBTreeLeafNode.getBackKeyArray(fileHolderImpl), bytes2);
        Mockingbird.enterTestMode(CSBTree.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "binarySearchNonLeafNode", new Class[] {byte[].class, CSBNode.class, FileHolder.class}, cSBTree, new Object[] {bytes, cSBTreeLeafNode, fileHolderImpl});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testBinarySearchNonLeafNodeThrowsNullPointerException3() throws Throwable {
        byte[] bytes = new byte[2];
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "binarySearchNonLeafNode", new Class[] {byte[].class, CSBNode.class, FileHolder.class}, cSBTree, new Object[] {bytes, null, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testBuildThrowsArithmeticException() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        try {
            cSBTree.build(source, true);
            fail("Expected ArithmeticException to be thrown");
        } catch (ArithmeticException ex) {
            assertEquals("ex.getClass()", ArithmeticException.class, ex.getClass());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertNull("(FileDataInputStream) source.getValueCompressionMode()", ((FileDataInputStream) source).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsArithmeticException1() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        sources.add(fileDataInputStream);
        try {
            cSBTree.build(sources, true);
            fail("Expected ArithmeticException to be thrown");
        } catch (ArithmeticException ex) {
            assertEquals("ex.getClass()", ArithmeticException.class, ex.getClass());
            assertThrownBy(CSBTree.class, ex);
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 1, sources.size());
        }
    }
    
    public void testBuildThrowsIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        List sources = new ArrayList(100);
        try {
            cSBTree.build(sources, true);
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 0, sources.size());
        }
    }
    
    public void testBuildThrowsNullPointerException() throws Throwable {
        CSBTree cSBTree = new CSBTree(null, 100, "testCSBTreeTableName", true);
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        try {
            cSBTree.build(source, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("(FileDataInputStream) source.getValueCompressionMode()", ((FileDataInputStream) source).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[0];
        DataInputStream source = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        int[] lens2 = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens2);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        try {
            cSBTree.build(source, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
            assertNull("(ScannersInputCombiner) source.getValueCompressionMode()", ((ScannersInputCombiner) source).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNullPointerException2() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        try {
            cSBTree.build((DataInputStream) null, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testBuildThrowsNullPointerException3() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        DataInputStream source = new FileDataInputStream(null, 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        try {
            cSBTree.build(source, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
            assertNull("(FileDataInputStream) source.getValueCompressionMode()", ((FileDataInputStream) source).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNullPointerException4() throws Throwable {
        CSBTree cSBTree = new CSBTree(null, 100, "testCSBTreeTableName", true);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        sources.add(fileDataInputStream);
        try {
            cSBTree.build(sources, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertEquals("(ArrayList) sources.size()", 1, sources.size());
        }
    }
    
    public void testBuildThrowsNullPointerException5() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        int[] lens = new int[2];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(1), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(0), true);
        sources.add(fileDataInputStream);
        sources.add(scannersInputCombiner);
        try {
            cSBTree.build(sources, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 2, sources.size());
        }
    }
    
    public void testBuildThrowsNullPointerException6() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        List sources = new ArrayList(100);
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(1000), keyGenerator, new ArrayList(0), true);
        sources.add(scannersInputCombiner);
        try {
            cSBTree.build(sources, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 3500000L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 1, sources.size());
        }
    }
    
    public void testBuildThrowsNullPointerException7() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream(null, 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        sources.add(fileDataInputStream);
        try {
            cSBTree.build(sources, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 1, sources.size());
        }
    }
    
    public void testBuildThrowsNullPointerException8() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        List sources = new ArrayList(100);
        try {
            cSBTree.build(sources, sources.add((Object) null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.getCompressionModel()", cSBTree.getCompressionModel());
            assertNull("cSBTree.getRanges()", cSBTree.getRanges());
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertEquals("cSBTree.size()", 0L, cSBTree.size());
            assertEquals("cSBTree.nLeaf", 0, ((Number) getPrivateField(cSBTree, "nLeaf")).intValue());
            assertNull("cSBTree.root", getPrivateField(cSBTree, "root"));
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
            assertEquals("(ArrayList) sources.size()", 1, sources.size());
        }
    }
    
    public void testCaclulateRangesThrowsArithmeticException() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(100), new ArrayList(100), new ArrayList(1000), new FileHolderImpl()});
            fail("Expected ArithmeticException to be thrown");
        } catch (ArithmeticException ex) {
            assertEquals("ex.getClass()", ArithmeticException.class, ex.getClass());
            assertThrownBy(CSBTree.class, ex);
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertEquals("cSBTree.getRangeSplitValue()", 0L, cSBTree.getRangeSplitValue());
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testCaclulateRangesThrowsIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(3), new ArrayList(100), new ArrayList(1000), new FileHolderImpl()});
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("cSBTree.getRangeSplitValue()", 1L, cSBTree.getRangeSplitValue());
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testCaclulateRangesThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "caclulateRanges", new Class[] {int.class, ArrayList.class, List.class, FileHolder.class}, cSBTree, new Object[] {new Integer(100), null, arrayList, new FileHolderImpl(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cSBTree.getRangeSplitValue()", 50L, cSBTree.getRangeSplitValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertTrue("cSBTreeCSBTree.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CSBTree.class, "LOGGER")).isDebugEnabled());
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testGetKeyFromPartThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        CSBTree cSBTree = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testCSBTreeTableName", true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "getKeyFromPart", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), long.class, FileHolder.class}, cSBTree, new Object[] {null, new Long(-1L), new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetKeyFromPartThrowsNullPointerException1() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterTestMode(CSBTree.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "getKeyFromPart", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), long.class, FileHolder.class}, cSBTree, new Object[] {null, new Long(1L), fileHolderImpl});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
        }
    }
    
    public void testGetNextThrowsNullPointerException() throws Throwable {
        int[] lens = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        byte[] key = new byte[2];
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        cSBTree.build(source, true);
        byte[] startKey = new byte[1];
        byte[] endKey = new byte[0];
        int[] msrs = new int[2];
        int[] lens2 = new int[1];
        Scanner scanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens2), new KeyValue(), msrs, new FileHolderImpl());
        try {
            cSBTree.getNext(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        byte[] startKey = new byte[1];
        int[] lens2 = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens2);
        int[] msrs = new int[0];
        Scanner scanner = new NonFilterTreeScanner(startKey, null, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        byte[] key = new byte[2];
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        cSBTree.build(source, true);
        try {
            cSBTree.get(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testProcessRangesThrowsNullPointerException() throws Throwable {
        CSBTree cSBTree = new CSBTree(100, 1000, 0);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterTestMode(CSBTree.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree", "processRanges", new Class[] {List.class, Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.CSBTree$CSBTreePart"), FileHolder.class}, cSBTree, new Object[] {null, null, fileHolderImpl});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBTree.class, ex);
            assertNull("cSBTree.keyGenerator", getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testSearchThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        List sources = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(1000), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        sources.add(fileDataInputStream);
        cSBTree.build(sources, true);
        byte[] key = new byte[2];
        try {
            cSBTree.search(key, true, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
    
    public void testSearchThrowsNullPointerException1() throws Throwable {
        byte[] startKey = new byte[2];
        byte[] endKey = new byte[2];
        int[] msrs = new int[2];
        int[] lens = new int[0];
        Scanner scanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        int[] lens2 = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens2);
        CSBTree cSBTree = new CSBTree(keyGenerator, 100, "testCSBTreeTableName", true);
        DataInputStream source = new FileDataInputStream("testCSBTreeFilesLocation", 100, 1000, new ArrayList(100), true, "testCSBTreePersistenceFileLocation", "testCSBTreeTableName");
        cSBTree.build(source, true);
        byte[] key = new byte[2];
        try {
            cSBTree.search(key, true, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("cSBTree.keyGenerator", keyGenerator, getPrivateField(cSBTree, "keyGenerator"));
        }
    }
}

