/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:50:11 PM
 * Time to generate: 00:28.450 seconds
 *
 */

package com.huawei.unibi.molap.engine.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.datastorage.Member;
import com.huawei.unibi.molap.engine.datastorage.NameColumnMember;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilePermission;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import mondrian.rolap.SqlStatement;

public class CacheUtilAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CacheUtil.class;
    }
    
    public void testConstructor() throws Throwable {
        new CacheUtil();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCheckAnyExcludeExists() throws Throwable {
        Map constraints = new HashMap(100, 100.0F);
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName");
        constraints.put(dimension, new MolapFilterInfo(new ArrayList(100), new ArrayList(1000)));
        boolean result = CacheUtil.checkAnyExcludeExists(constraints);
        assertFalse("result", result);
    }
    
    public void testCheckAnyExcludeExists1() throws Throwable {
        boolean result = CacheUtil.checkAnyExcludeExists(new HashMap(100, 100.0F));
        assertFalse("result", result);
    }
    
    public void testCheckAnyExcludeExists2() throws Throwable {
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveExcludedMembers(), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveExcludedMembers(), list2);
        Mockingbird.setReturnValue(list2.size(), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveExcludedMembers(), list3);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        boolean result = CacheUtil.checkAnyExcludeExists(map);
        assertTrue("result", result);
    }
    
    public void testCheckAnyIncludeExists() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName");
        Map constraints = new HashMap(100, 100.0F);
        constraints.put(dimension, new MolapFilterInfo());
        boolean result = CacheUtil.checkAnyIncludeExists(constraints);
        assertFalse("result", result);
    }
    
    public void testCheckAnyIncludeExists1() throws Throwable {
        boolean result = CacheUtil.checkAnyIncludeExists(new HashMap(100, 100.0F));
        assertFalse("result", result);
    }
    
    public void testCheckAnyIncludeExists2() throws Throwable {
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list2);
        Mockingbird.setReturnValue(list2.size(), -1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveIncludedMembers(), list3);
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        boolean result = CacheUtil.checkAnyIncludeExists(map);
        assertTrue("result", result);
    }
    
    public void testGetHierarchiesList() throws Throwable {
        int[] lens = new int[2];
        ArrayList result = (ArrayList) CacheUtil.getHierarchiesList("testCacheUtilFilesLocaton", 100, new MultiDimKeyVarLengthGenerator(lens));
        assertEquals("result.size()", 0, result.size());
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetHierarchiesList1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs3 = new long[0];
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs4 = new long[0];
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(arrayWrapper, "data", longs3);
        setPrivateField(arrayWrapper2, "data", longs4);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        HashSet hashSet = (HashSet) Mockingbird.getProxyObject(HashSet.class);
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", hashSet);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs, 1);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper3), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs2, 1);
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper4), false);
        Mockingbird.setException(false, fileInputStream, "read", "(byte[])int", iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(hashSet.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CacheUtil.class);
        List result = CacheUtil.getHierarchiesList("", 0, keyGenerator);
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetHierarchiesList2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs3 = new long[0];
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs4 = new long[0];
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(arrayWrapper, "data", longs3);
        setPrivateField(arrayWrapper2, "data", longs4);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        HashSet hashSet = (HashSet) Mockingbird.getProxyObject(HashSet.class);
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", hashSet);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs, 1);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper3), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs2, 1);
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper4), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(hashSet.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CacheUtil.class);
        List result = CacheUtil.getHierarchiesList("", 0, keyGenerator);
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetHierarchiesList3() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs3 = new long[0];
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs4 = new long[0];
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(arrayWrapper, "data", longs3);
        setPrivateField(arrayWrapper2, "data", longs4);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        HashSet hashSet = (HashSet) Mockingbird.getProxyObject(HashSet.class);
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", hashSet);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs, 1);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper3), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs2, 1);
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper4), false);
        Mockingbird.setException(false, fileInputStream, "read", "(byte[])int", iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(hashSet.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CacheUtil.class);
        List result = CacheUtil.getHierarchiesList("", 0, keyGenerator);
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetHierarchiesList4() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        ArrayWrapper arrayWrapper = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs3 = new long[0];
        ArrayWrapper arrayWrapper2 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        long[] longs4 = new long[0];
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(arrayWrapper, "data", longs3);
        setPrivateField(arrayWrapper2, "data", longs4);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        HashSet hashSet = (HashSet) Mockingbird.getProxyObject(HashSet.class);
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", hashSet);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs, 1);
        ArrayWrapper arrayWrapper3 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper3);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper3), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeyArray", "(byte[])long[]", longs2, 1);
        ArrayWrapper arrayWrapper4 = (ArrayWrapper) Mockingbird.getProxyObject(ArrayWrapper.class);
        Mockingbird.replaceObjectForRecording(ArrayWrapper.class, "<init>(long[])", arrayWrapper4);
        Mockingbird.setReturnValue(hashSet.add(arrayWrapper4), false);
        Mockingbird.setReturnValue(false, fileInputStream, "read", "(byte[])int", new Integer(1), 1);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(hashSet.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), arrayWrapper2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CacheUtil.class);
        List result = CacheUtil.getHierarchiesList("", 0, keyGenerator);
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetMembersList() throws Throwable {
        Int2ObjectOpenHashMap result = (Int2ObjectOpenHashMap) CacheUtil.getMembersList("testCacheUtilFilesLocaton", (byte)0, "testCacheUtilDataType");
        assertEquals("result.size()", 0, result.size());
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetMembersList1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        SqlStatement.Type type2 = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        ByteBuffer byteBuffer13 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type2);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Int2ObjectOpenHashMap int2ObjectOpenHashMap = (Int2ObjectOpenHashMap) Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", int2ObjectOpenHashMap);
        Mockingbird.setReturnValue(true, MolapMetadata.class, "makeSQLDataTye", "(java.lang.String)mondrian.rolap.SqlStatement$Type", type, 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer6, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer7.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer8, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectOpenHashMap.put(0, member), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), -2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer10.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer11, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type2}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer12.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 10L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectOpenHashMap.put(0, member2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer13, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer13), 0);
        Mockingbird.setReturnValue(false, byteBuffer13, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer13.getInt(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        Int2ObjectMap result = CacheUtil.getMembersList("", (byte)-1, "");
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testGetMembersList2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class));
        Mockingbird.setException(true, CacheUtil.class, "processMemberFile", "(int,java.lang.String,it.unimi.dsi.fastutil.ints.Int2ObjectMap,java.lang.String)void", iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        Int2ObjectMap result = CacheUtil.getMembersList("", (byte)0, "");
        assertNotNull("result", result);
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testProcessMemberFile() throws Throwable {
        Int2ObjectMap members = new Int2ObjectOpenHashMap();
        CacheUtil.processMemberFile(100, "testCacheUtilFilename", members, "testCacheUtilDataType");
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        assertEquals("(Int2ObjectOpenHashMap) members.size()", 0, members.size());
    }
    
    public void testProcessMemberFileWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        ByteBuffer byteBuffer13 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.makeSQLDataTye(""), type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer6, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer7.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer8, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, member), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), -2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer10.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer11, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer12.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 10L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, member2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer13, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer13), 0);
        Mockingbird.setReturnValue(false, byteBuffer13, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer13.getInt(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        CacheUtil.processMemberFile(-1, "", int2ObjectMap, "");
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testProcessMemberFileWithAggressiveMocks1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        ByteBuffer byteBuffer13 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.makeSQLDataTye(""), type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        NameColumnMember nameColumnMember = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer6, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer7.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer8, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), -2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer10.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer11, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        NameColumnMember nameColumnMember2 = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer12.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 10L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer13, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer13), 0);
        Mockingbird.setReturnValue(false, byteBuffer13, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer13.getInt(), 0);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        CacheUtil.processMemberFile(0, "", int2ObjectMap, "");
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testProcessMemberFileWithAggressiveMocks2() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        ByteBuffer byteBuffer13 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.makeSQLDataTye(""), type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        NameColumnMember nameColumnMember = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer6.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer7, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        NameColumnMember nameColumnMember2 = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer8.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer10, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer11.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer12, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 14L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer13, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer13), 0);
        Mockingbird.setReturnValue(false, byteBuffer13, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer13.getInt(), 0);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        CacheUtil.processMemberFile(0, "", int2ObjectMap, "");
        assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
    }
    
    public void testCheckAnyExcludeExistsThrowsNullPointerException() throws Throwable {
        Map constraints = new HashMap(100, 100.0F);
        constraints.put(new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName"), (Object) null);
        constraints.put((Object) null, new MolapFilterInfo(new ArrayList(100), new ArrayList(1000)));
        try {
            CacheUtil.checkAnyExcludeExists(constraints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertEquals("(HashMap) constraints.size()", 2, constraints.size());
        }
    }
    
    public void testCheckAnyExcludeExistsThrowsNullPointerException1() throws Throwable {
        try {
            CacheUtil.checkAnyExcludeExists(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
        }
    }
    
    public void testCheckAnyExcludeExistsThrowsNullPointerException2() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName", new MolapMetadata.Cube("testCacheUtilName"));
        Map constraints = new HashMap(100, 100.0F);
        constraints.put(dimension, (Object) null);
        try {
            CacheUtil.checkAnyExcludeExists(constraints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertEquals("(HashMap) constraints.size()", 1, constraints.size());
        }
    }
    
    public void testCheckAnyIncludeExistsThrowsNullPointerException() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName", null);
        Map constraints = new HashMap(100, 100.0F);
        constraints.put(dimension, (Object) null);
        constraints.put((Object) null, new MolapFilterInfo(new ArrayList(100), new ArrayList(1000)));
        try {
            CacheUtil.checkAnyIncludeExists(constraints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertEquals("(HashMap) constraints.size()", 2, constraints.size());
        }
    }
    
    public void testCheckAnyIncludeExistsThrowsNullPointerException1() throws Throwable {
        try {
            CacheUtil.checkAnyIncludeExists(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
        }
    }
    
    public void testCheckAnyIncludeExistsThrowsNullPointerException2() throws Throwable {
        Map constraints = new HashMap(100, 100.0F);
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testCacheUtilColName", 100, "testCacheUtilName", new MolapMetadata.Cube("testCacheUtilName"));
        constraints.put(dimension, (Object) null);
        try {
            CacheUtil.checkAnyIncludeExists(constraints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertEquals("(HashMap) constraints.size()", 1, constraints.size());
        }
    }
    
    public void testGetHierarchiesListThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGen = new MultiDimKeyVarLengthGenerator(lens);
        try {
            CacheUtil.getHierarchiesList(null, 100, keyGen);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
            assertEquals("(MultiDimKeyVarLengthGenerator) keyGen.getDimCount()", 0, ((MultiDimKeyVarLengthGenerator) keyGen).getDimCount());
        }
    }
    
    public void testGetHierarchiesListThrowsThrowable() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", Mockingbird.getProxyObject(HashSet.class));
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), -2);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        try {
            CacheUtil.getHierarchiesList("", 0, keyGenerator);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        }
    }
    
    public void testGetHierarchiesListThrowsThrowable1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(HashSet.class, "<init>(int)", Mockingbird.getProxyObject(HashSet.class));
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), -2);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        try {
            CacheUtil.getHierarchiesList("", 0, keyGenerator);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        }
    }
    
    public void testGetMembersListThrowsNullPointerException() throws Throwable {
        try {
            CacheUtil.getMembersList(null, (byte)0, "testCacheUtilDataType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        }
    }
    
    public void testProcessMemberFileThrowsNullPointerException() throws Throwable {
        Int2ObjectMap members = new Int2ObjectLinkedOpenHashMap(100, 1.0F);
        try {
            CacheUtil.processMemberFile(100, null, members, "testCacheUtilDataType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
            assertEquals("(Int2ObjectLinkedOpenHashMap) members.size()", 0, members.size());
        }
    }
    
    public void testProcessMemberFileThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.makeSQLDataTye(""), type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer6, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer7.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer8, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, member), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), -2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer10.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer11, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", member2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer12.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 10L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, member2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, null, 1);
        Mockingbird.setException(fileChannel.read((ByteBuffer) null), iOException);
        Mockingbird.setReturnValue(false, fileInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        try {
            CacheUtil.processMemberFile(-1, "", int2ObjectMap, "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        }
    }
    
    public void testProcessMemberFileThrowsThrowableWithAggressiveMocks1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "DOUBLE");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CacheUtil.class, "LOGGER");
        Int2ObjectMap int2ObjectMap = (Int2ObjectMap) Mockingbird.getProxyObject(Int2ObjectMap.class);
        SqlStatement.Type type = (SqlStatement.Type) Mockingbird.getProxyObject(SqlStatement.Type.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer2 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer3 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars = new char[0];
        ByteBuffer byteBuffer4 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects = new Object[0];
        ByteBuffer byteBuffer5 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer6 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer7 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        char[] chars2 = new char[0];
        ByteBuffer byteBuffer8 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer9 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer10 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer11 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        ByteBuffer byteBuffer12 = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        Object[] objects2 = new Object[0];
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.makeSQLDataTye(""), type);
        setPrivateField(SqlStatement.Type.class, "DOUBLE", type);
        setPrivateField(CacheUtil.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer), 0);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 4);
        Mockingbird.setReturnValue(fileChannel.position(), 0L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer2, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer2), 0);
        Mockingbird.setReturnValue(false, byteBuffer2, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer2.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer3, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer3), 0);
        Mockingbird.setReturnValue(false, byteBuffer3, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer3, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        NameColumnMember nameColumnMember = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer4, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer4), 0);
        Mockingbird.setReturnValue(false, byteBuffer4, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer4.getInt(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(fileChannel.position(), 8L);
        Mockingbird.setReturnValue(arrayList.toArray(), objects);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer5, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer5), 0);
        Mockingbird.setReturnValue(false, byteBuffer5, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer5.getInt(), 2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer6, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer6), 0);
        Mockingbird.setReturnValue(false, byteBuffer6, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer6.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer7, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer7), 0);
        Mockingbird.setReturnValue(false, byteBuffer7, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer7, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        NameColumnMember nameColumnMember2 = (NameColumnMember) Mockingbird.getProxyObject(NameColumnMember.class);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", nameColumnMember2);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer8, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer8), 0);
        Mockingbird.setReturnValue(false, byteBuffer8, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer8.getInt(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer9, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer9), 0);
        Mockingbird.setReturnValue(false, byteBuffer9, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer9.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer10, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer10), 0);
        Mockingbird.setReturnValue(false, byteBuffer10, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer10, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(arrayList2.add(""), false);
        Mockingbird.setReturnValue(fileChannel.position(), 2L);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, byteBuffer11, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer11), 0);
        Mockingbird.setReturnValue(false, byteBuffer11, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(byteBuffer11.getInt(), 0);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(0)}, byteBuffer12, 1);
        Mockingbird.setReturnValue(fileChannel.read(byteBuffer12), 0);
        Mockingbird.setReturnValue(false, byteBuffer12, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer12, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.replaceObjectForRecording(String.class, "<init>(byte[])", Mockingbird.getProxyObject(String.class));
        Mockingbird.setReturnValue(false, type, "equals", "(java.lang.Object)boolean", new Object[] {type}, boolean2, 1);
        Mockingbird.setReturnValue(true, Double.class, "parseDouble", "(java.lang.String)double", new Double(2.802596928649634E-45), 1);
        Mockingbird.setReturnValue(true, Double.class, "toString", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(fileChannel.position(), 14L);
        Mockingbird.setReturnValue(arrayList2.toArray(), objects2);
        Mockingbird.setReturnValue(int2ObjectMap.put(0, nameColumnMember2), null);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "allocate", "(int)java.nio.ByteBuffer", new Object[] {new Integer(4)}, null, 1);
        Mockingbird.setException(fileChannel.read((ByteBuffer) null), iOException);
        Mockingbird.setException(false, fileInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(CacheUtil.class);
        try {
            CacheUtil.processMemberFile(0, "", int2ObjectMap, "");
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("CacheUtil.LOGGER", getPrivateField(CacheUtil.class, "LOGGER"));
        }
    }
}

