/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:11:29 PM
 * Time to generate: 01:22.301 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.aggregator.MeasureAggregator;
import com.huawei.unibi.molap.engine.aggregator.util.AggUtil;
import com.huawei.unibi.molap.engine.datastorage.CubeDataStore;
import com.huawei.unibi.molap.engine.datastorage.DataStore;
import com.huawei.unibi.molap.engine.datastorage.InMemoryCube;
import com.huawei.unibi.molap.engine.filters.InMemoryFilter;
import com.huawei.unibi.molap.engine.filters.IncludeExcludeKeyFilterImpl;
import com.huawei.unibi.molap.engine.filters.KeyFilterImpl;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.ParallelNonFilterTreeScanner;
import com.huawei.unibi.molap.engine.util.ByteArrayWrapper;
import com.huawei.unibi.molap.engine.util.CacheUtil;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.Bits;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.molap.metadata.SliceMetaData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SliceRangeExecutorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SliceRangeExecutor.class;
    }
    
    public void testConstructor() throws Throwable {
        long[] startKey = new long[3];
        long[] endKey = new long[0];
        SliceExecutionInfo info = new SliceExecutionInfo();
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        assertNull("sliceRangeExecutor.measureOrdinal", getPrivateField(sliceRangeExecutor, "measureOrdinal"));
        assertNull("sliceRangeExecutor.msrExists", getPrivateField(sliceRangeExecutor, "msrExists"));
        assertNull("sliceRangeExecutor.maskedByteRanges", getPrivateField(sliceRangeExecutor, "maskedByteRanges"));
        assertNull("sliceRangeExecutor.msrDft", getPrivateField(sliceRangeExecutor, "msrDft"));
        assertNotNull("sliceRangeExecutor.fileHolder", getPrivateField(sliceRangeExecutor, "fileHolder"));
        assertSame("sliceRangeExecutor.endKey", endKey, getPrivateField(sliceRangeExecutor, "endKey"));
        assertNull("sliceRangeExecutor.queryMsrs", getPrivateField(sliceRangeExecutor, "queryMsrs"));
        assertNull("sliceRangeExecutor.slice", getPrivateField(sliceRangeExecutor, "slice"));
        assertNull("sliceRangeExecutor.maxKeyBasedOnDim", getPrivateField(sliceRangeExecutor, "maxKeyBasedOnDim"));
        assertTrue("sliceRangeExecutor.executionInParallel", ((Boolean) getPrivateField(sliceRangeExecutor, "executionInParallel")).booleanValue());
        assertSame("sliceRangeExecutor.info", info, getPrivateField(sliceRangeExecutor, "info"));
        assertSame("sliceRangeExecutor.startKey", startKey, getPrivateField(sliceRangeExecutor, "startKey"));
        assertNull("sliceRangeExecutor.generator", getPrivateField(sliceRangeExecutor, "generator"));
        assertEquals("sliceRangeExecutor.maskedKeyByteSize", 0, ((Number) getPrivateField(sliceRangeExecutor, "maskedKeyByteSize")).intValue());
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
        assertEquals("sliceRangeExecutor.id", "[0, 0, 0] - []", getPrivateField(sliceRangeExecutor, "id"));
    }
    
    public void testCallWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SliceRangeExecutor.class, "LOGGER");
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class, true);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        SliceExecutionInfo sliceExecutionInfo = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        boolean[] booleans = new boolean[2];
        byte[] bytes = new byte[0];
        int[] ints = new int[0];
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class);
        int[] ints2 = new int[2];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        long[] longs3 = new long[0];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        int[] ints3 = new int[0];
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        KeyValue keyValue = new KeyValue();
        byte[] bytes4 = new byte[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes5 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        setPrivateField(sliceRangeExecutor, "startKey", longs);
        setPrivateField(sliceRangeExecutor, "endKey", longs2);
        setPrivateField(sliceRangeExecutor, "info", sliceExecutionInfo);
        setPrivateField(sliceRangeExecutor, "msrExists", booleans);
        setPrivateField(sliceRangeExecutor, "maxKeyBasedOnDim", bytes);
        setPrivateField(sliceRangeExecutor, "maskedByteRanges", ints);
        setPrivateField(sliceRangeExecutor, "maskedKeyByteSize", new Integer(0));
        setPrivateField(sliceRangeExecutor, "dimensionsRowWrapper", byteArrayWrapper);
        setPrivateField(sliceRangeExecutor, "measureOrdinal", ints2);
        setPrivateField(sliceRangeExecutor, "queryMsrs", measures);
        setPrivateField(sliceRangeExecutor, "id", "");
        setPrivateField(sliceRangeExecutor, "fileHolder", fileHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.enterNormalMode();
        sliceExecutionInfo.setSlice(inMemoryCube);
        sliceExecutionInfo.setTableName("");
        sliceExecutionInfo.setConstraints(null);
        sliceExecutionInfo.setFilterModel(null);
        sliceExecutionInfo.setEndKey(longs3);
        sliceExecutionInfo.setKeyGenerator(keyGenerator);
        sliceExecutionInfo.setMeasureOrdinal(ints3);
        booleans[0] = true;
        booleans[1] = true;
        keyValue.setBackKeyArray(bytes4);
        keyValue.setKeyOffset(0);
        setPrivateField(SliceRangeExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        keyValue2.setBackKeyArray(bytes5);
        keyValue2.setKeyOffset(0);
        keyValue2.setKeyLength(0);
        measureAggregators[0] = measureAggregator;
        measureAggregators[1] = measureAggregator2;
        ints2[0] = 0;
        ints2[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(true, CacheUtil.class, "checkAnyExcludeExists", "(java.util.Map)boolean", Boolean.TRUE, 1);
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = (IncludeExcludeKeyFilterImpl) Mockingbird.getProxyObject(IncludeExcludeKeyFilterImpl.class);
        Mockingbird.replaceObjectForRecording(IncludeExcludeKeyFilterImpl.class, "<init>(com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.keygenerator.KeyGenerator,long[])", includeExcludeKeyFilterImpl);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs2), bytes3);
        FilterTreeScanner filterTreeScanner = (FilterTreeScanner) Mockingbird.getProxyObject(FilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(FilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", filterTreeScanner);
        filterTreeScanner.setFilter(includeExcludeKeyFilterImpl);
        Mockingbird.setNormalReturnForVoid();
        cubeDataStore.initializeScanner(bytes2, filterTreeScanner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,byte[],int[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap.get(byteArrayWrapper), obj);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "getMessage", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue2);
        byteArrayWrapper.setData(bytes5, 0, bytes, ints, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap.get(byteArrayWrapper), measureAggregators);
        Mockingbird.setReturnValue(keyValue2.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(keyValue2.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator2, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), true);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(hashMap.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        fileHolder.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        Map result = sliceRangeExecutor.call();
        assertNotNull("result", result);
        assertNotNull("sliceRangeExecutorSliceRangeExecutor.LOGGER", getPrivateField(SliceRangeExecutor.class, "LOGGER"));
        assertNotNull("sliceRangeExecutor.fileHolder", getPrivateField(sliceRangeExecutor, "fileHolder"));
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testCallWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SliceRangeExecutor.class, "LOGGER");
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class, true);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        SliceExecutionInfo sliceExecutionInfo = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        byte[] bytes = new byte[0];
        int[] ints = new int[0];
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class);
        double[] doubles = new double[1];
        boolean[] booleans = new boolean[2];
        int[] ints2 = new int[2];
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        long[] longs3 = new long[0];
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        int[] ints3 = new int[0];
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        KeyValue keyValue = new KeyValue();
        byte[] bytes4 = new byte[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes5 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        setPrivateField(sliceRangeExecutor, "startKey", longs);
        setPrivateField(sliceRangeExecutor, "endKey", longs2);
        setPrivateField(sliceRangeExecutor, "info", sliceExecutionInfo);
        setPrivateField(sliceRangeExecutor, "maxKeyBasedOnDim", bytes);
        setPrivateField(sliceRangeExecutor, "maskedByteRanges", ints);
        setPrivateField(sliceRangeExecutor, "maskedKeyByteSize", new Integer(0));
        setPrivateField(sliceRangeExecutor, "dimensionsRowWrapper", byteArrayWrapper);
        setPrivateField(sliceRangeExecutor, "msrDft", doubles);
        setPrivateField(sliceRangeExecutor, "msrExists", booleans);
        setPrivateField(sliceRangeExecutor, "measureOrdinal", ints2);
        setPrivateField(sliceRangeExecutor, "queryMsrs", measures);
        setPrivateField(sliceRangeExecutor, "id", "");
        setPrivateField(sliceRangeExecutor, "fileHolder", fileHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.enterNormalMode();
        sliceExecutionInfo.setSlice(inMemoryCube);
        sliceExecutionInfo.setTableName("");
        sliceExecutionInfo.setConstraints(null);
        sliceExecutionInfo.setFilterModel(null);
        sliceExecutionInfo.setEndKey(longs3);
        sliceExecutionInfo.setKeyGenerator(keyGenerator);
        sliceExecutionInfo.setMeasureOrdinal(ints3);
        booleans[0] = false;
        booleans[1] = true;
        keyValue.setBackKeyArray(bytes4);
        keyValue.setKeyOffset(0);
        setPrivateField(SliceRangeExecutor.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        keyValue2.setBackKeyArray(bytes5);
        keyValue2.setKeyOffset(0);
        keyValue2.setKeyLength(0);
        measureAggregators[0] = measureAggregator;
        measureAggregators[1] = measureAggregator2;
        doubles[0] = 0.0;
        ints2[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inMemoryCube, "getDataCache", "(java.lang.String)com.huawei.unibi.molap.engine.datastorage.CubeDataStore", cubeDataStore, 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs), bytes2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(null), false);
        Mockingbird.setReturnValue(true, CacheUtil.class, "checkAnyIncludeExists", "(java.util.Map)boolean", Boolean.TRUE, 1);
        InMemoryFilter keyFilterImpl = (InMemoryFilter) callPrivateMethod("com.huawei.unibi.molap.engine.filters.KeyFilterImpl", "<init>", new Class[] {}, null, new Object[] {});
        Mockingbird.replaceObjectForRecording(KeyFilterImpl.class, "<init>(com.huawei.unibi.molap.engine.filters.InMemFilterModel,com.huawei.unibi.molap.keygenerator.KeyGenerator,long[])", keyFilterImpl);
        Mockingbird.setReturnValue(keyGenerator.generateKey(longs2), bytes3);
        FilterTreeScanner filterTreeScanner = (FilterTreeScanner) Mockingbird.getProxyObject(FilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(FilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", filterTreeScanner);
        filterTreeScanner.setFilter(keyFilterImpl);
        Mockingbird.setNormalReturnForVoid();
        cubeDataStore.initializeScanner(bytes2, filterTreeScanner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue);
        Mockingbird.setReturnValue(false, byteArrayWrapper, "setData", "(byte[],int,byte[],int[],int)void", null, 1);
        Mockingbird.setReturnValue(hashMap.get(byteArrayWrapper), obj);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "getMessage", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), false);
        Mockingbird.setReturnValue(filterTreeScanner.getNext(), keyValue2);
        byteArrayWrapper.setData(bytes5, 0, bytes, ints, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(hashMap.get(byteArrayWrapper), measureAggregators);
        Mockingbird.setReturnValue(false, measureAggregator, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(keyValue2.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator2, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(filterTreeScanner.isDone(), true);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(hashMap.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        fileHolder.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        Map result = sliceRangeExecutor.call();
        assertNotNull("result", result);
        assertNotNull("sliceRangeExecutorSliceRangeExecutor.LOGGER", getPrivateField(SliceRangeExecutor.class, "LOGGER"));
        assertNotNull("sliceRangeExecutor.fileHolder", getPrivateField(sliceRangeExecutor, "fileHolder"));
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testCheckAnyNewMsr() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[91, 17, 92]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[-93, 41, 100]", 1);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        measures[0] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        measures[1] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.setReturnValue(info.getQueryMsrs(), measures);
        int[] ints = new int[3];
        ints[0] = -16;
        ints[1] = 0;
        ints[2] = 62;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        byte[] bytes = new byte[2];
        bytes[0] = (byte)-80;
        bytes[1] = (byte)-105;
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), bytes);
        int[] ints2 = new int[2];
        ints2[0] = 0;
        ints2[1] = 100;
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), ints2);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 2);
        Mockingbird.setReturnValue(info.getKeyGenerator(), Mockingbird.getProxyObject(KeyGenerator.class));
        Mockingbird.setReturnValue(info.getSlice(), null);
        boolean[] booleans = new boolean[1];
        booleans[0] = true;
        Mockingbird.setReturnValue(info.getMsrsExists(), booleans);
        double[] doubles = new double[2];
        doubles[0] = 2.1443772315979004;
        doubles[1] = 0.0;
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), doubles);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "checkAnyNewMsr", new Class[] {}, sliceRangeExecutor, new Object[] {})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testCheckAnyNewMsr1() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        boolean[] msrsExists = new boolean[2];
        msrsExists[0] = true;
        info.setMsrsExists(msrsExists);
        long[] endKey = new long[3];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(null, endKey, true, info);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "checkAnyNewMsr", new Class[] {}, sliceRangeExecutor, new Object[] {})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testCheckAnyNewMsr2() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        boolean[] msrsExists = new boolean[3];
        info.setMsrsExists(msrsExists);
        long[] startKey = new long[2];
        long[] endKey = new long[1];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "checkAnyNewMsr", new Class[] {}, sliceRangeExecutor, new Object[] {})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testGetTreeScanner() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testSliceRangeExecutorName");
        metaCube.setSchemaName("");
        SliceExecutionInfo info = new SliceExecutionInfo();
        int[] lens = new int[0];
        info.setConstraints(new HashMap(100, 100.0F));
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        long[] startKey = new long[3];
        long[] endKey = new long[0];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, false, info);
        NonFilterTreeScanner result = (NonFilterTreeScanner) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {new CubeDataStore("testSliceRangeExecutorTable", metaCube, new SliceMetaData()), new FileHolderImpl(100)});
        assertNotNull("result", result);
    }
    
    public void testGetTreeScanner1() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[42, 13, 12]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[62, 0, 56]", 1);
        Mockingbird.setReturnValue(info.getQueryMsrs(), null);
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), null);
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), null);
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), null);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 0);
        Mockingbird.setReturnValue(info.getKeyGenerator(), null);
        Mockingbird.setReturnValue(info.getSlice(), null);
        Mockingbird.setReturnValue(info.getMsrsExists(), null);
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), null);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        KeyGenerator multiDimKeyVarLengthGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        byte[] bytes = new byte[0];
        Mockingbird.setReturnValue(multiDimKeyVarLengthGenerator.generateKey(startKey), bytes);
        Map hashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(info.getConstraints(), hashMap);
        Mockingbird.setReturnValue(CacheUtil.checkAnyExcludeExists(hashMap), false);
        Mockingbird.setReturnValue(info.getConstraints(), hashMap);
        Mockingbird.setReturnValue(CacheUtil.checkAnyIncludeExists(hashMap), false);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        DataStore cSBTree = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        Mockingbird.setReturnValue(cubeDataStore.getData(), cSBTree);
        Mockingbird.setReturnValue(cSBTree.getRangeSplitValue(), 3500000L);
        int[] ints = new int[2];
        ints[0] = 0;
        ints[1] = 79;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        ParallelNonFilterTreeScanner parallelNonFilterTreeScanner = (ParallelNonFilterTreeScanner) Mockingbird.getProxyObject(ParallelNonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(ParallelNonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,long,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", parallelNonFilterTreeScanner);
        cubeDataStore.initializeScanner(bytes, parallelNonFilterTreeScanner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        ParallelNonFilterTreeScanner result = (ParallelNonFilterTreeScanner) callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {cubeDataStore, fileHolderImpl});
        assertSame("result", parallelNonFilterTreeScanner, result);
    }
    
    public void testHandleRow() throws Throwable {
        long[] startKey = new long[1];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRow", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {new HashMap(100, 100.0F), new KeyValue()});
        int actual = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).hashCode();
        assertEquals("sliceRangeExecutor.dimensionsRowWrapper.hashCode()", 1, actual);
        boolean actual2 = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual2);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRow1() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[2, 100, 12]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[100, 1]", 1);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        measures[0] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        measures[1] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.setReturnValue(info.getQueryMsrs(), measures);
        int[] ints = new int[1];
        ints[0] = 32;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        byte[] bytes = new byte[2];
        bytes[0] = (byte)90;
        bytes[1] = (byte)127;
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), bytes);
        int[] ints2 = new int[0];
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), ints2);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 77);
        KeyGenerator multiDimKeyVarLengthGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        Mockingbird.setReturnValue(info.getSlice(), null);
        boolean[] booleans = new boolean[3];
        booleans[0] = false;
        booleans[1] = false;
        booleans[2] = false;
        Mockingbird.setReturnValue(info.getMsrsExists(), booleans);
        double[] doubles = new double[3];
        doubles[0] = 1.0;
        doubles[1] = 0.10000000149011612;
        doubles[2] = -1.0;
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), doubles);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes2 = new byte[0];
        Mockingbird.setReturnValue(keyValue.getBackKeyArray(), bytes2);
        Mockingbird.setReturnValue(keyValue.getKeyOffset(), 0);
        ((ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class)).setData(bytes2, 100, bytes, ints2, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        NullPointerException nullPointerException = (NullPointerException) Mockingbird.getProxyObject(NullPointerException.class);
        Mockingbird.setException(AggUtil.getAggregators(measures, true, multiDimKeyVarLengthGenerator, null), nullPointerException);
        Mockingbird.setReturnValue(false, nullPointerException, "getMessage", "()java.lang.String", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRow", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {hashMap, keyValue});
        boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRow2() throws Throwable {
        long[] startKey = new long[3];
        long[] endKey = new long[3];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRow", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {new HashMap(100, 100.0F), null});
        boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRowForRS() throws Throwable {
        long[] startKey = new long[1];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRowForRS", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {new HashMap(100, 100.0F), null});
        boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRowForRS1() throws Throwable {
        long[] startKey = new long[1];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRowForRS", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {new HashMap(100, 100.0F), new KeyValue()});
        int actual = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).hashCode();
        assertEquals("sliceRangeExecutor.dimensionsRowWrapper.hashCode()", 1, actual);
        boolean actual2 = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual2);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRowForRS2() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[0]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[-7]", 1);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        measures[0] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        measures[1] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.setReturnValue(info.getQueryMsrs(), measures);
        int[] ints = new int[1];
        ints[0] = 32;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        byte[] bytes = new byte[2];
        bytes[0] = (byte)90;
        bytes[1] = (byte)127;
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), bytes);
        int[] ints2 = new int[0];
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), ints2);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 77);
        KeyGenerator multiDimKeyVarLengthGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        Mockingbird.setReturnValue(info.getSlice(), null);
        boolean[] booleans = new boolean[3];
        booleans[0] = false;
        booleans[1] = false;
        booleans[2] = false;
        Mockingbird.setReturnValue(info.getMsrsExists(), booleans);
        double[] doubles = new double[3];
        doubles[0] = 1.0;
        doubles[1] = 0.10000000149011612;
        doubles[2] = -1.0;
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), doubles);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes2 = new byte[1];
        bytes2[0] = (byte)-38;
        Mockingbird.setReturnValue(keyValue.getBackKeyArray(), bytes2);
        Mockingbird.setReturnValue(keyValue.getKeyOffset(), 0);
        ((ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class)).setData(bytes2, 100, bytes, ints2, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        NullPointerException nullPointerException = (NullPointerException) Mockingbird.getProxyObject(NullPointerException.class);
        Mockingbird.setException(AggUtil.getAggregators(measures, true, multiDimKeyVarLengthGenerator, null), nullPointerException);
        Mockingbird.setReturnValue(false, nullPointerException, "getMessage", "()java.lang.String", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRowForRS", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {hashMap, keyValue});
        boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRowForRS3() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[100, 94, -12]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[]", 1);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[0];
        Mockingbird.setReturnValue(info.getQueryMsrs(), measures);
        int[] ints = new int[1];
        ints[0] = 2;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        byte[] bytes = new byte[1];
        bytes[0] = (byte)0;
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), bytes);
        int[] ints2 = new int[2];
        ints2[0] = 0;
        ints2[1] = 0;
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), ints2);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 100);
        KeyGenerator multiDimKeyVarLengthGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        Mockingbird.setReturnValue(info.getSlice(), null);
        boolean[] booleans = new boolean[0];
        Mockingbird.setReturnValue(info.getMsrsExists(), booleans);
        double[] doubles = new double[1];
        doubles[0] = 0.0;
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), doubles);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        byte[] bytes2 = new byte[1];
        bytes2[0] = (byte)0;
        Mockingbird.setReturnValue(keyValue.getBackKeyArray(), bytes2);
        Mockingbird.setReturnValue(keyValue.getKeyOffset(), 0);
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class);
        byteArrayWrapper.setData(bytes2, 100, bytes, ints2, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Mockingbird.setReturnValue(AggUtil.getAggregators(measures, true, multiDimKeyVarLengthGenerator, null), measureAggregators);
        Mockingbird.setReturnValue(keyValue.getBackKeyArray(), bytes2);
        Mockingbird.setReturnValue(keyValue.getKeyOffset(), 0);
        Mockingbird.setReturnValue(keyValue.getKeyLength(), 0);
        byteArrayWrapper.setActualData(bytes2, 100, 1000);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRowForRS", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {hashMap, keyValue});
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testHandleRowWithAggressiveMocks() throws Throwable {
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class, true);
        byte[] bytes = new byte[0];
        int[] ints = new int[0];
        ByteArrayWrapper byteArrayWrapper = (ByteArrayWrapper) Mockingbird.getProxyObject(ByteArrayWrapper.class);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[2];
        int[] ints2 = new int[2];
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes2 = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        setPrivateField(sliceRangeExecutor, "maxKeyBasedOnDim", bytes);
        setPrivateField(sliceRangeExecutor, "maskedByteRanges", ints);
        setPrivateField(sliceRangeExecutor, "maskedKeyByteSize", new Integer(0));
        setPrivateField(sliceRangeExecutor, "generator", null);
        setPrivateField(sliceRangeExecutor, "slice", null);
        setPrivateField(sliceRangeExecutor, "dimensionsRowWrapper", byteArrayWrapper);
        setPrivateField(sliceRangeExecutor, "queryMsrs", measures);
        setPrivateField(sliceRangeExecutor, "measureOrdinal", ints2);
        keyValue.setBackKeyArray(bytes2);
        keyValue.setKeyOffset(0);
        keyValue.setKeyLength(0);
        Mockingbird.enterRecordingMode();
        byteArrayWrapper.setData(bytes2, 0, bytes, ints, 0);
        Mockingbird.setNormalReturnForVoid();
        measureAggregators[0] = measureAggregator;
        measureAggregators[1] = measureAggregator2;
        ints2[0] = 0;
        ints2[1] = 0;
        Mockingbird.setReturnValue(map.get(byteArrayWrapper), null);
        Mockingbird.setReturnValue(AggUtil.getAggregators(measures, false, null, null), measureAggregators);
        byteArrayWrapper.setActualData(bytes2, 0, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(map.put(byteArrayWrapper, measureAggregators), null);
        Mockingbird.replaceObjectForRecording(ByteArrayWrapper.class, "<init>()", new ByteArrayWrapper());
        Mockingbird.setReturnValue(keyValue.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.setReturnValue(keyValue.getValue(0), 2.802596928649634E-45);
        Mockingbird.setReturnValue(false, measureAggregator2, "agg", "(double,byte[],int,int)void", null, 1);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "handleRow", new Class[] {Map.class, KeyValue.class}, sliceRangeExecutor, new Object[] {map, keyValue});
        boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
        assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
        Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
        assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        long[] startKey = new long[3];
        long[] endKey = new long[3];
        try {
            new SliceRangeExecutor(startKey, endKey, true, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
        }
    }
    
    public void testCallThrowsNullPointerException() throws Throwable {
        long[] startKey = new long[3];
        long[] endKey = new long[3];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        try {
            sliceRangeExecutor.call();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
            boolean actual = ((LogService) getPrivateField(SliceRangeExecutor.class, "LOGGER")).isDebugEnabled();
            assertTrue("sliceRangeExecutorSliceRangeExecutor.LOGGER.isDebugEnabled()", actual);
            assertNotNull("sliceRangeExecutor.fileHolder", getPrivateField(sliceRangeExecutor, "fileHolder"));
            Object object = ((ByteArrayWrapper) getPrivateField(sliceRangeExecutor, "dimensionsRowWrapper")).getData();
            assertNull("sliceRangeExecutor.dimensionsRowWrapper.getData()", object);
        }
    }
    
    public void testCheckAnyNewMsrThrowsNullPointerException() throws Throwable {
        long[] startKey = new long[1];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, new SliceExecutionInfo());
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "checkAnyNewMsr", new Class[] {}, sliceRangeExecutor, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
        }
    }
    
    public void testGetTreeScannerThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        SliceExecutionInfo info = (SliceExecutionInfo) Mockingbird.getProxyObject(SliceExecutionInfo.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {startKey}, "[100, 26]", 1);
        Mockingbird.setReturnValue(true, Arrays.class, "toString", "(long[])java.lang.String", new Object[] {endKey}, "[90, 0]", 1);
        MolapMetadata.Measure[] measures = new MolapMetadata.Measure[1];
        measures[0] = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.setReturnValue(info.getQueryMsrs(), measures);
        int[] ints = new int[1];
        ints[0] = -100;
        Mockingbird.setReturnValue(info.getMeasureOrdinal(), ints);
        byte[] bytes = new byte[1];
        bytes[0] = (byte)0;
        Mockingbird.setReturnValue(info.getMaxKeyBasedOnDimensions(), bytes);
        int[] ints2 = new int[1];
        ints2[0] = 19;
        Mockingbird.setReturnValue(info.getMaskedByteRanges(), ints2);
        Mockingbird.setReturnValue(info.getMaskedKeyByteSize(), 25);
        KeyGenerator multiDimKeyVarLengthGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        Mockingbird.setReturnValue(info.getSlice(), null);
        boolean[] booleans = new boolean[3];
        booleans[0] = false;
        booleans[1] = false;
        booleans[2] = false;
        Mockingbird.setReturnValue(info.getMsrsExists(), booleans);
        double[] doubles = new double[1];
        doubles[0] = 35.28525161743164;
        Mockingbird.setReturnValue(info.getNewMeasureDftValue(), doubles);
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(info.getKeyGenerator(), multiDimKeyVarLengthGenerator);
        Mockingbird.setException(multiDimKeyVarLengthGenerator.generateKey(startKey), (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(SliceRangeExecutor.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {cubeDataStore, fileHolderImpl});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testGetTreeScannerThrowsNegativeArraySizeException() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        int[] lens = new int[1];
        lens[0] = -63;
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        long[] startKey = new long[1];
        long[] endKey = new long[1];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {null, new FileHolderImpl()});
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testGetTreeScannerThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testSliceRangeExecutorName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testSliceRangeExecutorTable", metaCube, new SliceMetaData());
        SliceExecutionInfo info = new SliceExecutionInfo();
        int[] lens = new int[0];
        info.setConstraints(new HashMap(100, 100.0F));
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        long[] startKey = new long[1];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, false, info);
        cubeDataStore.clear();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {cubeDataStore, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
        }
    }
    
    public void testGetTreeScannerThrowsNullPointerException1() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        int[] lens = new int[0];
        info.setConstraints(new HashMap(100, 100.0F));
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        long[] startKey = new long[3];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, null, true, info);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {null, new FileHolderImpl(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
        }
    }
    
    public void testGetTreeScannerThrowsNullPointerException2() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        int[] lens = new int[0];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testSliceRangeExecutorName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testSliceRangeExecutorTable", metaCube, new SliceMetaData());
        info.setConstraints(new HashMap(100, 100.0F));
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        cubeDataStore.clear();
        long[] startKey = new long[3];
        long[] endKey = new long[2];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {cubeDataStore, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
            assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
        }
    }
    
    public void testGetTreeScannerThrowsNullPointerException3() throws Throwable {
        int[] lens = new int[0];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testSliceRangeExecutorName");
        metaCube.setSchemaName("");
        SliceExecutionInfo info = new SliceExecutionInfo();
        info.setKeyGenerator(new MultiDimKeyVarLengthGenerator(lens));
        long[] startKey = new long[2];
        long[] endKey = new long[0];
        SliceRangeExecutor sliceRangeExecutor = new SliceRangeExecutor(startKey, endKey, true, info);
        CubeDataStore cubeDataStore = new CubeDataStore("testSliceRangeExecutorTable", metaCube, new SliceMetaData());
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.impl.SliceRangeExecutor", "getTreeScanner", new Class[] {CubeDataStore.class, FileHolder.class}, sliceRangeExecutor, new Object[] {cubeDataStore, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CacheUtil.class, ex);
            assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
        }
    }
}

