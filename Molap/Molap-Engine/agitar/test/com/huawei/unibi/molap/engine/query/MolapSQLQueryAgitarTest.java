/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:05:44 PM
 * Time to generate: 00:40.737 seconds
 *
 */

package com.huawei.unibi.molap.engine.query;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MolapSQLQueryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapSQLQuery.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testAddAggColumn() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getAggs().get(\"testMolapSQLQueryColumn\")", "testMolapSQLQueryAggName", molapSQLQuery.getAggs().get("testMolapSQLQueryColumn"));
    }
    
    public void testAddColumn() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getSelects().get(0)", "testMolapSQLQueryColumn", molapSQLQuery.getSelects().get(0));
    }
    
    public void testAddFilter() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
    }
    
    public void testAddTable() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
        assertEquals("molapSQLQuery.getTables().get(0)", "testMolapSQLQueryTable", molapSQLQuery.getTables().get(0));
    }
    
    public void testBuildQuery() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        List filters = new ArrayList(100);
        molapSQLQuery.addFilter("testMolapSQLQueryTable", filters);
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", filters);
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM  WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery2() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery3() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery4() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery5() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery6() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery7() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery8() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery9() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT ,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery10() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery11() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery12() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery13() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery14() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        List filters = new ArrayList(100);
        molapSQLQuery.addFilter("testMolapSQLQueryTable", filters);
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", filters);
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery15() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery16() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery17() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery18() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT ,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery19() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery20() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery21() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery22() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery23() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery24() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery25() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery26() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery27() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery28() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", new ArrayList(1000));
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery29() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        List filters = new ArrayList(100);
        molapSQLQuery.addFilter("testMolapSQLQueryTable", filters);
        molapSQLQuery.addFilter("testMolapSQLQueryTable1", filters);
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE testMolapSQLQueryTable= ANDtestMolapSQLQueryTable1=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 2, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery30() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT  FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testBuildQuery31() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addFilter("testMolapSQLQueryTable", new ArrayList(100));
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.buildQuery();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE testMolapSQLQueryTable=", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 1, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testCreateAggFromString() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createAggFromString", new Class[] {String.class, Map.class}, null, new Object[] {"testMolapSQLQueryQuery", hashMap});
        assertEquals("(HashMap) hashMap.size()", 0, hashMap.size());
    }
    
    public void testCreateAggFromString1() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createAggFromString", new Class[] {String.class, Map.class}, null, new Object[] {"L(D;6`Vz<q'%-SsO2OH0y!`}mE4J%<;KONs{xm)}q", hashMap});
        assertEquals("(HashMap) hashMap.size()", 1, hashMap.size());
        assertEquals("(HashMap) hashMap.get(\"D;6`Vz<q'%-SsO2OH0y!`}mE4J%<;KONs{xm)}\")", "L", hashMap.get("D;6`Vz<q'%-SsO2OH0y!`}mE4J%<;KONs{xm)}"));
    }
    
    public void testCreateListFromString() throws Throwable {
        List arrayList = new ArrayList(100);
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createListFromString", new Class[] {String.class, List.class}, null, new Object[] {"testMolapSQLQueryQuery", arrayList});
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        assertEquals("(ArrayList) arrayList.get(0)", "testMolapSQLQueryQuery", arrayList.get(0));
    }
    
    public void testCreateListFromString1() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createListFromString", new Class[] {String.class, List.class}, null, new Object[] {"\u0016\u0003e5\u001A\u000B\u0019\u0002i-\u000BF\u0011L%\r\u001Cr]2h\u0000\u0010/j;4\f\nO`\u0000\u001A8mEX\u000F^(\u001E\u0001i", null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateTablesFromString() throws Throwable {
        List arrayList = new ArrayList(100);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {",", arrayList, molapSQLQuery});
        assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
    }
    
    public void testCreateTablesFromString1() throws Throwable {
        List arrayList = new ArrayList(100);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"b:0qtD:M[=4KEQA@{]UZ0/as}f(cGYTf*3.5&1sb", arrayList, molapSQLQuery});
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        assertEquals("(ArrayList) arrayList.get(0)", "b:0qtD:M[=4KEQA@{]UZ0/as}f", arrayList.get(0));
        assertEquals("molapSQLQuery.getSchemaName()", "cGYTf*3", molapSQLQuery.getSchemaName());
        assertEquals("molapSQLQuery.getCubeName()", "5&1s", molapSQLQuery.getCubeName());
    }
    
    public void testGetAggs() throws Throwable {
        LinkedHashMap result = (LinkedHashMap) new MolapSQLQuery().getAggs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetPred() throws Throwable {
        LinkedHashMap result = (LinkedHashMap) new MolapSQLQuery().getPred();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetSelects() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        ArrayList result = (ArrayList) molapSQLQuery.getSelects();
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", "testMolapSQLQueryColumn", result.get(0));
    }
    
    public void testGetSelects1() throws Throwable {
        ArrayList result = (ArrayList) new MolapSQLQuery().getSelects();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetTables() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        ArrayList result = (ArrayList) molapSQLQuery.getTables();
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", "testMolapSQLQueryTable", result.get(0));
    }
    
    public void testGetTables1() throws Throwable {
        ArrayList result = (ArrayList) new MolapSQLQuery().getTables();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testIterateAggs() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder("testMolapSQLQueryParam1");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAggs", new Class[] {StringBuilder.class, Map.class}, molapSQLQuery, new Object[] {stringBuilder, hashMap});
        assertEquals("(HashMap) hashMap.size()", 0, hashMap.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 23, actual);
    }
    
    public void testIterateAggs1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("testString", "testString");
        StringBuilder stringBuilder = new StringBuilder("testMolapSQLQueryParam1");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAggs", new Class[] {StringBuilder.class, Map.class}, molapSQLQuery, new Object[] {stringBuilder, hashMap});
        assertEquals("(HashMap) hashMap.size()", 1, hashMap.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 46, actual);
    }
    
    public void testIterateAggs2() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append((Object) null);
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("testString", "testString");
        hashMap.put("WHRE", "ELECT");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAggs", new Class[] {StringBuilder.class, Map.class}, molapSQLQuery, new Object[] {stringBuilder, hashMap});
        assertEquals("(HashMap) hashMap.size()", 2, hashMap.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 39, actual);
    }
    
    public void testIterateAndAdd() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        StringBuilder stringBuilder = new StringBuilder();
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAdd", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testIterateAndAdd1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder("testMolapSQLQueryParam1");
        List arrayList = new ArrayList(100);
        arrayList.add("testString");
        arrayList.add("testString");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAdd", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 44, actual);
    }
    
    public void testIterateAndAdd2() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder("testMolapSQLQueryParam1");
        List arrayList = new ArrayList(100);
        arrayList.add("testString");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAdd", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 33, actual);
    }
    
    public void testIterateAndAddTable() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAddTable", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testIterateAndAddTable1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        arrayList.add("ab>cdefghijklmnopqrstuvwxyz");
        StringBuilder stringBuilder = new StringBuilder();
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAddTable", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 38, actual);
    }
    
    public void testIterateAndAddTable2() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append((Object) null);
        List arrayList = new ArrayList(100);
        arrayList.add("SE7LECT");
        arrayList.add("testString");
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAddTable", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 44, actual);
    }
    
    public void testParseQuery() throws Throwable {
        Mockingbird.enterRecordingMode();
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class, true);
        Mockingbird.replaceObjectForRecording(MolapSQLQuery.class, "<init>()", molapSQLQuery);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        String[] strings = new String[2];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        String[] strings4 = new String[2];
        String[] strings5 = new String[2];
        String[] strings6 = new String[2];
        String[] strings7 = new String[2];
        String[] strings8 = new String[2];
        String[] strings9 = new String[2];
        String[] strings10 = new String[0];
        String[] strings11 = new String[2];
        String[] strings12 = new String[2];
        Mockingbird.setReturnValue(false, "", "split", "(java.lang.String)java.lang.String[]", new Object[] {"FROM"}, strings, 1);
        strings[0] = "";
        strings[1] = "";
        strings3[0] = "";
        strings3[1] = "";
        strings4[0] = "";
        strings4[1] = "";
        strings5[0] = "";
        strings5[1] = "";
        strings6[0] = "";
        strings6[1] = "";
        strings7[0] = "";
        strings7[1] = "";
        strings8[0] = "";
        strings8[1] = "";
        strings9[1] = "";
        strings9[0] = "";
        strings11[1] = "";
        strings11[0] = "";
        strings12[0] = "";
        strings12[1] = "";
        setPrivateField(molapSQLQuery, "select", null);
        setPrivateField(molapSQLQuery, "aggs", map);
        setPrivateField(molapSQLQuery, "tables", list);
        setPrivateField(molapSQLQuery, "pred", map2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "AA", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "contains", "(java.lang.CharSequence)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "contains", "(java.lang.CharSequence)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings4, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings5, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings6, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "AA", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings7, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings8, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings9, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings10, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings11, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings12, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "contains", "(java.lang.CharSequence)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "contains", "(java.lang.CharSequence)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapSQLQuery.class);
        MolapSQLQuery result = MolapSQLQuery.parseQuery("");
        assertNull("result.getSelects()", result.getSelects());
    }
    
    public void testSetCubeName() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.setCubeName("testMolapSQLQueryCubeName");
        assertEquals("molapSQLQuery.getCubeName()", "testMolapSQLQueryCubeName", molapSQLQuery.getCubeName());
    }
    
    public void testSetSchemaName() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.setSchemaName("testMolapSQLQuerySchemaName");
        assertEquals("molapSQLQuery.getSchemaName()", "testMolapSQLQuerySchemaName", molapSQLQuery.getSchemaName());
    }
    
    public void testToString() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT  FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString2() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString3() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT ,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString4() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString5() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString6() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testToString7() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString8() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString9() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString10() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString11() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn1", "testMolapSQLQueryAggName1");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn),testMolapSQLQueryAggName1(testMolapSQLQueryColumn1) FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 2, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString12() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT  FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testToString13() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString14() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT ,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testToString15() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT ,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString16() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testToString17() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn1");
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryColumn1 FROM testMolapSQLQueryTable(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 2, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 1, molapSQLQuery.getTables().size());
    }
    
    public void testToString18() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addTable("testMolapSQLQueryTable");
        molapSQLQuery.addTable("testMolapSQLQueryTable1");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT  FROM testMolapSQLQueryTable(null.null),testMolapSQLQueryTable1(null.null) WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 0, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 2, molapSQLQuery.getTables().size());
    }
    
    public void testToString19() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        molapSQLQuery.addAggColumn("testMolapSQLQueryColumn", "testMolapSQLQueryAggName");
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        String result = molapSQLQuery.toString();
        assertEquals("result", "SELECT testMolapSQLQueryColumn,testMolapSQLQueryAggName(testMolapSQLQueryColumn) FROM  WHERE ", result);
        assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
        assertEquals("molapSQLQuery.getAggs().size()", 1, molapSQLQuery.getAggs().size());
        assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
        assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
    }
    
    public void testCreateAggFromStringThrowsNullPointerException() throws Throwable {
        Map hashMap = new HashMap(100, 100.0F);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createAggFromString", new Class[] {String.class, Map.class}, null, new Object[] {null, hashMap});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertEquals("(HashMap) hashMap.size()", 0, hashMap.size());
        }
    }
    
    public void testCreateListFromStringThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createListFromString", new Class[] {String.class, List.class}, null, new Object[] {null, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testCreateListFromStringThrowsNullPointerException1() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createListFromString", new Class[] {String.class, List.class}, null, new Object[] {"testMolapSQLQueryQuery", null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testCreateTablesFromStringThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"Zb\u0002$\u0004g9U\f\f C%\u0005\u0014)HO]Z\u0003pUp-\u0003s|h\u0011U(L8UG87e\u0003\u0008", arrayList, molapSQLQuery});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
            assertEquals("(ArrayList) arrayList.get(0)", "Zb\u0002$\u0004g9U\f\f C%\u0005\u0014)HO]Z\u0003pUp-\u0003s|h\u0011U", arrayList.get(0));
            assertEquals("molapSQLQuery.getSchemaName()", "L8UG87", molapSQLQuery.getSchemaName());
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
        }
    }
    
    public void testCreateTablesFromStringThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {null, arrayList, molapSQLQuery});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testCreateTablesFromStringThrowsNullPointerException1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"(", null, molapSQLQuery});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
        }
    }
    
    public void testCreateTablesFromStringThrowsNullPointerException2() throws Throwable {
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"Zb\u0002$\u0004g9U\f\f C%\u0005\u0014)HO]Z\u0003pUp-\u0003s|h\u0011U(L8UG87e\u0003\u0008", arrayList, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
            assertEquals("(ArrayList) arrayList.get(0)", "Zb\u0002$\u0004g9U\f\f C%\u0005\u0014)HO]Z\u0003pUp-\u0003s|h\u0011U", arrayList.get(0));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testCreateTablesFromStringThrowsStringIndexOutOfBoundsException() throws Throwable {
        List arrayList = new ArrayList(100);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"(", arrayList, molapSQLQuery});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
            assertEquals("(ArrayList) arrayList.get(0)", "", arrayList.get(0));
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
        }
    }
    
    public void testCreateTablesFromStringThrowsStringIndexOutOfBoundsException1() throws Throwable {
        List arrayList = new ArrayList(100);
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createTablesFromString", new Class[] {String.class, List.class, MolapSQLQuery.class}, null, new Object[] {"testMolapSQLQueryQuery", arrayList, molapSQLQuery});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertNull("molapSQLQuery.getCubeName()", molapSQLQuery.getCubeName());
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testIterateAggsThrowsNullPointerException() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder("testMolapSQLQueryParam1");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAggs", new Class[] {StringBuilder.class, Map.class}, molapSQLQuery, new Object[] {stringBuilder, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 23, actual);
        }
    }
    
    public void testIterateAndAddTableThrowsNullPointerException() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append((Object) null);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAddTable", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 4, actual);
        }
    }
    
    public void testIterateAndAddTableThrowsNullPointerException1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        arrayList.add("SE7LECT");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAddTable", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {null, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testIterateAndAddThrowsNullPointerException() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append((Object) null);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAdd", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {stringBuilder, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
            assertEquals("stringBuilder.length()", 4, actual);
        }
    }
    
    public void testIterateAndAddThrowsNullPointerException1() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        List arrayList = new ArrayList(100);
        arrayList.add("testString");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "iterateAndAdd", new Class[] {StringBuilder.class, List.class}, molapSQLQuery, new Object[] {null, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testParseQueryThrowsArrayIndexOutOfBoundsException() throws Throwable {
        try {
            MolapSQLQuery.parseQuery("testMolapSQLQueryQuery");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testParseQueryThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        try {
            MolapSQLQuery.parseQuery("x@%)=U5<?rm5\nF!W5|eK(dfQ3a8\ri>euTNe\tH$A6[");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testParseQueryThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        try {
            MolapSQLQuery.parseQuery("X^M5}bcA2Lv9,+BcLRFf3(UACqz!&/~4Hv\\\f+,JPnn$");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testParseQueryThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        try {
            MolapSQLQuery.parseQuery("FROM");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testParseQueryThrowsNullPointerException() throws Throwable {
        try {
            MolapSQLQuery.parseQuery(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
        }
    }
    
    public void testParseQueryThrowsStringIndexOutOfBoundsException() throws Throwable {
        try {
            MolapSQLQuery.parseQuery("/d\tGJI\rDE@I+;\t]yLV(]d\fN8I4dts/(wi,'!!)S'(");
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testParseQueryThrowsStringIndexOutOfBoundsException1() throws Throwable {
        Mockingbird.enterRecordingMode();
        callPrivateMethod("com.huawei.unibi.molap.engine.query.MolapSQLQuery", "createAggFromString", new Class[] {String.class, Map.class}, null, new Object[] {"testMolapSQLQueryParam1", null});
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(StringIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(MolapSQLQuery.class);
        try {
            MolapSQLQuery.parseQuery("x@%)=U5<?rm5\nF!W5|eK(dfQ3a8\ri>euTNe\tH$A6[");
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testToStringThrowsNullPointerException() throws Throwable {
        MolapSQLQuery molapSQLQuery = new MolapSQLQuery();
        ArrayList filters = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        LinkedHashMap linkedHashMap = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.setReturnValue(false, linkedHashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapSQLQuery.class);
        molapSQLQuery.addFilter("testMolapSQLQueryTable", filters);
        molapSQLQuery.addColumn("testMolapSQLQueryColumn");
        Mockingbird.enterRecordingMode();
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, linkedHashMap, "entrySet", "()java.util.Set", abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry, 1);
        Mockingbird.setReturnValue(false, entry, "getKey", "()java.lang.Object", new Object[] {}, "testString", 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, entry, "getValue", "()java.lang.Object", new Object[] {}, arrayList, 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, linkedHashMap, "size", "()int", new Integer(3), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry2, 1);
        Mockingbird.setReturnValue(false, entry2, "getKey", "()java.lang.Object", new Object[] {}, null, 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, entry2, "getValue", "()java.lang.Object", new Object[] {}, arrayList2, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList2, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, linkedHashMap, "size", "()int", new Integer(3), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry3, 1);
        Mockingbird.setReturnValue(false, entry3, "getKey", "()java.lang.Object", new Object[] {}, "", 1);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, entry3, "getValue", "()java.lang.Object", new Object[] {}, arrayList3, 1);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList3, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, linkedHashMap, "size", "()int", new Integer(3), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(MolapSQLQuery.class);
        try {
            molapSQLQuery.toString();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertEquals("molapSQLQuery.getSelects().size()", 1, molapSQLQuery.getSelects().size());
            assertEquals("molapSQLQuery.getAggs().size()", 0, molapSQLQuery.getAggs().size());
            assertEquals("molapSQLQuery.getPred().size()", 0, molapSQLQuery.getPred().size());
            assertEquals("molapSQLQuery.getTables().size()", 0, molapSQLQuery.getTables().size());
        }
    }
}

