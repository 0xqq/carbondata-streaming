/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:51:52 PM
 * Time to generate: 01:49.625 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream;
import com.huawei.unibi.molap.engine.datastorage.streams.impl.FileDataInputStream;
import com.huawei.unibi.molap.engine.datastorage.tree.CSBTree;
import com.huawei.unibi.molap.engine.scanner.BTreeScanner;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.molap.metadata.SliceMetaData;
import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class CubeDataStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CubeDataStore.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        metaCube.getDimensions("testString");
        CubeDataStore cubeDataStore = new CubeDataStore("testString", metaCube, null);
        assertEquals("metaCube.measures.size()", 1, ((Map) getPrivateField(metaCube, "measures")).size());
        assertNull("cubeDataStore.factTableColumn", cubeDataStore.factTableColumn);
        assertEquals("cubeDataStore.keyGenerator.getDimCount()", 0, ((KeyGenerator) getPrivateField(cubeDataStore, "keyGenerator")).getDimCount());
        assertEquals("cubeDataStore.tableName", "testString", getPrivateField(cubeDataStore, "tableName"));
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
        assertSame("cubeDataStore.metaCube", metaCube, getPrivateField(cubeDataStore, "metaCube"));
        assertEquals("cubeDataStore.getMsrOrdinal().length", 0, cubeDataStore.getMsrOrdinal().length);
        assertNull("cubeDataStore.smd", getPrivateField(cubeDataStore, "smd"));
        assertEquals("cubeDataStore.aggregateNames.size()", 0, ((Collection) getPrivateField(cubeDataStore, "aggregateNames")).size());
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testConstructor1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        SliceMetaData smd = new SliceMetaData();
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, smd);
        assertEquals("metaCube.measures.size()", 1, ((Map) getPrivateField(metaCube, "measures")).size());
        assertNull("cubeDataStore.factTableColumn", cubeDataStore.factTableColumn);
        assertNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
        assertEquals("cubeDataStore.tableName", "testCubeDataStoreTable", getPrivateField(cubeDataStore, "tableName"));
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
        assertSame("cubeDataStore.metaCube", metaCube, getPrivateField(cubeDataStore, "metaCube"));
        assertEquals("cubeDataStore.getMsrOrdinal().length", 0, cubeDataStore.getMsrOrdinal().length);
        assertSame("cubeDataStore.smd", smd, getPrivateField(cubeDataStore, "smd"));
        assertEquals("cubeDataStore.aggregateNames.size()", 0, ((Collection) getPrivateField(cubeDataStore, "aggregateNames")).size());
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testConstructor2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeDataStore.class, "LOGGER");
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        SliceMetaData sliceMetaData = new SliceMetaData();
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        cube.setName("");
        cube.setSchemaName("");
        cube.setMode("file");
        sliceMetaData.setKeyGenerator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cube.getFactCountColMapping(""), "");
        setPrivateField(CubeDataStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        measure.setAggName("");
        measure2.setAggName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.replaceObjectForRecording(CSBTree.class, "<init>(com.huawei.unibi.molap.keygenerator.KeyGenerator,int,java.lang.String,boolean)", Mockingbird.getProxyObject(CSBTree.class));
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list2, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure2);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode();
        CubeDataStore cubeDataStore = new CubeDataStore("", cube, sliceMetaData);
        assertEquals("cubeDataStore.factTableColumn", "", cubeDataStore.factTableColumn);
        assertNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
        assertEquals("cubeDataStore.tableName", "", getPrivateField(cubeDataStore, "tableName"));
        assertNotNull("cubeDataStoreCubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
        assertEquals("cubeDataStore.metaCube.getName()", "", ((MolapMetadata.Cube) getPrivateField(cubeDataStore, "metaCube")).getName());
        assertEquals("cubeDataStore.getMsrOrdinal().length", 2, cubeDataStore.getMsrOrdinal().length);
        assertNull("cubeDataStore.smd.getNewMsrDfts()", ((SliceMetaData) getPrivateField(cubeDataStore, "smd")).getNewMsrDfts());
        assertNotNull("cubeDataStore.aggregateNames", getPrivateField(cubeDataStore, "aggregateNames"));
        assertNotNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testConstructor3() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeDataStore.class, "LOGGER");
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        SliceMetaData sliceMetaData = new SliceMetaData();
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        cube.setName("");
        cube.setSchemaName("");
        cube.setMode("file");
        sliceMetaData.setKeyGenerator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cube.getFactCountColMapping(""), "A");
        setPrivateField(CubeDataStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterNormalMode();
        measure.setAggName("");
        measure2.setAggName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.replaceObjectForRecording(CSBTree.class, "<init>(com.huawei.unibi.molap.keygenerator.KeyGenerator,int,java.lang.String,boolean)", Mockingbird.getProxyObject(CSBTree.class));
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list2, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure2);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.add("sum"), false);
        Mockingbird.enterTestMode();
        CubeDataStore cubeDataStore = new CubeDataStore("", cube, sliceMetaData);
        assertEquals("cubeDataStore.factTableColumn", "A", cubeDataStore.factTableColumn);
        assertNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
        assertEquals("cubeDataStore.tableName", "", getPrivateField(cubeDataStore, "tableName"));
        assertNotNull("cubeDataStoreCubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
        assertEquals("cubeDataStore.metaCube.getName()", "", ((MolapMetadata.Cube) getPrivateField(cubeDataStore, "metaCube")).getName());
        assertEquals("cubeDataStore.getMsrOrdinal().length", 3, cubeDataStore.getMsrOrdinal().length);
        assertNull("cubeDataStore.smd.getNewMsrDfts()", ((SliceMetaData) getPrivateField(cubeDataStore, "smd")).getNewMsrDfts());
        assertNotNull("cubeDataStore.aggregateNames", getPrivateField(cubeDataStore, "aggregateNames"));
        assertNotNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testClear() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        assertNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testCompare() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        double[] maxValue = new double[5];
        int[] decimal = new int[1];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        doubles2[0] = 42.41999816894531;
        int[] ints = new int[2];
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
        assertEquals("doubles2[0]", 0.0, doubles2[0], 1.0E-6);
    }
    
    public void testCompare1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[0];
        double[] doubles2 = new double[3];
        int[] ints = new int[3];
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, new ValueCompressionModel()});
        assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
    }
    
    public void testCompare2() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        minValue[0] = 2.384027002415657;
        double[] maxValue = new double[5];
        int[] decimal = new int[1];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        int[] ints = new int[2];
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
        assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
    }
    
    public void testCompare3() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[1];
        int[] ints = new int[3];
        ints[0] = 100;
        double[] minValue = new double[1];
        double[] maxValue = new double[3];
        int[] decimal = new int[2];
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles2 = new double[2];
        doubles2[0] = -12.874155038785934;
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
        assertNull("cubeDataStore.getFactTableColumn()", cubeDataStore.getFactTableColumn());
    }
    
    public void testGetData() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] msrs = new int[1];
        byte[] startKey = new byte[1];
        byte[] endKey = new byte[3];
        int[] lens = new int[1];
        Scanner scanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        KeyValue result = cubeDataStore.getData(startKey, scanner);
        assertNull("result", result);
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testGetData1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CSBTree result = (CSBTree) new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData()).getData();
        assertEquals("result.getRangeSplitValue()", 3500000L, result.getRangeSplitValue());
    }
    
    public void testGetDataStoreDS() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] lens = new int[1];
        CSBTree result = (CSBTree) cubeDataStore.getDataStoreDS(new MultiDimKeyVarLengthGenerator(lens), 100);
        assertEquals("result.getRangeSplitValue()", 3500000L, result.getRangeSplitValue());
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testGetDataStoreDS1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setMode("testCubeDataStoreMode");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] lens = new int[0];
        CSBTree result = (CSBTree) cubeDataStore.getDataStoreDS(new MultiDimKeyVarLengthGenerator(lens), 100);
        assertEquals("result.getRangeSplitValue()", 3500000L, result.getRangeSplitValue());
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testGetDataStoreRange() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        long[][] result = cubeDataStore.getDataStoreRange();
        assertNull("result", result);
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testGetFactTableColumn() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        String result = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData()).getFactTableColumn();
        assertNull("result", result);
    }
    
    public void testGetMsrOrdinal() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        int[] result = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData()).getMsrOrdinal();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetNextAvailableData() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] msrs = new int[1];
        byte[] startKey = new byte[1];
        byte[] endKey = new byte[3];
        int[] lens = new int[1];
        Scanner scanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        KeyValue result = cubeDataStore.getNextAvailableData(startKey, scanner);
        assertNull("result", result);
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testGetSize() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        long result = cubeDataStore.getSize();
        assertEquals("result", 0L, result);
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testHasFactCount() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        boolean result = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData()).hasFactCount();
        assertFalse("result", result);
    }
    
    public void testHasFactCountWithAggressiveMocks() throws Throwable {
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        cubeDataStore.factTableColumn = "A";
        Mockingbird.enterTestMode(CubeDataStore.class);
        boolean result = cubeDataStore.hasFactCount();
        assertTrue("result", result);
    }
    
    public void testHasFactCountWithAggressiveMocks1() throws Throwable {
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        cubeDataStore.factTableColumn = "";
        Mockingbird.enterTestMode(CubeDataStore.class);
        boolean result = cubeDataStore.hasFactCount();
        assertFalse("result", result);
    }
    
    public void testInitializeScanner() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] lens = new int[0];
        byte[] endKey = new byte[2];
        byte[] key = new byte[2];
        byte[] startKey = new byte[0];
        int[] msrs = new int[2];
        Scanner scanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, null);
        cubeDataStore.initializeScanner(key, scanner);
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testLoadDataFromFile() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.getDimensions("testString");
        metaCube.setSchemaName("");
        metaCube.setName("testCubeDataStoreName");
        CubeDataStore cubeDataStore = new CubeDataStore("testString", metaCube, null);
        boolean result = cubeDataStore.loadDataFromFile("testCubeDataStoreFilesLocaton");
        assertTrue("result", result);
        assertEquals("cubeDataStore.keyGenerator.getDimCount()", 0, ((KeyGenerator) getPrivateField(cubeDataStore, "keyGenerator")).getDimCount());
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
        assertSame("cubeDataStore.metaCube", metaCube, getPrivateField(cubeDataStore, "metaCube"));
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testLoadDataFromFileWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeDataStore.class, "LOGGER");
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        DataStore dataStore = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        DataInputStream dataInputStream2 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        DataInputStream dataInputStream3 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        DataInputStream dataInputStream4 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        setPrivateField(cubeDataStore, "keyGenerator", keyGenerator);
        setPrivateField(cubeDataStore, "smd", null);
        setPrivateField(cubeDataStore, "metaCube", cube);
        setPrivateField(cubeDataStore, "aggregateNames", null);
        setPrivateField(cubeDataStore, "tableName", "");
        setPrivateField(cubeDataStore, "data", dataStore);
        cubeDataStore.factTableColumn = "A";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.enterNormalMode();
        dimension.setNoOfbits(0);
        dimension2.setNoOfbits(0);
        files[0] = file;
        files[1] = file2;
        setPrivateField(CubeDataStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", fileFilter);
        Mockingbird.setReturnValue(false, file3, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", comparator);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {files, comparator}, null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(FileDataInputStream.class));
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(FileDataInputStream.class));
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), dataInputStream);
        dataInputStream.initInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.get(1), dataInputStream2);
        dataInputStream2.initInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        dataStore.build(arrayList, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(arrayList.get(0), dataInputStream3);
        dataInputStream3.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.get(1), dataInputStream4);
        dataInputStream4.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeDataStore.class);
        boolean result = cubeDataStore.loadDataFromFile("");
        assertTrue("result", result);
        assertNotNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
        assertNotNull("cubeDataStoreCubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
        assertNull("cubeDataStore.metaCube.getName()", ((MolapMetadata.Cube) getPrivateField(cubeDataStore, "metaCube")).getName());
        assertNotNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testLoadDataFromFileWithAggressiveMocks1() throws Throwable {
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        File[] files = new File[0];
        setPrivateField(cubeDataStore, "keyGenerator", keyGenerator);
        setPrivateField(cubeDataStore, "smd", null);
        setPrivateField(cubeDataStore, "metaCube", cube);
        setPrivateField(cubeDataStore, "tableName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.enterNormalMode();
        dimension.setNoOfbits(0);
        dimension2.setNoOfbits(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", fileFilter);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", comparator);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {files, comparator}, null, 1);
        Mockingbird.enterTestMode(CubeDataStore.class);
        boolean result = cubeDataStore.loadDataFromFile("");
        assertFalse("result", result);
        assertNotNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
        assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
        assertNull("cubeDataStore.metaCube.getName()", ((MolapMetadata.Cube) getPrivateField(cubeDataStore, "metaCube")).getName());
        assertNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testLoadDataFromFileWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(CubeDataStore.class, "LOGGER");
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        DataStore dataStore = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        DataInputStream dataInputStream2 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        DataInputStream dataInputStream3 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        DataInputStream dataInputStream4 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        setPrivateField(cubeDataStore, "keyGenerator", keyGenerator);
        setPrivateField(cubeDataStore, "smd", null);
        setPrivateField(cubeDataStore, "metaCube", cube);
        setPrivateField(cubeDataStore, "aggregateNames", null);
        setPrivateField(cubeDataStore, "tableName", "");
        setPrivateField(cubeDataStore, "data", dataStore);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.enterNormalMode();
        dimension.setNoOfbits(0);
        dimension2.setNoOfbits(0);
        files[0] = file;
        files[1] = file2;
        setPrivateField(CubeDataStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.size(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", fileFilter);
        Mockingbird.setReturnValue(false, file3, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.CubeDataStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.CubeDataStore)", comparator);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {files, comparator}, null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(cubeDataStore.hasFactCount(), false);
        Mockingbird.setReturnValue(cubeDataStore.hasFactCount(), false);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(FileDataInputStream.class));
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(cubeDataStore.hasFactCount(), false);
        Mockingbird.setReturnValue(cubeDataStore.hasFactCount(), false);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(FileDataInputStream.class));
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(0), dataInputStream);
        dataInputStream.initInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.get(1), dataInputStream2);
        dataInputStream2.initInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(cubeDataStore.hasFactCount(), false);
        dataStore.build(arrayList, false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(arrayList.get(0), dataInputStream3);
        dataInputStream3.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.get(1), dataInputStream4);
        dataInputStream4.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeDataStore.class);
        boolean result = cubeDataStore.loadDataFromFile("");
        assertTrue("result", result);
    }
    
    public void testLoadDataFromSlicesWithAggressiveMocks() throws Throwable {
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        DataStore dataStore = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        int[] ints = new int[0];
        DataStore dataStore2 = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        double[] doubles = new double[2];
        int[] ints2 = new int[2];
        double[] doubles2 = new double[2];
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        DataStore dataStore3 = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        ValueCompressionModel valueCompressionModel2 = new ValueCompressionModel();
        double[] doubles3 = new double[2];
        double[] doubles4 = new double[2];
        int[] ints3 = new int[2];
        setPrivateField(cubeDataStore, "keyGenerator", null);
        setPrivateField(cubeDataStore, "aggregateNames", null);
        setPrivateField(cubeDataStore, "data", dataStore);
        cubeDataStore.factTableColumn = "A";
        Mockingbird.setReturnValue(list.get(0), cubeDataStore2);
        setPrivateField(cubeDataStore2, "msrOrdinal", ints);
        setPrivateField(cubeDataStore2, "data", dataStore2);
        Mockingbird.enterNormalMode();
        valueCompressionModel.setMaxValue(doubles);
        valueCompressionModel.setDecimal(ints2);
        valueCompressionModel.setMinValue(doubles2);
        doubles[0] = 0.0;
        doubles[1] = 0.0;
        ints2[0] = 0;
        ints2[1] = 0;
        doubles2[0] = 0.0;
        doubles2[1] = 0.0;
        setPrivateField(cubeDataStore3, "data", dataStore3);
        valueCompressionModel2.setMaxValue(doubles3);
        valueCompressionModel2.setMinValue(doubles4);
        valueCompressionModel2.setDecimal(ints3);
        doubles3[0] = 0.0;
        doubles3[1] = 0.0;
        doubles4[0] = 0.0;
        doubles4[1] = 0.0;
        ints3[0] = 0;
        ints3[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataStore2.getCompressionModel(), valueCompressionModel);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", fileHolderImpl);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, dataStore2, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), cubeDataStore3);
        Mockingbird.setReturnValue(false, dataStore2, "getCompressionModel", "()com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel", valueCompressionModel2, 1);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, dataStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(list.size(), 1);
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {scannersInputCombiner}, Boolean.FALSE, 1);
        dataStore.build(arrayList2, true);
        Mockingbird.setNormalReturnForVoid();
        fileHolderImpl.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeDataStore.class);
        cubeDataStore.loadDataFromSlices(list, null);
        assertNotNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testLoadDataFromSlicesWithAggressiveMocks1() throws Throwable {
        CubeDataStore cubeDataStore = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        DataStore dataStore = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        CubeDataStore cubeDataStore2 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        int[] ints = new int[0];
        DataStore dataStore2 = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        ValueCompressionModel valueCompressionModel = (ValueCompressionModel) Mockingbird.getProxyObject(ValueCompressionModel.class);
        double[] doubles = new double[2];
        int[] ints2 = new int[2];
        double[] doubles2 = new double[2];
        DataStore dataStore3 = (DataStore) Mockingbird.getProxyObject(DataStore.class);
        ValueCompressionModel valueCompressionModel2 = new ValueCompressionModel();
        double[] doubles3 = new double[2];
        double[] doubles4 = new double[2];
        int[] ints3 = new int[2];
        setPrivateField(cubeDataStore, "tableName", "");
        setPrivateField(cubeDataStore, "metaCube", null);
        setPrivateField(cubeDataStore, "smd", null);
        setPrivateField(cubeDataStore, "keyGenerator", null);
        setPrivateField(cubeDataStore, "aggregateNames", null);
        setPrivateField(cubeDataStore, "data", dataStore);
        cubeDataStore.factTableColumn = "A";
        Mockingbird.setReturnValue(list.get(0), cubeDataStore2);
        setPrivateField(cubeDataStore2, "msrOrdinal", ints);
        setPrivateField(cubeDataStore2, "data", dataStore2);
        Mockingbird.enterNormalMode();
        valueCompressionModel.setMaxValue(doubles);
        valueCompressionModel.setDecimal(ints2);
        valueCompressionModel.setMinValue(doubles2);
        doubles[0] = 2.802596928649634E-45;
        doubles[1] = 2.802596928649634E-45;
        ints2[0] = 1;
        ints2[1] = 1;
        doubles2[0] = -1.401298464324817E-45;
        doubles2[1] = -1.401298464324817E-45;
        valueCompressionModel2.setMaxValue(doubles3);
        valueCompressionModel2.setMinValue(doubles4);
        valueCompressionModel2.setDecimal(ints3);
        doubles3[0] = 0.0;
        doubles3[1] = 0.0;
        doubles4[0] = 0.0;
        doubles4[1] = 0.0;
        ints3[0] = 0;
        ints3[1] = 0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataStore2.getCompressionModel(), valueCompressionModel);
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", fileHolderImpl);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, dataStore2, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(list.size(), 0);
        CubeDataStore cubeDataStore3 = (CubeDataStore) Mockingbird.getProxyObject(CubeDataStore.class, true);
        Mockingbird.replaceObjectForRecording(CubeDataStore.class, "<init>(java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.metadata.SliceMetaData)", cubeDataStore3);
        setPrivateField(cubeDataStore3, "data", dataStore3);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, cubeDataStore3, "loadDataFromFile", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, dataStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(false, dataStore2, "getCompressionModel", "()com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel", valueCompressionModel2, 1);
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", new Object[] {scannersInputCombiner}, boolean2, 1);
        dataStore.build(arrayList2, true);
        Mockingbird.setNormalReturnForVoid();
        fileHolderImpl.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CubeDataStore.class);
        cubeDataStore.loadDataFromSlices(list, "");
        assertNotNull("cubeDataStore.getData()", cubeDataStore.getData());
    }
    
    public void testSetScannerForSlices() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeDataStoreName");
        cube.getDimensions("testString");
        SliceMetaData smd = new SliceMetaData();
        smd.setKeyGenerator(cube.getKeyGenerator("testString"));
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, smd);
        int[] ints = new int[2];
        List arrayList = new ArrayList(100);
        MolapMetadata.Cube metaCube2 = new MolapMetadata.Cube("testCubeDataStoreName2");
        metaCube2.setSchemaName(" ");
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "setScannerForSlices", new Class[] {List.class, CubeDataStore.class, int[].class, FileHolder.class}, cubeDataStore, new Object[] {arrayList, new CubeDataStore("testCubeDataStoreTable1", metaCube2, new SliceMetaData()), ints, new FileHolderImpl(100)});
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setMode("testCubeDataStoreMode");
        try {
            new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("metaCube.measures.size()", 1, ((Map) getPrivateField(metaCube, "measures")).size());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNotNull("CubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
            assertNull("metaCube.getFactTableName()", metaCube.getFactTableName());
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        try {
            new CubeDataStore("testCubeDataStoreTable", metaCube, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("metaCube.measures.size()", 1, ((Map) getPrivateField(metaCube, "measures")).size());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapMetadata.Cube.class, ex);
            assertNotNull("CubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
            assertNull("metaCube.getFactTableName()", metaCube.getFactTableName());
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        try {
            new CubeDataStore("testCubeDataStoreTable", null, new SliceMetaData());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNotNull("CubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsStringIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("");
        metaCube.setSchemaName("testCubeDataStoreSchemaName");
        metaCube.getDimensions("testString");
        try {
            new CubeDataStore("testString", metaCube, null);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("metaCube.measures.size()", 1, ((Map) getPrivateField(metaCube, "measures")).size());
            assertEquals("ex.getMessage()", "String index out of range: -27", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertNotNull("CubeDataStore.LOGGER", getPrivateField(CubeDataStore.class, "LOGGER"));
            assertNull("metaCube.getFactTableName()", metaCube.getFactTableName());
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[3];
        int[] ints = new int[0];
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 100);
        double[] doubles2 = new double[0];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[1];
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 0);
        double[] doubles2 = new double[0];
        int[] ints = new int[3];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] maxValue = new double[4];
        maxValue[1] = -38.0742301940918;
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 100);
        valueCompressionModel.setMaxValue(maxValue);
        double[] doubles = new double[2];
        double[] doubles2 = new double[4];
        int[] ints = new int[2];
        double[] minValue = new double[1];
        valueCompressionModel.setMinValue(minValue);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        minValue[0] = 2.384027002415657;
        double[] maxValue = new double[5];
        int[] decimal = new int[1];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles2 = new double[4];
        doubles2[0] = 14.619627281541824;
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles2, doubles, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[3];
        int[] ints = new int[0];
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 100);
        double[] minValue = new double[1];
        valueCompressionModel.setMinValue(minValue);
        double[] doubles2 = new double[2];
        doubles2[0] = 1.0712573528289795;
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("doubles2[0]", 0.0, doubles2[0], 1.0E-6);
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        double[] maxValue = new double[5];
        int[] decimal = new int[1];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles2 = new double[4];
        doubles2[0] = 14.619627281541824;
        doubles2[1] = 100.0;
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles2, doubles, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        minValue[0] = 2.384027002415657;
        double[] maxValue = new double[5];
        int[] decimal = new int[1];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        valueCompressionModel.setDecimal(decimal);
        double[] doubles2 = new double[4];
        doubles2[0] = 14.619627281541824;
        doubles2[1] = 100.0;
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles2, doubles, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[3];
        int[] ints = new int[0];
        double[] minValue = new double[3];
        minValue[0] = 10.64995002746582;
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 100);
        valueCompressionModel.setMinValue(minValue);
        double[] doubles2 = new double[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsArrayIndexOutOfBoundsException8() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = ValueCompressionUtil.getValueCompressionModel("testCubeDataStoreMeasureMetaDataFileLocation", 100);
        double[] doubles = new double[2];
        double[] doubles2 = new double[4];
        int[] ints = new int[2];
        double[] minValue = new double[1];
        double[] maxValue = new double[4];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] maxValue = new double[5];
        valueCompressionModel.setMaxValue(maxValue);
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, valueCompressionModel});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException1() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] minValue = new double[2];
        minValue[0] = 2.384027002415657;
        double[] maxValue = new double[5];
        valueCompressionModel.setMaxValue(maxValue);
        valueCompressionModel.setMinValue(minValue);
        double[] doubles2 = new double[4];
        doubles2[0] = 14.619627281541824;
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles2, doubles, ints, valueCompressionModel});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException2() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        double[] doubles = new double[1];
        double[] doubles2 = new double[3];
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles, doubles2, ints, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException3() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {null, doubles, ints, new ValueCompressionModel()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testCompareThrowsNullPointerException4() throws Throwable {
        double[] doubles = new double[1];
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        ValueCompressionModel valueCompressionModel = new ValueCompressionModel();
        double[] maxValue = new double[5];
        valueCompressionModel.setMaxValue(maxValue);
        double[] doubles2 = new double[4];
        doubles2[0] = 14.619627281541824;
        int[] ints = new int[2];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "compare", new Class[] {double[].class, double[].class, int[].class, ValueCompressionModel.class}, cubeDataStore, new Object[] {doubles2, doubles, ints, valueCompressionModel});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
        }
    }
    
    public void testGetDataStoreDSThrowsStringIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        metaCube.setSchemaName("testCubeDataStore\rSchemaName");
        metaCube.setName("testCubeDataStoreName");
        int[] lens = new int[3];
        try {
            cubeDataStore.getDataStoreDS(new MultiDimKeyVarLengthGenerator(lens), 100);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -7", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testGetDataStoreRangeThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        try {
            cubeDataStore.getDataStoreRange();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testGetDataThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        byte[] endKey = new byte[2];
        byte[] key = new byte[0];
        byte[] startKey = new byte[0];
        int[] msrs = new int[2];
        Scanner scanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, null);
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        try {
            cubeDataStore.getData(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testGetNextAvailableDataThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        int[] lens = new int[1];
        byte[] key = new byte[3];
        byte[] startKey = new byte[2];
        byte[] endKey = new byte[1];
        int[] msrs = new int[3];
        Scanner scanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        try {
            cubeDataStore.getNextAvailableData(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testGetSizeThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        try {
            cubeDataStore.getSize();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testInitializeScannerThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        byte[] key = new byte[2];
        byte[] startKey = new byte[2];
        byte[] endKey = new byte[3];
        int[] msrs = new int[1];
        int[] lens = new int[3];
        Scanner scanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        try {
            cubeDataStore.initializeScanner(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
        }
    }
    
    public void testLoadDataFromFileThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        try {
            cubeDataStore.loadDataFromFile("testCubeDataStoreFilesLocaton");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            int actual = ((Map) getPrivateField(getPrivateField(cubeDataStore, "metaCube"), "dimensions")).size();
            assertEquals("cubeDataStore.metaCube.dimensions.size()", 1, actual);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.keyGenerator", getPrivateField(cubeDataStore, "keyGenerator"));
            assertSame("cubeDataStore.metaCube", metaCube, getPrivateField(cubeDataStore, "metaCube"));
            assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
        }
    }
    
    public void testLoadDataFromFileThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeDataStoreName");
        cube.getDimensions("testString");
        KeyGenerator keyGenerator = cube.getKeyGenerator("testString");
        SliceMetaData smd = new SliceMetaData();
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube.setSchemaName("");
        smd.setKeyGenerator(keyGenerator);
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, smd);
        try {
            cubeDataStore.loadDataFromFile("testCubeDataStoreFilesLocaton");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            int actual = ((Map) getPrivateField(getPrivateField(cubeDataStore, "metaCube"), "dimensions")).size();
            assertEquals("cubeDataStore.metaCube.dimensions.size()", 1, actual);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertSame("cubeDataStore.keyGenerator", keyGenerator, getPrivateField(cubeDataStore, "keyGenerator"));
            assertSame("cubeDataStore.metaCube", metaCube, getPrivateField(cubeDataStore, "metaCube"));
            assertTrue("cubeDataStoreCubeDataStore.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(CubeDataStore.class, "LOGGER")).isDebugEnabled());
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
        }
    }
    
    public void testLoadDataFromSlicesThrowsIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        List dataStores = new ArrayList(100);
        try {
            cubeDataStore.loadDataFromSlices(dataStores, "testCubeDataStoreFileStore");
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
            assertEquals("(ArrayList) dataStores.size()", 0, dataStores.size());
        }
    }
    
    public void testLoadDataFromSlicesThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        try {
            cubeDataStore.loadDataFromSlices(null, "testCubeDataStoreFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
        }
    }
    
    public void testLoadDataFromSlicesThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        List dataStores = new ArrayList(100);
        dataStores.add((Object) null);
        try {
            cubeDataStore.loadDataFromSlices(dataStores, "testCubeDataStoreFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
            assertEquals("(ArrayList) dataStores.size()", 1, dataStores.size());
        }
    }
    
    public void testLoadDataFromSlicesThrowsNullPointerException2() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        cubeDataStore.clear();
        List dataStores = new ArrayList(100);
        dataStores.add(cubeDataStore);
        try {
            cubeDataStore.loadDataFromSlices(dataStores, "testCubeDataStoreFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
            assertEquals("(ArrayList) dataStores.size()", 1, dataStores.size());
        }
    }
    
    public void testLoadDataFromSlicesThrowsNullPointerException3() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeDataStoreName");
        cube.getDimensions("testString");
        SliceMetaData smd = new SliceMetaData();
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube.setSchemaName("");
        smd.setKeyGenerator(cube.getKeyGenerator("testString"));
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, smd);
        List dataStores = new ArrayList(100);
        MolapMetadata.Cube metaCube2 = new MolapMetadata.Cube("testCubeDataStoreName2");
        metaCube2.setSchemaName(" ");
        dataStores.add(new CubeDataStore("testCubeDataStoreTable1", metaCube2, new SliceMetaData()));
        try {
            cubeDataStore.loadDataFromSlices(dataStores, "testCubeDataStoreFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
            assertEquals("(ArrayList) dataStores.size()", 1, dataStores.size());
        }
    }
    
    public void testLoadDataFromSlicesThrowsNullPointerException4() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        List dataStores = new ArrayList(100);
        MolapMetadata.Cube metaCube2 = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube2.setSchemaName(" ");
        dataStores.add(new CubeDataStore("testCubeDataStoreTable1", metaCube2, new SliceMetaData()));
        try {
            cubeDataStore.loadDataFromSlices(dataStores, "testCubeDataStoreFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BTreeScanner.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
            assertEquals("(ArrayList) dataStores.size()", 1, dataStores.size());
        }
    }
    
    public void testSetScannerForSlicesThrowsNullPointerException() throws Throwable {
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, new SliceMetaData());
        List arrayList = new ArrayList(100);
        int[] ints = new int[0];
        MolapMetadata.Cube metaCube2 = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube2.setSchemaName(" ");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "setScannerForSlices", new Class[] {List.class, CubeDataStore.class, int[].class, FileHolder.class}, cubeDataStore, new Object[] {arrayList, new CubeDataStore("testCubeDataStoreTable1", metaCube2, new SliceMetaData()), ints, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BTreeScanner.class, ex);
            assertEquals("cubeDataStore.getData().getRangeSplitValue()", 3500000L, cubeDataStore.getData().getRangeSplitValue());
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testSetScannerForSlicesThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Cube cube = new MolapMetadata.Cube("testCubeDataStoreName");
        cube.getDimensions("testString");
        SliceMetaData smd = new SliceMetaData();
        smd.setKeyGenerator(cube.getKeyGenerator("testString"));
        MolapMetadata.Cube metaCube = new MolapMetadata.Cube("testCubeDataStoreName1");
        metaCube.setSchemaName("");
        CubeDataStore cubeDataStore = new CubeDataStore("testCubeDataStoreTable", metaCube, smd);
        cubeDataStore.clear();
        List arrayList = new ArrayList(100);
        int[] ints = new int[3];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeDataStore", "setScannerForSlices", new Class[] {List.class, CubeDataStore.class, int[].class, FileHolder.class}, cubeDataStore, new Object[] {arrayList, cubeDataStore, ints, new FileHolderImpl()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeDataStore.class, ex);
            assertNull("cubeDataStore.getData()", cubeDataStore.getData());
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
}

