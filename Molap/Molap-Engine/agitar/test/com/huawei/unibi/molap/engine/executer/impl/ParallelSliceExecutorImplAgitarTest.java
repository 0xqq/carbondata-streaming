/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:08:36 PM
 * Time to generate: 00:35.218 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public class ParallelSliceExecutorImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ParallelSliceExecutorImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        SliceExecutionInfo info = new SliceExecutionInfo();
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(info);
        assertSame("parallelSliceExecutorImpl.info", info, getPrivateField(parallelSliceExecutorImpl, "info"));
    }
    
    public void testExecuteSliceInParallel() throws Throwable {
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(new SliceExecutionInfo());
        long[][] longs = new long[3][];
        long[][] longs2 = new long[2][];
        long[][] longs3 = new long[2][];
        long[][][] ranges = new long[3][][];
        ranges[0] = longs;
        ranges[1] = longs2;
        ranges[2] = longs3;
        Map result = parallelSliceExecutorImpl.executeSliceInParallel(ranges);
        assertNull("result", result);
        boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
        assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
        boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
        assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
    }
    
    public void testExecuteSliceInParallel1() throws Throwable {
        long[] longs = new long[1];
        long[][] longs2 = new long[5][];
        longs2[1] = longs;
        long[][] longs3 = new long[4][];
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(new SliceExecutionInfo());
        long[][] longs4 = new long[3][];
        long[][][] ranges = new long[2][][];
        ranges[0] = longs3;
        ranges[1] = longs4;
        Map result = parallelSliceExecutorImpl.executeSliceInParallel(ranges);
        assertNull("result", result);
        boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
        assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
        boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
        assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
    }
    
    public void testExecuteSliceInParallelWithAggressiveMocks() throws Throwable {
        storeStaticField(ParallelSliceExecutorImpl.class, "execService");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(ParallelSliceExecutorImpl.class, "LOGGER");
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class, true);
        long[][][] longs = new long[2][0][0];
        long[][] longs2 = new long[2][0];
        long[][] longs3 = new long[2][0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        ExecutorService executorService = (ExecutorService) Mockingbird.getProxyObject(ExecutorService.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs6 = new long[0];
        long[] longs7 = new long[0];
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future = (Future) Mockingbird.getProxyObject(Future.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future2 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future3 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future4 = (Future) Mockingbird.getProxyObject(Future.class);
        setPrivateField(parallelSliceExecutorImpl, "info", null);
        longs[0] = longs2;
        longs[1] = longs3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        longs2[0] = longs4;
        longs2[1] = longs5;
        setPrivateField(ParallelSliceExecutorImpl.class, "execService", executorService);
        setPrivateField(ParallelSliceExecutorImpl.class, "LOGGER", logService);
        longs3[0] = longs6;
        longs3[1] = longs7;
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        SliceRangeExecutor sliceRangeExecutor2 = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor2);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), future);
        Mockingbird.setReturnValue(future.isDone(), false);
        Mockingbird.setReturnValue(future.isCancelled(), true);
        Mockingbird.setReturnValue(arrayList.remove(future), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future2);
        Mockingbird.setReturnValue(future2.isDone(), false);
        Mockingbird.setReturnValue(future2.isCancelled(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future3);
        Mockingbird.setReturnValue(future3.isDone(), false);
        Mockingbird.setReturnValue(future3.isCancelled(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future4);
        Mockingbird.setReturnValue(future4.isDone(), true);
        Mockingbird.setReturnValue(future4.get(), null);
        Mockingbird.setReturnValue(arrayList.remove(future4), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(ParallelSliceExecutorImpl.class);
        Map result = parallelSliceExecutorImpl.executeSliceInParallel(longs);
        assertNull("result", result);
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER", getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER"));
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.execService", getPrivateField(ParallelSliceExecutorImpl.class, "execService"));
    }
    
    public void testExecuteSliceInParallelWithAggressiveMocks1() throws Throwable {
        storeStaticField(ParallelSliceExecutorImpl.class, "execService");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(ParallelSliceExecutorImpl.class, "LOGGER");
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class, true);
        long[][][] longs = new long[2][0][0];
        long[][] longs2 = new long[2][0];
        long[][] longs3 = new long[2][0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        ExecutorService executorService = (ExecutorService) Mockingbird.getProxyObject(ExecutorService.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs6 = new long[0];
        long[] longs7 = new long[0];
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future = (Future) Mockingbird.getProxyObject(Future.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future2 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future3 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future4 = (Future) Mockingbird.getProxyObject(Future.class);
        setPrivateField(parallelSliceExecutorImpl, "info", null);
        longs[0] = longs2;
        longs[1] = longs3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        longs2[0] = longs4;
        longs2[1] = longs5;
        setPrivateField(ParallelSliceExecutorImpl.class, "execService", executorService);
        setPrivateField(ParallelSliceExecutorImpl.class, "LOGGER", logService);
        longs3[0] = longs6;
        longs3[1] = longs7;
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        SliceRangeExecutor sliceRangeExecutor2 = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor2);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), future);
        Mockingbird.setReturnValue(future.isDone(), true);
        Mockingbird.setReturnValue(future.get(), null);
        Mockingbird.setReturnValue(arrayList.remove(future), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future2);
        Mockingbird.setReturnValue(future2.isDone(), false);
        Mockingbird.setReturnValue(future2.isCancelled(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future3);
        Mockingbird.setReturnValue(future3.isDone(), false);
        Mockingbird.setReturnValue(future3.isCancelled(), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future4);
        Mockingbird.setReturnValue(future4.isDone(), true);
        Mockingbird.setReturnValue(future4.get(), null);
        InMemoryQueryExecutor.mergeByteArrayMapResult(null, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.remove(future4), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(ParallelSliceExecutorImpl.class);
        Map result = parallelSliceExecutorImpl.executeSliceInParallel(longs);
        assertNull("result", result);
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER", getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER"));
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.execService", getPrivateField(ParallelSliceExecutorImpl.class, "execService"));
    }
    
    public void testExecuteSliceInParallelWithAggressiveMocks2() throws Throwable {
        storeStaticField(ParallelSliceExecutorImpl.class, "execService");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(ParallelSliceExecutorImpl.class, "LOGGER");
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = (ParallelSliceExecutorImpl) Mockingbird.getProxyObject(ParallelSliceExecutorImpl.class, true);
        long[][][] longs = new long[2][0][0];
        long[][] longs2 = new long[2][0];
        long[][] longs3 = new long[2][0];
        long[] longs4 = new long[0];
        long[] longs5 = new long[0];
        ExecutorService executorService = (ExecutorService) Mockingbird.getProxyObject(ExecutorService.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        long[] longs6 = new long[0];
        long[] longs7 = new long[0];
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future = (Future) Mockingbird.getProxyObject(Future.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Future future2 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future3 = (Future) Mockingbird.getProxyObject(Future.class);
        Future future4 = (Future) Mockingbird.getProxyObject(Future.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        setPrivateField(parallelSliceExecutorImpl, "info", null);
        longs[0] = longs2;
        longs[1] = longs3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        longs2[0] = longs4;
        longs2[1] = longs5;
        setPrivateField(ParallelSliceExecutorImpl.class, "execService", executorService);
        setPrivateField(ParallelSliceExecutorImpl.class, "LOGGER", logService);
        longs3[0] = longs6;
        longs3[1] = longs7;
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        SliceRangeExecutor sliceRangeExecutor = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        SliceRangeExecutor sliceRangeExecutor2 = (SliceRangeExecutor) Mockingbird.getProxyObject(SliceRangeExecutor.class);
        Mockingbird.replaceObjectForRecording(SliceRangeExecutor.class, "<init>(long[],long[],boolean,com.huawei.unibi.molap.engine.executer.impl.SliceExecutionInfo)", sliceRangeExecutor2);
        Mockingbird.setReturnValue(executorService.submit(sliceRangeExecutor2), null);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), future);
        Mockingbird.setReturnValue(future.isDone(), false);
        Mockingbird.setReturnValue(future.isCancelled(), true);
        Mockingbird.setReturnValue(arrayList.remove(future), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(10L)}, null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), future2);
        Mockingbird.setReturnValue(future2.isDone(), false);
        Mockingbird.setReturnValue(future2.isCancelled(), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), future3);
        Mockingbird.setReturnValue(future3.isDone(), false);
        Mockingbird.setReturnValue(future3.isCancelled(), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), future4);
        Mockingbird.setReturnValue(future4.isDone(), true);
        Mockingbird.setException(future4.get(), interruptedException);
        Mockingbird.setReturnValue(false, interruptedException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(ParallelSliceExecutorImpl.class);
        Map result = parallelSliceExecutorImpl.executeSliceInParallel(longs);
        assertNull("result", result);
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER", getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER"));
        assertNotNull("parallelSliceExecutorImplParallelSliceExecutorImpl.execService", getPrivateField(ParallelSliceExecutorImpl.class, "execService"));
    }
    
    public void testExecuteSliceInParallelThrowsNullPointerException() throws Throwable {
        long[][] longs = new long[4][];
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(new SliceExecutionInfo());
        long[][][] ranges = new long[2][][];
        ranges[0] = longs;
        try {
            parallelSliceExecutorImpl.executeSliceInParallel(ranges);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ParallelSliceExecutorImpl.class, ex);
            boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
            assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
            boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
            assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
        }
    }
    
    public void testExecuteSliceInParallelThrowsNullPointerException1() throws Throwable {
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(null);
        long[][][] ranges = new long[2][][];
        try {
            parallelSliceExecutorImpl.executeSliceInParallel(ranges);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ParallelSliceExecutorImpl.class, ex);
            boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
            assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
            boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
            assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
        }
    }
    
    public void testExecuteSliceInParallelThrowsNullPointerException2() throws Throwable {
        long[][][] ranges = new long[1][][];
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(new SliceExecutionInfo());
        try {
            parallelSliceExecutorImpl.executeSliceInParallel(ranges);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
            boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
            assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
            boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
            assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
        }
    }
    
    public void testExecuteSliceInParallelThrowsNullPointerException3() throws Throwable {
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(null);
        long[][][] ranges = new long[0][][];
        try {
            parallelSliceExecutorImpl.executeSliceInParallel(ranges);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ParallelSliceExecutorImpl.class, ex);
            boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
            assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
            boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
            assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
        }
    }
    
    public void testExecuteSliceInParallelThrowsNullPointerException4() throws Throwable {
        ParallelSliceExecutorImpl parallelSliceExecutorImpl = new ParallelSliceExecutorImpl(new SliceExecutionInfo());
        try {
            parallelSliceExecutorImpl.executeSliceInParallel((long[][][]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SliceRangeExecutor.class, ex);
            boolean actual = ((LogService) getPrivateField(ParallelSliceExecutorImpl.class, "LOGGER")).isDebugEnabled();
            assertTrue("parallelSliceExecutorImplParallelSliceExecutorImpl.LOGGER.isDebugEnabled()", actual);
            boolean actual2 = ((ExecutorService) getPrivateField(ParallelSliceExecutorImpl.class, "execService")).isShutdown();
            assertFalse("parallelSliceExecutorImplParallelSliceExecutorImpl.execService.isShutdown()", actual2);
        }
    }
}

