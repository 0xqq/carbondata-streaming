/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:52:54 PM
 * Time to generate: 00:19.055 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage.streams.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionUtil;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.datastorage.Pair;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.metadata.LeafNodeInfo;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

public class FileDataInputStreamAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FileDataInputStream.class;
    }
    
    public void testConstructor() throws Throwable {
        List aggregateNames = new ArrayList(100);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, aggregateNames, true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        assertEquals("fileDataInputStream.tableName", "testFileDataInputStreamTableName", getPrivateField(fileDataInputStream, "tableName"));
        assertSame("fileDataInputStream.aggregateNames", aggregateNames, getPrivateField(fileDataInputStream, "aggregateNames"));
        assertEquals("fileDataInputStream.filesLocation", "testFileDataInputStreamFilesLocation", getPrivateField(fileDataInputStream, "filesLocation"));
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        assertTrue("fileDataInputStream.hasFactCount", fileDataInputStream.hasFactCount);
        assertEquals("fileDataInputStream.persistenceFileLocation", "testFileDataInputStreamPersistenceFileLocation", getPrivateField(fileDataInputStream, "persistenceFileLocation"));
        assertEquals("fileDataInputStream.msrCount", 1000, ((Number) getPrivateField(fileDataInputStream, "msrCount")).intValue());
        assertEquals("fileDataInputStream.HIERARCHY_FILE_EXTENSION", ".hierarchy", getPrivateField(fileDataInputStream, "HIERARCHY_FILE_EXTENSION"));
        assertEquals("fileDataInputStream.mdkeysize", 100, ((Number) getPrivateField(fileDataInputStream, "mdkeysize")).intValue());
    }
    
    public void testCloseInput() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        fileDataInputStream.closeInput();
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
    }
    
    public void testCloseInputWithAggressiveMocks() throws Throwable {
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        setPrivateField(fileDataInputStream, "channel", fileChannel);
        setPrivateField(fileDataInputStream, "fileHolder", fileHolder);
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, fileChannel, "close", "()void", new Object[] {}, null, 1);
        fileHolder.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, bufferedInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        fileDataInputStream.closeInput();
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
        assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertNotNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
    }
    
    public void testCloseInputWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(FileDataInputStream.class, "LOGGER");
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(fileDataInputStream, "channel", fileChannel);
        setPrivateField(fileDataInputStream, "filesLocation", "");
        setPrivateField(fileDataInputStream, "fileHolder", fileHolder);
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        setPrivateField(FileDataInputStream.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, fileChannel, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        fileHolder.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, bufferedInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        fileDataInputStream.closeInput();
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        assertNotNull("fileDataInputStreamFileDataInputStream.LOGGER", getPrivateField(FileDataInputStream.class, "LOGGER"));
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertNotNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
    }
    
    public void testCloseInputWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(FileDataInputStream.class, "LOGGER");
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(fileDataInputStream, "channel", fileChannel);
        setPrivateField(fileDataInputStream, "fileHolder", fileHolder);
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        setPrivateField(fileDataInputStream, "filesLocation", "");
        setPrivateField(FileDataInputStream.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, fileChannel, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        fileHolder.finish();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setException(false, bufferedInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        fileDataInputStream.closeInput();
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        assertNotNull("fileDataInputStreamFileDataInputStream.LOGGER", getPrivateField(FileDataInputStream.class, "LOGGER"));
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertNotNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
    }
    
    public void testGetLeafNodeInfo() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        ArrayList result = (ArrayList) fileDataInputStream.getLeafNodeInfo();
        assertEquals("result.size()", 0, result.size());
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
    }
    
    public void testGetLeafNodeInfoWithAggressiveMocks() throws Throwable {
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        byte[] bytes = new byte[0];
        ByteBuffer byteBuffer = (ByteBuffer) Mockingbird.getProxyObject(ByteBuffer.class);
        setPrivateField(fileDataInputStream, "fileHolder", fileHolder);
        setPrivateField(fileDataInputStream, "offSet", new Long(0L));
        setPrivateField(fileDataInputStream, "totalMetaDataLength", new Integer(0));
        setPrivateField(fileDataInputStream, "mdkeysize", new Integer(0));
        setPrivateField(fileDataInputStream, "filesLocation", "");
        setPrivateField(fileDataInputStream, "msrCount", new Integer(2));
        Mockingbird.setReturnValue(false, fileHolder, "readByteArray", "(java.lang.String,long,int)byte[]", bytes, 1);
        Mockingbird.setReturnValue(true, ByteBuffer.class, "wrap", "(byte[])java.nio.ByteBuffer", new Object[] {bytes}, byteBuffer, 1);
        Mockingbird.setReturnValue(false, byteBuffer, "rewind", "()java.nio.Buffer", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, byteBuffer, "hasRemaining", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        LeafNodeInfo leafNodeInfo = new LeafNodeInfo();
        Mockingbird.replaceObjectForRecording(LeafNodeInfo.class, "<init>()", leafNodeInfo);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 0);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 0);
        Mockingbird.setReturnValue(byteBuffer.getLong(), 0L);
        Mockingbird.setReturnValue(false, byteBuffer, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.setReturnValue(false, byteBuffer, "get", "(byte[])java.nio.ByteBuffer", null, 1);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 0);
        Mockingbird.setReturnValue(byteBuffer.getLong(), 0L);
        Mockingbird.setReturnValue(byteBuffer.getInt(), 0);
        Mockingbird.setReturnValue(byteBuffer.getLong(), 0L);
        Mockingbird.setReturnValue(arrayList.add(leafNodeInfo), false);
        Mockingbird.setReturnValue(false, byteBuffer, "hasRemaining", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        List result = fileDataInputStream.getLeafNodeInfo();
        assertNotNull("result", result);
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
    }
    
    public void testGetNextHierTupleWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(FileDataInputStream.class, "LOGGER");
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(fileDataInputStream, "mdkeysize", new Integer(0));
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, bufferedInputStream, "read", "(byte[],int,int)int", iOException, 1);
        setPrivateField(FileDataInputStream.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        Pair result = fileDataInputStream.getNextHierTuple();
        assertNull("result", result);
        assertNotNull("fileDataInputStreamFileDataInputStream.LOGGER", getPrivateField(FileDataInputStream.class, "LOGGER"));
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
    }
    
    public void testGetNextHierTupleWithAggressiveMocks1() throws Throwable {
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        setPrivateField(fileDataInputStream, "mdkeysize", new Integer(0));
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(-1), 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        Pair result = fileDataInputStream.getNextHierTuple();
        assertNull("result", result);
        boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
        assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
    }
    
    public void testGetNextHierTupleWithAggressiveMocks2() throws Throwable {
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        BufferedInputStream bufferedInputStream = (BufferedInputStream) Mockingbird.getProxyObject(BufferedInputStream.class);
        setPrivateField(fileDataInputStream, "in", bufferedInputStream);
        setPrivateField(fileDataInputStream, "mdkeysize", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, bufferedInputStream, "read", "(byte[],int,int)int", new Integer(0), 1);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>()", new Pair());
        Mockingbird.enterTestMode(FileDataInputStream.class);
        Pair result = fileDataInputStream.getNextHierTuple();
        assertNotNull("result.getKey()", result.getKey());
        boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
        assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
    }
    
    public void testGetValueCompressionMode() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        ValueCompressionModel result = fileDataInputStream.getValueCompressionMode();
        assertNull("result", result);
    }
    
    public void testInitInput() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        fileDataInputStream.initInput();
        boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
        assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        assertNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
    }
    
    public void testInitInputWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(FileDataInputStream.class, "LOGGER");
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        FileHolder fileHolder = (FileHolder) Mockingbird.getProxyObject(FileHolder.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        FileChannel fileChannel = (FileChannel) Mockingbird.getProxyObject(FileChannel.class);
        setPrivateField(fileDataInputStream, "persistenceFileLocation", "");
        setPrivateField(fileDataInputStream, "tableName", "");
        setPrivateField(fileDataInputStream, "msrCount", new Integer(0));
        setPrivateField(fileDataInputStream, "filesLocation", "");
        setPrivateField(fileDataInputStream, "fileHolder", fileHolder);
        setPrivateField(FileDataInputStream.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, fileChannel, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(fileChannel.size(), 8L);
        Mockingbird.setReturnValue(false, fileHolder, "readDouble", "(java.lang.String,long)long", new Long(2L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, ValueCompressionUtil.class, "getValueCompressionModel", "(java.lang.String,int)com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel", null, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        fileDataInputStream.initInput();
        assertNotNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        assertNull("fileDataInputStream.getValueCompressionMode()", fileDataInputStream.getValueCompressionMode());
        assertNotNull("fileDataInputStreamFileDataInputStream.LOGGER", getPrivateField(FileDataInputStream.class, "LOGGER"));
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertEquals("fileDataInputStream.totalMetaDataLength", -2, ((Number) getPrivateField(fileDataInputStream, "totalMetaDataLength")).intValue());
        assertNotNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
        assertEquals("fileDataInputStream.offSet", 2L, ((Number) getPrivateField(fileDataInputStream, "offSet")).longValue());
        assertEquals("fileDataInputStream.fileSize", 0L, ((Number) getPrivateField(fileDataInputStream, "fileSize")).longValue());
    }
    
    public void testInitInputWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(FileDataInputStream.class, "LOGGER");
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class, true);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(fileDataInputStream, "filesLocation", "");
        setPrivateField(FileDataInputStream.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        FileInputStream fileInputStream = (FileInputStream) Mockingbird.getProxyObject(FileInputStream.class);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", fileInputStream);
        Mockingbird.setReturnValue(false, fileInputStream, "getChannel", "()java.nio.channels.FileChannel", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        fileDataInputStream.initInput();
        assertNull("fileDataInputStream.fileHolder", getPrivateField(fileDataInputStream, "fileHolder"));
        assertNull("fileDataInputStream.getValueCompressionMode()", fileDataInputStream.getValueCompressionMode());
        assertNotNull("fileDataInputStreamFileDataInputStream.LOGGER", getPrivateField(FileDataInputStream.class, "LOGGER"));
        assertNotNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
        assertEquals("fileDataInputStream.totalMetaDataLength", 0, ((Number) getPrivateField(fileDataInputStream, "totalMetaDataLength")).intValue());
        assertNull("fileDataInputStream.channel", getPrivateField(fileDataInputStream, "channel"));
        assertEquals("fileDataInputStream.offSet", 0L, ((Number) getPrivateField(fileDataInputStream, "offSet")).longValue());
        assertEquals("fileDataInputStream.fileSize", 0L, ((Number) getPrivateField(fileDataInputStream, "fileSize")).longValue());
    }
    
    public void testGetLeafNodeInfoThrowsNullPointerException() throws Throwable {
        ArrayList aggregateNames = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        FileHolderImpl fileHolderImpl = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.replaceObjectForRecording(FileHolderImpl.class, "<init>()", fileHolderImpl);
        Mockingbird.enterTestMode(FileDataInputStream.class);
        FileDataInputStream fileDataInputStream = new FileDataInputStream("", 100, 1000, aggregateNames, true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(fileHolderImpl.readByteArray("", 0L, 0), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(FileDataInputStream.class);
        try {
            fileDataInputStream.getLeafNodeInfo();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("fileDataInputStream.fileHolder", fileHolderImpl, getPrivateField(fileDataInputStream, "fileHolder"));
        }
    }
    
    public void testGetNextHierTupleThrowsNegativeArraySizeException() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", -16, 100, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        try {
            fileDataInputStream.getNextHierTuple();
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
            boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
            assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testGetNextHierTupleThrowsNegativeArraySizeException1() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", -1, 100, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        try {
            fileDataInputStream.getNextHierTuple();
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
            boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
            assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testGetNextHierTupleThrowsNullPointerException() throws Throwable {
        FileDataInputStream fileDataInputStream = new FileDataInputStream("testFileDataInputStreamFilesLocation", 100, 1000, new ArrayList(100), true, "testFileDataInputStreamPersistenceFileLocation", "testFileDataInputStreamTableName");
        try {
            fileDataInputStream.getNextHierTuple();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("fileDataInputStream.in", getPrivateField(fileDataInputStream, "in"));
            boolean actual = ((LogService) getPrivateField(FileDataInputStream.class, "LOGGER")).isDebugEnabled();
            assertTrue("fileDataInputStreamFileDataInputStream.LOGGER.isDebugEnabled()", actual);
        }
    }
}

