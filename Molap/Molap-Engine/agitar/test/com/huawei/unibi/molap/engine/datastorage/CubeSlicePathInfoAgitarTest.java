/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:50:47 PM
 * Time to generate: 00:15.788 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.iweb.platform.logging.LogService;
import java.io.File;

public class CubeSlicePathInfoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CubeSlicePathInfo.class;
    }
    
    public void testConstructor() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        assertEquals("cubeSlicePathInfo.getLoadFolder()", "Agitator39.tmp", cubeSlicePathInfo.getLoadFolder());
        assertNull("cubeSlicePathInfo.getLoadPath()", cubeSlicePathInfo.getLoadPath());
        assertEquals("cubeSlicePathInfo.getTableName()", "Agitator2420946617707100997\uD59Ddir", cubeSlicePathInfo.getTableName());
        assertEquals("cubeSlicePathInfo.getRsFolder()", "agitar-l00102056", cubeSlicePathInfo.getRsFolder());
        assertEquals("cubeSlicePathInfo.getCubeName()", "tmp", cubeSlicePathInfo.getCubeName());
        boolean actual = ((LogService) getPrivateField(CubeSlicePathInfo.class, "LOGGER")).isDebugEnabled();
        assertTrue("cubeSlicePathInfoCubeSlicePathInfo.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testFormInfo() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSlicePathInfo", "formInfo", new Class[] {String.class}, cubeSlicePathInfo, new Object[] {"E:\\agitarOne\\work\\L00102056F[china(huaweiccom-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997*dir\\Agitator84.tmp"});
        assertEquals("cubeSlicePathInfo.getLoadFolder()", "Agitator84.tmp", cubeSlicePathInfo.getLoadFolder());
        assertEquals("cubeSlicePathInfo.getTableName()", "Agitator2420946617707100997*dir", cubeSlicePathInfo.getTableName());
        assertNull("cubeSlicePathInfo.getLoadPath()", cubeSlicePathInfo.getLoadPath());
        assertEquals("cubeSlicePathInfo.getRsFolder()", "agitar-l00102056", cubeSlicePathInfo.getRsFolder());
        assertEquals("cubeSlicePathInfo.getCubeName()", "tmp", cubeSlicePathInfo.getCubeName());
        boolean actual = ((LogService) getPrivateField(CubeSlicePathInfo.class, "LOGGER")).isDebugEnabled();
        assertTrue("cubeSlicePathInfoCubeSlicePathInfo.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testGetCubeName() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getCubeName();
        assertEquals("result", "tmp", result);
    }
    
    public void testGetCubeUniqueName() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getCubeUniqueName();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetLoadFolder() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getLoadFolder();
        assertEquals("result", "Agitator39.tmp", result);
    }
    
    public void testGetLoadPath() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getLoadPath();
        assertNull("result", result);
    }
    
    public void testGetRsFolder() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getRsFolder();
        assertEquals("result", "agitar-l00102056", result);
    }
    
    public void testGetRsPath() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getRsPath();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetSchemaName() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getSchemaName();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetTableName() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        String result = cubeSlicePathInfo.getTableName();
        assertEquals("result", "Agitator2420946617707100997\uD59Ddir", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CubeSlicePathInfo("testCubeSlicePathInfo\rLoadPath");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            assertNotNull("CubeSlicePathInfo.LOGGER", getPrivateField(CubeSlicePathInfo.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new CubeSlicePathInfo("?v20a+}\r1F2cE1m - V]2l4v~?WsA;m<\\V");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            assertNotNull("CubeSlicePathInfo.LOGGER", getPrivateField(CubeSlicePathInfo.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        try {
            new CubeSlicePathInfo("testCubeSlicePathInfoLoadPath");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            assertNotNull("CubeSlicePathInfo.LOGGER", getPrivateField(CubeSlicePathInfo.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        try {
            new CubeSlicePathInfo(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNotNull("CubeSlicePathInfo.LOGGER", getPrivateField(CubeSlicePathInfo.class, "LOGGER"));
        }
    }
    
    public void testFormInfoThrowsNullPointerException() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSlicePathInfo", "formInfo", new Class[] {String.class}, cubeSlicePathInfo, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
            assertNull("cubeSlicePathInfo.getLoadPath()", cubeSlicePathInfo.getLoadPath());
            assertEquals("cubeSlicePathInfo.getLoadFolder()", "Agitator39.tmp", cubeSlicePathInfo.getLoadFolder());
            assertEquals("cubeSlicePathInfo.getRsFolder()", "agitar-l00102056", cubeSlicePathInfo.getRsFolder());
            assertEquals("cubeSlicePathInfo.getTableName()", "Agitator2420946617707100997\uD59Ddir", cubeSlicePathInfo.getTableName());
            assertEquals("cubeSlicePathInfo.getCubeName()", "tmp", cubeSlicePathInfo.getCubeName());
            boolean actual = ((LogService) getPrivateField(CubeSlicePathInfo.class, "LOGGER")).isDebugEnabled();
            assertTrue("cubeSlicePathInfoCubeSlicePathInfo.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testFormInfoThrowsNullPointerException1() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSlicePathInfo", "formInfo", new Class[] {String.class}, cubeSlicePathInfo, new Object[] {"testCubeSlicePathInfo\rLoadFolderPath"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cubeSlicePathInfo.getLoadFolder()", "testCubeSlicePathInfo\rLoadFolderPath", cubeSlicePathInfo.getLoadFolder());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            assertNull("cubeSlicePathInfo.getLoadPath()", cubeSlicePathInfo.getLoadPath());
            assertEquals("cubeSlicePathInfo.getRsFolder()", "agitar-l00102056", cubeSlicePathInfo.getRsFolder());
            assertEquals("cubeSlicePathInfo.getTableName()", "Agitator2420946617707100997\uD59Ddir", cubeSlicePathInfo.getTableName());
            assertEquals("cubeSlicePathInfo.getCubeName()", "tmp", cubeSlicePathInfo.getCubeName());
            boolean actual = ((LogService) getPrivateField(CubeSlicePathInfo.class, "LOGGER")).isDebugEnabled();
            assertTrue("cubeSlicePathInfoCubeSlicePathInfo.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testFormInfoThrowsNullPointerException2() throws Throwable {
        CubeSlicePathInfo cubeSlicePathInfo = new CubeSlicePathInfo("E:\\agitarOne\\work\\L00102056F2china*huawei>com-agitar-3\\tmp\\agitar-l00102056\\Agitator2420946617707100997\uD59Ddir\\Agitator39.tmp");
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.CubeSlicePathInfo", "formInfo", new Class[] {String.class}, cubeSlicePathInfo, new Object[] {"testCubeSlicePathInfoLoadFolderPath"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cubeSlicePathInfo.getLoadFolder()", "testCubeSlicePathInfoLoadFolderPath", cubeSlicePathInfo.getLoadFolder());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CubeSlicePathInfo.class, ex);
            assertEquals("cubeSlicePathInfo.getRsFolder()", "agitar-l00102056", cubeSlicePathInfo.getRsFolder());
            assertEquals("cubeSlicePathInfo.getTableName()", "Agitator2420946617707100997\uD59Ddir", cubeSlicePathInfo.getTableName());
            assertEquals("cubeSlicePathInfo.getCubeName()", "tmp", cubeSlicePathInfo.getCubeName());
            boolean actual = ((LogService) getPrivateField(CubeSlicePathInfo.class, "LOGGER")).isDebugEnabled();
            assertTrue("cubeSlicePathInfoCubeSlicePathInfo.LOGGER.isDebugEnabled()", actual);
        }
    }
}

