/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:08:38 PM
 * Time to generate: 02:04.335 seconds
 *
 */

package com.huawei.unibi.molap.engine.mondrian.extensions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import com.huawei.unibi.molap.engine.util.SegmentResultHolder;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import mondrian.calc.TupleList;
import mondrian.olap.Cube;
import mondrian.olap.Evaluator;
import mondrian.olap.Level;
import mondrian.olap.Member;
import mondrian.olap.MondrianDef;
import mondrian.olap.MondrianProperties;
import mondrian.olap.Query;
import mondrian.olap.ResourceLimitExceededException;
import mondrian.olap.Util;
import mondrian.resource.MondrianResource;
import mondrian.rolap.BitKey;
import mondrian.rolap.RolapAggregationManager;
import mondrian.rolap.RolapBaseCubeMeasure;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapCubeHierarchy;
import mondrian.rolap.RolapCubeLevel;
import mondrian.rolap.RolapEvaluator;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.RolapMember;
import mondrian.rolap.RolapNativeSet;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.RolapStar;
import mondrian.rolap.SqlContextConstraint;
import mondrian.rolap.SqlTupleReader;
import mondrian.rolap.StarColumnPredicate;
import mondrian.rolap.TargetBase;
import mondrian.rolap.agg.Aggregation;
import mondrian.rolap.agg.AggregationKey;
import mondrian.rolap.agg.AggregationManager;
import mondrian.rolap.agg.CellRequest;
import mondrian.rolap.agg.ListColumnPredicate;
import mondrian.rolap.agg.LiteralStarPredicate;
import mondrian.rolap.agg.ValueColumnPredicate;
import mondrian.rolap.aggmatcher.AggStar;
import mondrian.rolap.sql.CrossJoinArg;
import mondrian.rolap.sql.DescendantsCrossJoinArg;
import mondrian.rolap.sql.TupleConstraint;
import org.apache.log4j.Logger;
import org.eigenbase.util.property.BooleanProperty;
import org.eigenbase.util.property.IntegerProperty;

public class MolapTupleReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapTupleReader.class;
    }
    
    public void testConstructorWithAggressiveMocks() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(SqlTupleReader.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(AggregationManager.instance(), null);
        Mockingbird.enterTestMode();
        MolapTupleReader molapTupleReader = new MolapTupleReader(null, null);
        assertNull("molapTupleReader.schema", getPrivateField(molapTupleReader, "schema"));
        assertEquals("molapTupleReader.maxRows", new Integer(0), getPrivateField(molapTupleReader, "maxRows"));
        assertNull("molapTupleReader.constraint", getPrivateField(molapTupleReader, "constraint"));
        assertNull("molapTupleReader.aggMgr", molapTupleReader.aggMgr);
        assertFalse("molapTupleReader.isPreDefineFilterSet", ((Boolean) getPrivateField(molapTupleReader, "isPreDefineFilterSet")).booleanValue());
        assertEquals("molapTupleReader.targets.size()", 0, ((Collection) getPrivateField(molapTupleReader, "targets")).size());
    }
    
    public void testAddEnumTargetsWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[1];
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        setPrivateField(targetBase, "srcMembers", null);
        setPrivateField(targetBase2, "srcMembers", null);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase4, "srcMembers", list3);
        setPrivateField(targetBase5, "srcMembers", list4);
        setPrivateField(targetBase6, "srcMembers", list5);
        Mockingbird.enterNormalMode();
        targetBase6.setList((List) list6);
        setPrivateField(targetBase7, "srcMembers", null);
        setPrivateField(targetBase8, "srcMembers", null);
        targetBase8.setCurrMember(null);
        setPrivateField(targetBase9, "srcMembers", list7);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), targetBase);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase2);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.get(2), targetBase5);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), targetBase6);
        Mockingbird.setReturnValue(false, list5, "get", "(int)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), targetBase7);
        Mockingbird.setReturnValue(targetBase7.addRow(null, 0), 0);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(1), 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), targetBase8);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), targetBase9);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(list2.add(arrayList), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "addEnumTargets", new Class[] {TupleList.class, List.class, String.class, boolean.class, MolapStatement.class, int.class, int[].class, int.class}, molapTupleReader, new Object[] {null, list2, "", Boolean.TRUE, null, new Integer(1), ints, new Integer(0)});
        assertNotNull("molapTupleReader.targets", getPrivateField(molapTupleReader, "targets"));
    }
    
    public void testAddEnumTargetsWithAggressiveMocks1() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        int[] ints = new int[2];
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        setPrivateField(targetBase, "srcMembers", null);
        setPrivateField(targetBase2, "srcMembers", null);
        setPrivateField(targetBase3, "srcMembers", list2);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase5, "srcMembers", null);
        setPrivateField(targetBase6, "srcMembers", list4);
        setPrivateField(targetBase7, "srcMembers", list5);
        Mockingbird.enterNormalMode();
        targetBase7.setList((List) list6);
        setPrivateField(targetBase8, "srcMembers", list7);
        targetBase8.setList((List) list8);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), targetBase);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase2);
        Mockingbird.setReturnValue(list.size(), 3);
        Mockingbird.setReturnValue(list.get(2), targetBase3);
        Mockingbird.setReturnValue(tupleList.get(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), list3);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(list3.get(0), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase5);
        Mockingbird.setReturnValue(list3.get(1), null);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.get(2), targetBase6);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), targetBase7);
        Mockingbird.setReturnValue(false, list5, "get", "(int)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list6, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), targetBase8);
        Mockingbird.setReturnValue(false, list7, "get", "(int)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, list8, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, list4, "size", "()int", new Integer(1), 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "addEnumTargets", new Class[] {TupleList.class, List.class, String.class, boolean.class, MolapStatement.class, int.class, int[].class, int.class}, molapTupleReader, new Object[] {tupleList, null, "", Boolean.FALSE, null, new Integer(1), ints, new Integer(0)});
        assertNotNull("molapTupleReader.targets", getPrivateField(molapTupleReader, "targets"));
    }
    
    public void testAddLeveMemberHbaseWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        CellRequest cellRequest = (CellRequest) Mockingbird.getProxyObject(CellRequest.class);
        RolapCubeHierarchy rolapCubeHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[2];
        RolapCubeLevel rolapCubeLevel = (RolapCubeLevel) Mockingbird.getProxyObject(RolapCubeLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        setPrivateField(rolapLevel, "depth", new Integer(1));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapCubeHierarchy);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        rolapLevels[0] = rolapCubeLevel;
        rolapLevels[1] = rolapLevel2;
        setPrivateField(rolapCubeLevel, "keyExp", column);
        column.name = "";
        Mockingbird.setReturnValue(rolapCubeHierarchy.getCube(), rolapCube2);
        Mockingbird.setReturnValue(rolapCube2.equals(rolapCube), false);
        Mockingbird.setReturnValue(rolapCube.findBaseCubeHierarchy(rolapCubeHierarchy), rolapHierarchy);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapCubeLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapCubeLevel, "getBaseStarKeyColumn", "(mondrian.rolap.RolapCube)mondrian.rolap.RolapStar$Column", null, 1);
        Mockingbird.setReturnValue(false, cellRequest, "addConstrainedColumn", "(mondrian.rolap.RolapStar$Column,mondrian.rolap.StarColumnPredicate)void", null, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "addLeveMemberHbase", new Class[] {RolapLevel.class, RolapCube.class, AggStar.class, List.class, CellRequest.class}, molapTupleReader, new Object[] {rolapLevel, rolapCube, null, list, cellRequest});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddLeveMemberHbaseWithAggressiveMocks1() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapCubeHierarchy rolapCubeHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[2];
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel3 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        setPrivateField(rolapLevel, "depth", new Integer(1));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapCubeHierarchy);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        rolapLevels[0] = rolapLevel2;
        rolapLevels[1] = rolapLevel3;
        setPrivateField(rolapLevel2, "keyExp", column);
        column.name = "";
        Mockingbird.setReturnValue(rolapCubeHierarchy.getCube(), rolapCube2);
        Mockingbird.setReturnValue(rolapCube2.equals(rolapCube), false);
        Mockingbird.setReturnValue(rolapCube.findBaseCubeHierarchy(rolapCubeHierarchy), rolapHierarchy);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel3, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "addLeveMemberHbase", new Class[] {RolapLevel.class, RolapCube.class, AggStar.class, List.class, CellRequest.class}, molapTupleReader, new Object[] {rolapLevel, rolapCube, null, list, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteStatementWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        Evaluator evaluator = (Evaluator) Mockingbird.getProxyObject(Evaluator.class);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Query query = (Query) Mockingbird.getProxyObject(Query.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure2 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        setPrivateField(rolapBaseCubeMeasure, "expression", null);
        setPrivateField(rolapBaseCubeMeasure2, "expression", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(evaluator.getQuery(), query);
        Mockingbird.setReturnValue(query.getMeasuresMembers(), set);
        Mockingbird.setReturnValue(set.size(), 1);
        Mockingbird.setReturnValue(set.size(), 2);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), member);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), rolapBaseCubeMeasure);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure2.isMeasure(), true);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure.isMeasure(), true);
        molapStatement.execute(null, null, null, null, null, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "executeStatement", new Class[] {Evaluator.class, AggStar.class, MolapMetadata.Cube.class, RolapCube.class, Map.class, List.class, List.class, List.class, RolapHierarchy.class, MolapStatement.class}, molapTupleReader, new Object[] {evaluator, null, null, null, null, null, null, null, null, molapStatement});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteStatementWithAggressiveMocks1() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapMember rolapMember2 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapMember rolapMember3 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure2 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        cube.setFactTableName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapCube.getMeasuresMembers(), list3);
        setPrivateField(rolapBaseCubeMeasure2, "expression", expression);
        Mockingbird.enterNormalMode();
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure2, new Object[] {null});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list3.size(), 1);
        Mockingbird.setReturnValue(list3.get(0), rolapMember);
        Mockingbird.setReturnValue(rolapMember.isMeasure(), false);
        Mockingbird.setReturnValue(list3.size(), 2);
        Mockingbird.setReturnValue(list3.get(1), rolapMember2);
        Mockingbird.setReturnValue(rolapMember2.isMeasure(), true);
        Mockingbird.setReturnValue(list3.get(1), null);
        Mockingbird.setReturnValue(list3.size(), 3);
        Mockingbird.setReturnValue(list3.get(2), rolapMember3);
        Mockingbird.setReturnValue(rolapMember3.isMeasure(), true);
        Mockingbird.setReturnValue(list3.get(2), rolapBaseCubeMeasure);
        Mockingbird.setReturnValue(list3.get(2), rolapBaseCubeMeasure2);
        Mockingbird.setReturnValue(false, list2, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure2.getName(), "");
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        molapStatement.execute(cube, null, null, (List) list, null, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "executeStatement", new Class[] {Evaluator.class, AggStar.class, MolapMetadata.Cube.class, RolapCube.class, Map.class, List.class, List.class, List.class, RolapHierarchy.class, MolapStatement.class}, molapTupleReader, new Object[] {null, null, cube, rolapCube, null, null, list, list2, null, molapStatement});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteStatementWithAggressiveMocks2() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapCube.getMeasuresMembers(), null);
        molapStatement.execute(null, null, null, null, null, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "executeStatement", new Class[] {Evaluator.class, AggStar.class, MolapMetadata.Cube.class, RolapCube.class, Map.class, List.class, List.class, List.class, RolapHierarchy.class, MolapStatement.class}, molapTupleReader, new Object[] {null, null, null, rolapCube, null, null, null, null, null, molapStatement});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteStatementWithAggressiveMocks3() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapMember rolapMember2 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapCube.getMeasuresMembers(), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), rolapMember);
        Mockingbird.setReturnValue(rolapMember.isMeasure(), true);
        Mockingbird.setReturnValue(list.get(0), null);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), rolapMember2);
        Mockingbird.setReturnValue(rolapMember2.isMeasure(), true);
        Mockingbird.setReturnValue(list.get(1), null);
        Mockingbird.setReturnValue(list.size(), 1);
        molapStatement.execute(null, null, null, null, null, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "executeStatement", new Class[] {Evaluator.class, AggStar.class, MolapMetadata.Cube.class, RolapCube.class, Map.class, List.class, List.class, List.class, RolapHierarchy.class, MolapStatement.class}, molapTupleReader, new Object[] {null, null, null, rolapCube, null, null, null, null, null, molapStatement});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetLevelWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[2];
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(rolapHierarchy, "levels", levels);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        setPrivateField(rolapLevel2, "keyExp", column);
        column.name = "";
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "X");
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        RolapLevel[] result = (RolapLevel[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getLevel", new Class[] {RolapHierarchy.class, List.class}, molapTupleReader, new Object[] {rolapHierarchy, list});
        assertEquals("result.length", 1, result.length);
        assertNull("(RolapLevel[]) result[0].getProperties()", ((RolapLevel[]) result)[0].getProperties());
    }
    
    public void testGetMeasureMembersArrayWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        Member[] result = (Member[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getMeasureMembersArray", new Class[] {Set.class}, molapTupleReader, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testGetMeasureMembersArrayWithAggressiveMocks1() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.size(), 0);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        Member[] result = (Member[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getMeasureMembersArray", new Class[] {Set.class}, molapTupleReader, new Object[] {set});
        assertNull("result", result);
    }
    
    public void testGetMeasureMembersArrayWithAggressiveMocks2() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(set.size(), 1);
        Mockingbird.setReturnValue(set.size(), 2);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), member);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), member2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        Member[] result = (Member[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getMeasureMembersArray", new Class[] {Set.class}, molapTupleReader, new Object[] {set});
        assertEquals("result.length", 2, result.length);
        assertNotNull("(Member[]) result[0]", ((Member[]) result)[0]);
    }
    
    public void testGetPredicatesWithAggressiveMocks() throws Throwable {
        storeStaticField(LiteralStarPredicate.class, "TRUE");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        LiteralStarPredicate literalStarPredicate = (LiteralStarPredicate) Mockingbird.getProxyObject(LiteralStarPredicate.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        setPrivateField(molapFilterInfo, "includedMembers", null);
        setPrivateField(LiteralStarPredicate.class, "TRUE", literalStarPredicate);
        dimension2.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.get(0), dimension);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", molapFilterInfo, 1);
        Mockingbird.setReturnValue(list.get(1), dimension2);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        StarColumnPredicate[] result = (StarColumnPredicate[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getPredicates", new Class[] {CellRequest.class, List.class, Map.class}, molapTupleReader, new Object[] {null, list, map});
        assertEquals("result.length", 2, result.length);
        assertNotNull("(StarColumnPredicate[]) result[0]", ((StarColumnPredicate[]) result)[0]);
    }
    
    public void testGetStarPredicate() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.size(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ValueColumnPredicate valueColumnPredicate = (ValueColumnPredicate) Mockingbird.getProxyObject(ValueColumnPredicate.class);
        Mockingbird.replaceObjectForRecording(ValueColumnPredicate.class, "<init>(mondrian.rolap.RolapStar$Column,java.lang.Object)", valueColumnPredicate);
        Mockingbird.setReturnValue(arrayList.add(valueColumnPredicate), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ValueColumnPredicate valueColumnPredicate2 = (ValueColumnPredicate) Mockingbird.getProxyObject(ValueColumnPredicate.class);
        Mockingbird.replaceObjectForRecording(ValueColumnPredicate.class, "<init>(mondrian.rolap.RolapStar$Column,java.lang.Object)", valueColumnPredicate2);
        Mockingbird.setReturnValue(arrayList.add(valueColumnPredicate2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ListColumnPredicate.class, "<init>(mondrian.rolap.RolapStar$Column,java.util.List)", Mockingbird.getProxyObject(ListColumnPredicate.class));
        Mockingbird.enterTestMode(MolapTupleReader.class);
        StarColumnPredicate result = (StarColumnPredicate) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getStarPredicate", new Class[] {List.class}, null, new Object[] {list});
        assertNotNull("result", result);
    }
    
    public void testGetStarPredicate1() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), null);
        Mockingbird.replaceObjectForRecording(ValueColumnPredicate.class, "<init>(mondrian.rolap.RolapStar$Column,java.lang.Object)", Mockingbird.getProxyObject(ValueColumnPredicate.class));
        Mockingbird.enterTestMode(MolapTupleReader.class);
        StarColumnPredicate result = (StarColumnPredicate) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getStarPredicate", new Class[] {List.class}, null, new Object[] {list});
        assertNotNull("result", result);
    }
    
    public void testGetStarPredicate2() throws Throwable {
        storeStaticField(LiteralStarPredicate.class, "TRUE");
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(LiteralStarPredicate.class, "TRUE", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        StarColumnPredicate result = (StarColumnPredicate) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "getStarPredicate", new Class[] {List.class}, null, new Object[] {list});
        assertNull("result", result);
    }
    
    public void testIsColPrsntinLevelsWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel[] rolapLevels = new RolapLevel[3];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel3 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        rolapLevels[0] = rolapLevel;
        rolapLevels[1] = rolapLevel2;
        rolapLevels[2] = rolapLevel3;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel3, "keyExp", column);
        column.name = "";
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(rolapLevel3.isAll(), false);
        Mockingbird.setReturnValue(rolapLevel3.isMeasure(), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "isColPrsntinLevels", new Class[] {RolapLevel[].class, String.class}, molapTupleReader, new Object[] {rolapLevels, ""})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsColPrsntinLevelsWithAggressiveMocks1() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel[] rolapLevels = new RolapLevel[3];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel3 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        rolapLevels[0] = rolapLevel;
        rolapLevels[1] = rolapLevel2;
        rolapLevels[2] = rolapLevel3;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.isAll(), false);
        setPrivateField(rolapLevel3, "keyExp", column);
        column.name = "";
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapLevel, "isMeasure", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(rolapLevel3.isAll(), false);
        Mockingbird.setReturnValue(rolapLevel3.isMeasure(), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "isColPrsntinLevels", new Class[] {RolapLevel[].class, String.class}, molapTupleReader, new Object[] {rolapLevels, ""})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsColPrsntinLevelsWithAggressiveMocks2() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel[] rolapLevels = new RolapLevel[3];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel3 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        rolapLevels[0] = rolapLevel;
        rolapLevels[1] = rolapLevel2;
        rolapLevels[2] = rolapLevel3;
        setPrivateField(rolapLevel, "keyExp", column);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapLevel.isAll(), false);
        column.name = "";
        setPrivateField(rolapLevel3, "keyExp", column2);
        column2.name = "X";
        Mockingbird.setReturnValue(rolapLevel.isMeasure(), false);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(rolapLevel3.isAll(), false);
        Mockingbird.setReturnValue(rolapLevel3.isMeasure(), false);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "isColPrsntinLevels", new Class[] {RolapLevel[].class, String.class}, molapTupleReader, new Object[] {rolapLevels, "X"})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsColPrsntinLevelsWithAggressiveMocks3() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapLevel[] rolapLevels = new RolapLevel[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels[0] = rolapLevel;
        rolapLevels[1] = rolapLevel2;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "isColPrsntinLevels", new Class[] {RolapLevel[].class, String.class}, molapTupleReader, new Object[] {rolapLevels, ""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testMakeSegmentCacheWithAggressiveMocks() throws Throwable {
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        AggregationManager aggregationManager = (AggregationManager) Mockingbird.getProxyObject(AggregationManager.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        CellRequest cellRequest = (CellRequest) Mockingbird.getProxyObject(CellRequest.class);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Aggregation aggregation = (Aggregation) Mockingbird.getProxyObject(Aggregation.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapStar.Column[] columns = new RolapStar.Column[0];
        RolapStar.Measure[] measures = new RolapStar.Measure[0];
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        setPrivateField(molapTupleReader, "aggMgr", aggregationManager);
        setPrivateField(rolapCube, "star", rolapStar);
        Mockingbird.enterRecordingMode();
        AggregationKey aggregationKey = (AggregationKey) Mockingbird.getProxyObject(AggregationKey.class);
        Mockingbird.replaceObjectForRecording(AggregationKey.class, "<init>(mondrian.rolap.agg.CellRequest)", aggregationKey);
        setPrivateField(molapStatement, "dimensionsList", list);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        setPrivateField(aggregation, "compoundPredicateList", null);
        dimension3.setColName("");
        setPrivateField(molapFilterInfo, "includedMembers", null);
        dimension4.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapStar.lookupOrCreateAggregation(aggregationKey), aggregation);
        molapResultHolder.reset();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(molapStatement.getSortedDimensionsList(), list3);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list2.size(), 2);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(0), dimension);
        Mockingbird.setReturnValue(dimension.getTotalAttributeCount(), -2);
        Mockingbird.setReturnValue(list.get(1), dimension2);
        Mockingbird.setReturnValue(dimension2.getTotalAttributeCount(), 3);
        Mockingbird.setReturnValue(list3.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.indexOf(null), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(list.indexOf(null), 0);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(int[],int[])boolean", Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(SegmentResultHolder.class, "<init>(com.huawei.unibi.molap.engine.util.MolapResultHolder,int[])", Mockingbird.getProxyObject(SegmentResultHolder.class));
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(cellRequest.getConstrainedColumns(), columns);
        Mockingbird.setReturnValue(false, list2, "toArray", "(java.lang.Object[])java.lang.Object[]", measures, 1);
        Mockingbird.setReturnValue(list3.size(), 2);
        Mockingbird.setReturnValue(list3.get(0), dimension3);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", molapFilterInfo, 1);
        Mockingbird.setReturnValue(true, MolapTupleReader.class, "getStarPredicate", "(java.util.List)mondrian.rolap.StarColumnPredicate", starColumnPredicate, 1);
        Mockingbird.setReturnValue(list3.get(1), dimension4);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, MolapTupleReader.class, "getStarPredicate", "(java.util.List)mondrian.rolap.StarColumnPredicate", starColumnPredicate2, 1);
        Mockingbird.setReturnValue(aggregationManager.createPinSet(), null);
        Mockingbird.setReturnValue(false, aggregation, "getGroupList", "(mondrian.rolap.RolapStar$Column[],mondrian.rolap.RolapStar$Measure[],mondrian.rolap.StarColumnPredicate[],mondrian.rolap.RolapAggregationManager$PinSet)java.util.List", null, 1);
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class);
        Mockingbird.replaceObjectForRecording(MolapSegmentLoader.class, "<init>()", molapSegmentLoader);
        Mockingbird.setReturnValue(aggregationManager.createPinSet(), null);
        Mockingbird.setReturnValue(false, molapSegmentLoader, "load", "(java.util.List,mondrian.rolap.RolapAggregationManager$PinSet,java.util.List,com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement)void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader", "makeSegmentCache", new Class[] {RolapCube.class, CellRequest.class, MolapStatement.class, List.class, Map.class}, molapTupleReader, new Object[] {rolapCube, cellRequest, molapStatement, list2, map});
        assertFalse("molapTupleReader.aggMgr.getLogger().isTraceEnabled()", molapTupleReader.aggMgr.getLogger().isTraceEnabled());
    }
    
    public void testPrepareTuplesWithAggressiveMocks() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        SqlContextConstraint sqlContextConstraint = (SqlContextConstraint) Mockingbird.getProxyObject(SqlContextConstraint.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapLevel[] rolapLevels4 = new RolapLevel[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        setPrivateField(molapTupleReader, "constraint", sqlContextConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.TRUE);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube, "hierarchyList", list2);
        setPrivateField(targetBase, "srcMembers", list3);
        setPrivateField(targetBase2, "srcMembers", null);
        setPrivateField(targetBase2, "level", null);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", list4);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "subName", "");
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", null);
        setPrivateField(targetBase8, "srcMembers", null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(sqlContextConstraint.getEvaluator(), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, booleanProperty, "get", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list2, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", new Object[] {rolapLevels3, ""}, boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, molapTupleReader, "getLevel", "(mondrian.rolap.RolapHierarchy,java.util.List)mondrian.rolap.RolapLevel[]", new Object[] {rolapHierarchy3, arrayList}, rolapLevels4, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), targetBase9);
        Mockingbird.setReturnValue(targetBase9.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), targetBase10);
        Mockingbird.setReturnValue(targetBase10.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareTuplesWithAggressiveMocks1() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        TupleConstraint tupleConstraint = (TupleConstraint) Mockingbird.getProxyObject(Class.forName("mondrian.rolap.DescendantsConstraint"));
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapLevel[] rolapLevels4 = new RolapLevel[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        setPrivateField(molapTupleReader, "constraint", tupleConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube, "hierarchyList", list2);
        setPrivateField(targetBase, "srcMembers", list3);
        setPrivateField(targetBase2, "srcMembers", list4);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "subName", null);
        setPrivateField(rolapHierarchy3, "name", "");
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", null);
        setPrivateField(targetBase8, "srcMembers", null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, tupleConstraint, "getMemberChildrenConstraint", "(mondrian.rolap.RolapMember)mondrian.rolap.sql.MemberChildrenConstraint", null, 1);
        Mockingbird.setReturnValue(booleanProperty.get(), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list2, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, molapTupleReader, "getLevel", "(mondrian.rolap.RolapHierarchy,java.util.List)mondrian.rolap.RolapLevel[]", new Object[] {rolapHierarchy3, arrayList}, rolapLevels4, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), targetBase9);
        Mockingbird.setReturnValue(targetBase9.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator9.hasNext(), true);
        Mockingbird.setReturnValue(iterator9.next(), targetBase10);
        Mockingbird.setReturnValue(targetBase10.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareTuplesWithAggressiveMocks2() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        TupleConstraint tupleConstraint = (TupleConstraint) Mockingbird.getProxyObject(Class.forName("mondrian.rolap.DescendantsConstraint"));
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        SqlContextConstraint sqlContextConstraint = (SqlContextConstraint) Mockingbird.getProxyObject(SqlContextConstraint.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        RolapLevel[] rolapLevels4 = new RolapLevel[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase11 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase12 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase13 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapTupleReader, "constraint", tupleConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(sqlContextConstraint, "evaluator", null);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube, "hierarchyList", list3);
        setPrivateField(targetBase, "srcMembers", list4);
        setPrivateField(targetBase2, "srcMembers", list5);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "subName", "");
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list6);
        setPrivateField(targetBase8, "srcMembers", list7);
        setPrivateField(targetBase9, "srcMembers", list8);
        setPrivateField(targetBase10, "srcMembers", list9);
        setPrivateField(targetBase11, "srcMembers", null);
        setPrivateField(targetBase12, "srcMembers", null);
        setPrivateField(targetBase13, "srcMembers", list10);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, tupleConstraint, "getMemberChildrenConstraint", "(mondrian.rolap.RolapMember)mondrian.rolap.sql.MemberChildrenConstraint", sqlContextConstraint, 1);
        Mockingbird.setReturnValue(booleanProperty.get(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, molapTupleReader, "getLevel", "(mondrian.rolap.RolapHierarchy,java.util.List)mondrian.rolap.RolapLevel[]", new Object[] {rolapHierarchy3, arrayList}, rolapLevels4, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        molapStatement.rowCount = 1;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase9);
        Mockingbird.setReturnValue(false, molapTupleReader, "resetCurrMembers", "(java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase10);
        Mockingbird.setReturnValue(false, molapTupleReader, "resetCurrMembers", "(java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase11);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase12);
        Mockingbird.setReturnValue(list.size(), 3);
        Mockingbird.setReturnValue(list.get(2), targetBase13);
        Mockingbird.setReturnValue(false, molapTupleReader, "resetCurrMembers", "(java.util.List)void", null, 1);
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, null, (List) list2);
        assertInvocationCount(list3, "iterator", 1);
        assertInvocationCount(logService, "info", 3);
    }
    
    public void testPrepareTuplesWithAggressiveMocks3() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapLevel[] rolapLevels4 = new RolapLevel[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapTupleReader, "constraint", null);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube, "hierarchyList", list2);
        setPrivateField(targetBase, "srcMembers", list3);
        setPrivateField(targetBase2, "srcMembers", list4);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "subName", "");
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list5);
        setPrivateField(targetBase8, "srcMembers", list6);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(booleanProperty.get(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(rolapSchema.lookupCube("", true), rolapCube);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list2, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, molapTupleReader, "getLevel", "(mondrian.rolap.RolapHierarchy,java.util.List)mondrian.rolap.RolapLevel[]", new Object[] {rolapHierarchy3, arrayList}, rolapLevels4, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), -1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareTuplesWithAggressiveMocks4() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        SqlContextConstraint sqlContextConstraint = (SqlContextConstraint) Mockingbird.getProxyObject(SqlContextConstraint.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        RolapLevel[] rolapLevels4 = new RolapLevel[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(molapTupleReader, "constraint", sqlContextConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube, "hierarchyList", list2);
        setPrivateField(targetBase, "srcMembers", list3);
        setPrivateField(targetBase2, "srcMembers", list4);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "subName", "");
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list5);
        setPrivateField(targetBase8, "srcMembers", list6);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(sqlContextConstraint.getEvaluator(), null);
        Mockingbird.setReturnValue(booleanProperty.get(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list2, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(false, molapTupleReader, "getLevel", "(mondrian.rolap.RolapHierarchy,java.util.List)mondrian.rolap.RolapLevel[]", new Object[] {rolapHierarchy3, arrayList}, rolapLevels4, 1);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(java.util.Map,java.lang.String,mondrian.olap.Level[],mondrian.rolap.aggmatcher.AggStar,boolean,mondrian.rolap.RolapCube,mondrian.rolap.RolapLevel[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(0), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, null, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareTuplesWithAggressiveMocks5() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapNativeSet.SetConstraint setConstraint = (RolapNativeSet.SetConstraint) Mockingbird.getProxyObject(Class.forName("mondrian.rolap.RolapNativeCrossJoin$NonEmptyCrossJoinConstraint"));
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        CrossJoinArg[] crossJoinArgs = new CrossJoinArg[2];
        RolapEvaluator rolapEvaluator = (RolapEvaluator) Mockingbird.getProxyObject(RolapEvaluator.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        BitKey bitKey = (BitKey) Mockingbird.getProxyObject(BitKey.class);
        BitKey bitKey2 = (BitKey) Mockingbird.getProxyObject(BitKey.class);
        Member[] members = new Member[1];
        RolapBaseCubeMeasure rolapBaseCubeMeasure = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        CellRequest cellRequest = (CellRequest) Mockingbird.getProxyObject(CellRequest.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        DescendantsCrossJoinArg descendantsCrossJoinArg = (DescendantsCrossJoinArg) Mockingbird.getProxyObject(DescendantsCrossJoinArg.class);
        DescendantsCrossJoinArg descendantsCrossJoinArg2 = (DescendantsCrossJoinArg) Mockingbird.getProxyObject(DescendantsCrossJoinArg.class);
        RolapCubeLevel rolapCubeLevel = (RolapCubeLevel) Mockingbird.getProxyObject(RolapCubeLevel.class);
        RolapStar.Column column3 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapCubeLevel rolapCubeLevel2 = (RolapCubeLevel) Mockingbird.getProxyObject(RolapCubeLevel.class);
        RolapStar.Column column4 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        AggregationManager aggregationManager = (AggregationManager) Mockingbird.getProxyObject(AggregationManager.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        CellRequest cellRequest2 = (CellRequest) Mockingbird.getProxyObject(CellRequest.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Query query = (Query) Mockingbird.getProxyObject(Query.class);
        Member[] members2 = new Member[2];
        RolapBaseCubeMeasure rolapBaseCubeMeasure2 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure3 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase11 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase12 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        List list11 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "constraint", setConstraint);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(setConstraint, "args", crossJoinArgs);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(rolapCube, "star", rolapStar);
        setPrivateField(rolapStar, "columnCount", new Integer(0));
        members[0] = rolapBaseCubeMeasure;
        Mockingbird.enterNormalMode();
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure, new Object[] {measure});
        setPrivateField(measure, "bitPosition", new Integer(0));
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(column, "bitPosition", new Integer(0));
        setPrivateField(column2, "bitPosition", new Integer(0));
        crossJoinArgs[0] = descendantsCrossJoinArg;
        crossJoinArgs[1] = descendantsCrossJoinArg2;
        rolapCubeLevel.setStarKeyColumn(column3);
        setPrivateField(column3, "bitPosition", new Integer(0));
        rolapCubeLevel2.setStarKeyColumn(column4);
        setPrivateField(column4, "bitPosition", new Integer(0));
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        cube.setFactTableName("");
        setPrivateField(rolapCube2, "hierarchyList", list3);
        setPrivateField(rolapCube2, "star", rolapStar2);
        setPrivateField(targetBase, "srcMembers", list4);
        setPrivateField(targetBase2, "srcMembers", list5);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        members2[0] = rolapBaseCubeMeasure2;
        members2[1] = rolapBaseCubeMeasure3;
        setPrivateField(rolapBaseCubeMeasure2, "expression", expression);
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure2, new Object[] {null});
        setPrivateField(rolapBaseCubeMeasure3, "expression", expression2);
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure3, new Object[] {null});
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list7);
        setPrivateField(targetBase8, "srcMembers", list8);
        setPrivateField(targetBase9, "srcMembers", list9);
        setPrivateField(targetBase10, "srcMembers", null);
        setPrivateField(targetBase11, "srcMembers", null);
        setPrivateField(targetBase12, "srcMembers", list10);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(setConstraint.getEvaluator(), rolapEvaluator);
        Mockingbird.setReturnValue(booleanProperty.get(), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Cube cube2 = (Cube) callPrivateMethod("mondrian.olap.Evaluator", "getCube", new Class[] {}, rolapEvaluator, new Object[] {});
        Mockingbird.setReturnValue(cube2, rolapCube);
        Mockingbird.setReturnValue(rolapCube.isVirtual(), false);
        Mockingbird.setReturnValue(BitKey.Factory.makeBitKey(0), bitKey);
        Mockingbird.setReturnValue(BitKey.Factory.makeBitKey(0), bitKey2);
        Mockingbird.setReturnValue(rolapEvaluator.getNonAllMembers(), members);
        Mockingbird.setReturnValue(RolapAggregationManager.makeRequest(members), cellRequest);
        Mockingbird.setReturnValue(cellRequest.getConstrainedColumns(), columns);
        bitKey2.set(0);
        Mockingbird.setNormalReturnForVoid();
        bitKey2.set(0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "setLevelMasks", "(mondrian.rolap.BitKey)void", new Object[] {bitKey2}, null, 1);
        bitKey.set(0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, descendantsCrossJoinArg, "getLevel", "()mondrian.rolap.RolapLevel", rolapCubeLevel, 1);
        Mockingbird.setReturnValue(rolapCubeLevel.isAll(), false);
        bitKey2.set(0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, descendantsCrossJoinArg2, "getLevel", "()mondrian.rolap.RolapLevel", rolapCubeLevel2, 1);
        Mockingbird.setReturnValue(rolapCubeLevel2.isAll(), false);
        bitKey2.set(0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(AggregationManager.instance(), aggregationManager);
        Mockingbird.setReturnValue(false, aggregationManager, "findAgg", "(mondrian.rolap.RolapStar,mondrian.rolap.BitKey,mondrian.rolap.BitKey,boolean[])mondrian.rolap.aggmatcher.AggStar", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube2, 1);
        LinkedHashMap linkedHashMap = (LinkedHashMap) Mockingbird.getProxyObject(LinkedHashMap.class);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", linkedHashMap);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(RolapAggregationManager.makeRequest(rolapEvaluator), cellRequest2);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        setConstraint.addConstraintHbase(rolapCube2, null, linkedHashMap, cellRequest2);
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(rolapEvaluator.getQuery(), query);
        setPrivateField(molapStatement, "dimensionsList", list6);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(query.getMeasuresMembers(), null);
        Mockingbird.setReturnValue(false, molapTupleReader, "getMeasureMembersArray", "(java.util.Set)mondrian.olap.Member[]", new Object[] {null}, members2, 1);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure2.isMeasure(), true);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapBaseCubeMeasure2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure3.isMeasure(), true);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, rolapBaseCubeMeasure3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        molapStatement.execute(cube, arrayList, linkedHashMap, arrayList2, null, true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase7);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase8);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase9);
        Mockingbird.setReturnValue(tupleList.get(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase10);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase11);
        Mockingbird.setReturnValue(list.size(), 3);
        Mockingbird.setReturnValue(list.get(2), targetBase12);
        Mockingbird.setReturnValue(tupleList.get(1), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.replaceObjectForRecording(AggregationKey.class, "<init>(mondrian.rolap.agg.CellRequest)", Mockingbird.getProxyObject(AggregationKey.class));
        Mockingbird.setReturnValue(false, rolapStar2, "lookupOrCreateAggregation", "(mondrian.rolap.agg.AggregationKey)mondrian.rolap.agg.Aggregation", null, 1);
        molapResultHolder.reset();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(molapStatement.getSortedDimensionsList(), list11);
        Mockingbird.setReturnValue(false, list6, "size", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(arrayList3.size(), 2);
        Mockingbird.setReturnValue(false, list6, "size", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(false, list6, "get", "(int)java.lang.Object", dimension, 1);
        Mockingbird.setReturnValue(dimension.getTotalAttributeCount(), -2);
        Mockingbird.setReturnValue(false, list6, "get", "(int)java.lang.Object", dimension2, 1);
        Mockingbird.setReturnValue(dimension2.getTotalAttributeCount(), 3);
        Mockingbird.setReturnValue(list11.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), null);
        Mockingbird.setReturnValue(false, list6, "indexOf", "(java.lang.Object)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), null);
        Mockingbird.setReturnValue(false, list6, "indexOf", "(java.lang.Object)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(int[],int[])boolean", boolean2, 1);
        Mockingbird.replaceObjectForRecording(SegmentResultHolder.class, "<init>(com.huawei.unibi.molap.engine.util.MolapResultHolder,int[])", Mockingbird.getProxyObject(SegmentResultHolder.class));
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, (List) list2);
        assertInvocationCount(list6, "size", 2);
        assertInvocationCount(list6, "get", 2);
        assertInvocationCount(list6, "indexOf", 2);
        assertInvocationCount(logService, "info", 3);
        assertInvocationCount(list3, "iterator", 1);
    }
    
    public void testPrepareTuplesWithAggressiveMocks6() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        SqlContextConstraint sqlContextConstraint = (SqlContextConstraint) Mockingbird.getProxyObject(SqlContextConstraint.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapMember rolapMember2 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapMember rolapMember3 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure2 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase11 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase12 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list11 = (List) Mockingbird.getProxyObject(List.class);
        List list12 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(molapTupleReader, "constraint", sqlContextConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(rolapCube, "hierarchyList", list3);
        setPrivateField(rolapCube, "star", rolapStar);
        setPrivateField(targetBase, "srcMembers", list4);
        setPrivateField(targetBase2, "srcMembers", list5);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapBaseCubeMeasure2, "expression", expression);
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure2, new Object[] {null});
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list8);
        setPrivateField(targetBase8, "srcMembers", list9);
        setPrivateField(targetBase9, "srcMembers", list10);
        setPrivateField(targetBase10, "srcMembers", null);
        setPrivateField(targetBase11, "srcMembers", null);
        setPrivateField(targetBase12, "srcMembers", list11);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(sqlContextConstraint.getEvaluator(), null);
        Mockingbird.setReturnValue(booleanProperty.get(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(rolapCube.getMeasuresMembers(), list7);
        setPrivateField(molapStatement, "dimensionsList", list6);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list7.size(), 1);
        Mockingbird.setReturnValue(list7.get(0), rolapMember);
        Mockingbird.setReturnValue(rolapMember.isMeasure(), true);
        Mockingbird.setReturnValue(list7.get(0), null);
        Mockingbird.setReturnValue(list7.size(), 2);
        Mockingbird.setReturnValue(list7.get(1), rolapMember2);
        Mockingbird.setReturnValue(rolapMember2.isMeasure(), true);
        Mockingbird.setReturnValue(list7.get(1), null);
        Mockingbird.setReturnValue(list7.size(), 3);
        Mockingbird.setReturnValue(list7.get(2), rolapMember3);
        Mockingbird.setReturnValue(rolapMember3.isMeasure(), true);
        Mockingbird.setReturnValue(list7.get(2), rolapBaseCubeMeasure);
        Mockingbird.setReturnValue(list7.get(2), rolapBaseCubeMeasure2);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure2.getName(), "");
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,java.util.List,java.util.Map,java.util.List,mondrian.rolap.aggmatcher.AggStar,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase7);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase8);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase9);
        Mockingbird.setReturnValue(tupleList.get(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase10);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase11);
        Mockingbird.setReturnValue(list.size(), 3);
        Mockingbird.setReturnValue(list.get(2), targetBase12);
        Mockingbird.setReturnValue(tupleList.get(1), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.replaceObjectForRecording(AggregationKey.class, "<init>(mondrian.rolap.agg.CellRequest)", Mockingbird.getProxyObject(AggregationKey.class));
        Mockingbird.setReturnValue(false, rolapStar, "lookupOrCreateAggregation", "(mondrian.rolap.agg.AggregationKey)mondrian.rolap.agg.Aggregation", null, 1);
        molapResultHolder.reset();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(molapStatement.getSortedDimensionsList(), list12);
        Mockingbird.setReturnValue(false, list6, "size", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(arrayList3.size(), 2);
        Mockingbird.setReturnValue(false, list6, "size", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(false, list6, "get", "(int)java.lang.Object", dimension, 1);
        Mockingbird.setReturnValue(dimension.getTotalAttributeCount(), -2);
        Mockingbird.setReturnValue(false, list6, "get", "(int)java.lang.Object", dimension2, 1);
        Mockingbird.setReturnValue(dimension2.getTotalAttributeCount(), 3);
        Mockingbird.setReturnValue(list12.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), null);
        Mockingbird.setReturnValue(false, list6, "indexOf", "(java.lang.Object)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), null);
        Mockingbird.setReturnValue(false, list6, "indexOf", "(java.lang.Object)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(true, Arrays.class, "equals", "(int[],int[])boolean", boolean2, 1);
        Mockingbird.replaceObjectForRecording(SegmentResultHolder.class, "<init>(com.huawei.unibi.molap.engine.util.MolapResultHolder,int[])", Mockingbird.getProxyObject(SegmentResultHolder.class));
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, (List) list2);
        assertInvocationCount(list3, "iterator", 1);
        assertInvocationCount(list6, "size", 2);
        assertInvocationCount(list6, "get", 2);
        assertInvocationCount(list6, "indexOf", 2);
        assertInvocationCount(logService, "info", 3);
    }
    
    public void testPrepareTuplesWithAggressiveMocks7() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapNativeSet.SetConstraint setConstraint = (RolapNativeSet.SetConstraint) Mockingbird.getProxyObject(RolapNativeSet.SetConstraint.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        RolapEvaluator rolapEvaluator = (RolapEvaluator) Mockingbird.getProxyObject(RolapEvaluator.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapCube rolapCube2 = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        CellRequest cellRequest = (CellRequest) Mockingbird.getProxyObject(CellRequest.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy3 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels3 = new RolapLevel[0];
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Query query = (Query) Mockingbird.getProxyObject(Query.class);
        Member[] members = new Member[2];
        Member member = (Member) Mockingbird.getProxyObject(Member.class);
        Member member2 = (Member) Mockingbird.getProxyObject(Member.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase11 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "constraint", setConstraint);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        setPrivateField(rolapCube2, "hierarchyList", list2);
        setPrivateField(targetBase, "srcMembers", list3);
        setPrivateField(targetBase2, "srcMembers", list4);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapHierarchy3, "levels", rolapLevels3);
        members[0] = member;
        members[1] = member2;
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", null);
        setPrivateField(targetBase8, "srcMembers", null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(setConstraint.getEvaluator(), rolapEvaluator);
        Mockingbird.setReturnValue(booleanProperty.get(), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Cube cube = (Cube) callPrivateMethod("mondrian.olap.Evaluator", "getCube", new Class[] {}, rolapEvaluator, new Object[] {});
        Mockingbird.setReturnValue(cube, rolapCube);
        Mockingbird.setReturnValue(rolapCube.isVirtual(), true);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(false, rolapSchema, "lookupCube", "(java.lang.String,boolean)mondrian.olap.Cube", rolapCube2, 1);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(RolapAggregationManager.makeRequest(rolapEvaluator), cellRequest);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, setConstraint, "addConstraintHbase", "(mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.Map,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, list2, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy3);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(rolapEvaluator.getQuery(), query);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(query.getMeasuresMembers(), null);
        Mockingbird.setReturnValue(false, molapTupleReader, "getMeasureMembersArray", "(java.util.Set)mondrian.olap.Member[]", new Object[] {null}, members, 1);
        Mockingbird.setReturnValue(member.isMeasure(), true);
        Mockingbird.setReturnValue(member2.isMeasure(), true);
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,java.util.List,java.util.Map,java.util.List,mondrian.rolap.aggmatcher.AggStar,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase7);
        Mockingbird.setReturnValue(iterator7.hasNext(), true);
        Mockingbird.setReturnValue(iterator7.next(), targetBase8);
        Mockingbird.setReturnValue(iterator7.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator8);
        Mockingbird.setReturnValue(iterator8.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.iterator(), iterator9);
        Mockingbird.setReturnValue(iterator9.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 3);
        Mockingbird.setReturnValue(list.iterator(), iterator10);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), targetBase9);
        Mockingbird.setReturnValue(targetBase9.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), targetBase10);
        Mockingbird.setReturnValue(targetBase10.addRow(molapStatement, 0), 0);
        Mockingbird.setReturnValue(iterator10.hasNext(), true);
        Mockingbird.setReturnValue(iterator10.next(), targetBase11);
        Mockingbird.setException(targetBase11.addRow(molapStatement, 0), sQLException);
        Mockingbird.setReturnValue(false, sQLException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrepareTuplesWithAggressiveMocks8() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(SqlTupleReader.class, "isLogged");
        storeStaticField(MolapTupleReader.class, "LOGGER");
        storeStaticField(SqlTupleReader.class, "LOGGER");
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        MolapTupleReader molapTupleReader = (MolapTupleReader) Mockingbird.getProxyObject(MolapTupleReader.class, true);
        SqlContextConstraint sqlContextConstraint = (SqlContextConstraint) Mockingbird.getProxyObject(SqlContextConstraint.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        TupleList tupleList = (TupleList) Mockingbird.getProxyObject(TupleList.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        IntegerProperty integerProperty = (IntegerProperty) Mockingbird.getProxyObject(IntegerProperty.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase2 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase3 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase4 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RolapHierarchy rolapHierarchy2 = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        RolapLevel[] rolapLevels2 = new RolapLevel[0];
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        RolapMember rolapMember = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure2 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapMember rolapMember2 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure3 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure4 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapMember rolapMember3 = (RolapMember) Mockingbird.getProxyObject(RolapMember.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure5 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        RolapBaseCubeMeasure rolapBaseCubeMeasure6 = (RolapBaseCubeMeasure) Mockingbird.getProxyObject(RolapBaseCubeMeasure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase5 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase6 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        TargetBase targetBase7 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase8 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase9 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list9 = (List) Mockingbird.getProxyObject(List.class);
        TargetBase targetBase10 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase11 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        TargetBase targetBase12 = (TargetBase) Mockingbird.getProxyObject(TargetBase.class);
        List list10 = (List) Mockingbird.getProxyObject(List.class);
        MondrianResource mondrianResource = (MondrianResource) Mockingbird.getProxyObject(MondrianResource.class);
        MondrianResource._Def11 _Def11 = (MondrianResource._Def11) Mockingbird.getProxyObject(MondrianResource._Def11.class);
        ResourceLimitExceededException resourceLimitExceededException = (ResourceLimitExceededException) Mockingbird.getProxyObject(ResourceLimitExceededException.class);
        setPrivateField(molapTupleReader, "constraint", sqlContextConstraint);
        setPrivateField(molapTupleReader, "schema", rolapSchema);
        setPrivateField(molapTupleReader, "targets", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(mondrianProperties, "ResultLimit", integerProperty);
        setPrivateField(booleanProperty, "path", "");
        setPrivateField(SqlTupleReader.class, "isLogged", Boolean.FALSE);
        setPrivateField(SqlTupleReader.class, "LOGGER", logger);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(rolapCube, "hierarchyList", list3);
        setPrivateField(targetBase, "srcMembers", list4);
        setPrivateField(targetBase2, "srcMembers", list5);
        setPrivateField(targetBase3, "srcMembers", null);
        setPrivateField(targetBase3, "level", null);
        setPrivateField(targetBase4, "srcMembers", null);
        setPrivateField(targetBase4, "level", null);
        setPrivateField(rolapHierarchy, "levels", rolapLevels);
        setPrivateField(rolapHierarchy2, "levels", rolapLevels2);
        setPrivateField(rolapBaseCubeMeasure2, "expression", null);
        setPrivateField(rolapBaseCubeMeasure4, "expression", null);
        setPrivateField(rolapBaseCubeMeasure6, "expression", expression);
        callPrivateMethod("mondrian.rolap.RolapBaseCubeMeasure", "setStarMeasure", new Class[] {Object.class}, rolapBaseCubeMeasure6, new Object[] {null});
        setPrivateField(MolapTupleReader.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(targetBase7, "srcMembers", list7);
        setPrivateField(targetBase8, "srcMembers", list8);
        setPrivateField(targetBase9, "srcMembers", list9);
        setPrivateField(targetBase10, "srcMembers", null);
        setPrivateField(targetBase11, "srcMembers", null);
        setPrivateField(targetBase12, "srcMembers", list10);
        setPrivateField(mondrianResource, "MemberFetchLimitExceeded", _Def11);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(sqlContextConstraint.getEvaluator(), null);
        Mockingbird.setReturnValue(booleanProperty.get(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logger, "info", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(rolapSchema.lookupCube("", true), rolapCube);
        Mockingbird.replaceObjectForRecording(LinkedHashMap.class, "<init>()", Mockingbird.getProxyObject(LinkedHashMap.class));
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase3);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), targetBase4);
        Mockingbird.setReturnValue(false, molapTupleReader, "addLeveMemberHbase", "(mondrian.rolap.RolapLevel,mondrian.rolap.RolapCube,mondrian.rolap.aggmatcher.AggStar,java.util.List,mondrian.rolap.agg.CellRequest)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(false, list3, "iterator", "()java.util.Iterator", iterator2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), rolapHierarchy2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, molapTupleReader, "isColPrsntinLevels", "(mondrian.rolap.RolapLevel[],java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.setReturnValue(rolapCube.getMeasuresMembers(), list6);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(list6.get(0), rolapMember);
        Mockingbird.setReturnValue(rolapMember.isMeasure(), true);
        Mockingbird.setReturnValue(list6.get(0), rolapBaseCubeMeasure);
        Mockingbird.setReturnValue(list6.get(0), rolapBaseCubeMeasure2);
        Mockingbird.setReturnValue(list6.size(), 2);
        Mockingbird.setReturnValue(list6.get(1), rolapMember2);
        Mockingbird.setReturnValue(rolapMember2.isMeasure(), true);
        Mockingbird.setReturnValue(list6.get(1), rolapBaseCubeMeasure3);
        Mockingbird.setReturnValue(list6.get(1), rolapBaseCubeMeasure4);
        Mockingbird.setReturnValue(list6.size(), 3);
        Mockingbird.setReturnValue(list6.get(2), rolapMember3);
        Mockingbird.setReturnValue(rolapMember3.isMeasure(), true);
        Mockingbird.setReturnValue(list6.get(2), rolapBaseCubeMeasure5);
        Mockingbird.setReturnValue(list6.get(2), rolapBaseCubeMeasure6);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(rolapBaseCubeMeasure6.getName(), "");
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList2.add((Object) null), false);
        Mockingbird.setReturnValue(false, molapStatement, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,java.util.List,java.util.Map,java.util.List,mondrian.rolap.aggmatcher.AggStar,boolean)void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase5);
        targetBase5.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), targetBase6);
        targetBase6.open();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(false, integerProperty, "get", "()int", new Integer(2), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator6);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase7);
        Mockingbird.setReturnValue(iterator6.hasNext(), true);
        Mockingbird.setReturnValue(iterator6.next(), targetBase8);
        Mockingbird.setReturnValue(iterator6.hasNext(), false);
        Mockingbird.setReturnValue(tupleList.size(), 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase9);
        Mockingbird.setReturnValue(tupleList.get(0), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 2);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), targetBase10);
        Mockingbird.setReturnValue(list.size(), 2);
        Mockingbird.setReturnValue(list.get(1), targetBase11);
        Mockingbird.setReturnValue(list.size(), 3);
        Mockingbird.setReturnValue(list.get(2), targetBase12);
        Mockingbird.setReturnValue(tupleList.get(1), null);
        Mockingbird.setReturnValue(Util.cast((List) null), null);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "resetCurrMembers", new Class[] {List.class}, molapTupleReader, new Object[] {null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapTupleReader, "addTargets", "(int,int,int,int[],mondrian.rolap.SqlStatement,java.lang.String)void", null, 1);
        callPrivateMethod("mondrian.rolap.SqlTupleReader", "savePartialResult", new Class[] {List.class}, molapTupleReader, new Object[] {list2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(tupleList.size(), 3);
        Mockingbird.setReturnValue(MondrianResource.instance(), mondrianResource);
        Mockingbird.setReturnValue(false, _Def11, "ex", "(java.lang.Number)mondrian.olap.ResourceLimitExceededException", resourceLimitExceededException, 1);
        Mockingbird.setReturnValue(resourceLimitExceededException.getMessage(), "");
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapTupleReader.class);
        molapTupleReader.prepareTuples(null, tupleList, (List) list2);
        assertInvocationCount(logService, "info", 1);
        assertInvocationCount(logService, "error", 1);
        assertInvocationCount(list3, "iterator", 1);
    }
}

