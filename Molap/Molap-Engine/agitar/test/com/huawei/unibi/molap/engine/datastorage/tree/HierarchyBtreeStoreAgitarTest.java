/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:56:31 PM
 * Time to generate: 03:28.873 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage.tree;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.NodeKeyStore;
import com.huawei.unibi.molap.datastorage.store.NodeMeasureDataStore;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.datastorage.store.impl.key.uncompressed.AbstractSingleArrayKeyStore;
import com.huawei.unibi.molap.engine.datastorage.Pair;
import com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream;
import com.huawei.unibi.molap.engine.datastorage.streams.impl.FileDataInputStream;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import java.util.ArrayList;

public class HierarchyBtreeStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HierarchyBtreeStore.class;
    }
    
    public void testConstructor() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        assertEquals("hierarchyBtreeStore.leafMaxEntry", 128, ((Number) getPrivateField(hierarchyBtreeStore, "leafMaxEntry")).intValue());
        assertEquals("hierarchyBtreeStore.upperMaxChildren", 129, ((Number) getPrivateField(hierarchyBtreeStore, "upperMaxChildren")).intValue());
        assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        assertEquals("hierarchyBtreeStore.upperMaxEntry", 128, ((Number) getPrivateField(hierarchyBtreeStore, "upperMaxEntry")).intValue());
    }
    
    public void testHierarchyTreeLeafNodeConstructor() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore$HierarchyTreeLeafNode", "<init>", new Class[] {int.class, int.class, int.class}, null, new Object[] {new Integer(100), new Integer(1000), new Integer(0)});
        assertEquals("(CSBTreeLeafNode) cSBTreeLeafNode.nKeys", 0, ((CSBTreeLeafNode) cSBTreeLeafNode).nKeys);
        assertEquals("(CSBTreeLeafNode) cSBTreeLeafNode.keyStore.getWritableKeyArray().length", 100000, ((CSBTreeLeafNode) cSBTreeLeafNode).keyStore.getWritableKeyArray().length);
        short actual = ((NodeMeasureDataStore) getPrivateField(cSBTreeLeafNode, "dataStore")).getLength();
        assertEquals("(CSBTreeLeafNode) cSBTreeLeafNode.dataStore.getLength()", (short)0, actual);
        assertNull("(CSBTreeLeafNode) cSBTreeLeafNode.getNext()", cSBTreeLeafNode.getNext());
    }
    
    public void testBinarySearchOnKeys() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) Mockingbird.getProxyObject(CSBTreeLeafNode.class);
        int[] lens = new int[1];
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens));
        byte[] bytes = new byte[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBTreeLeafNode.getnKeys(), 0);
        Mockingbird.setReturnValue(cSBTreeLeafNode.getChild(100), null);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        Object result = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore", "binarySearchOnKeys", new Class[] {byte[].class, CSBNode.class}, hierarchyBtreeStore, new Object[] {bytes, cSBTreeLeafNode});
        assertNull("result", result);
    }
    
    public void testBuild() throws Throwable {
        int[] lens = new int[1];
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens));
        hierarchyBtreeStore.build(new ArrayList(100), true);
        assertEquals("hierarchyBtreeStore.size()", 0L, hierarchyBtreeStore.size());
    }
    
    public void testBuildWithAggressiveMocks() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        Mockingbird.enterRecordingMode();
        hierarchyBtreeStore.build((DataInputStream) null, false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        hierarchyBtreeStore.build(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCompressionModel() throws Throwable {
        int[] lens = new int[1];
        ValueCompressionModel result = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens)).getCompressionModel();
        assertNull("result", result);
    }
    
    public void testGetNextWithAggressiveMocks() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "binarySearchOnKeys", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode}, cSBNode2, 1);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "binarySearchOnKeys", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode2}, cSBNode3, 1);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), -2);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 1);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.getNext(bytes, null);
        assertNull("result", result);
    }
    
    public void testGetRangeSplitValue() throws Throwable {
        int[] lens = new int[1];
        long result = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens)).getRangeSplitValue();
        assertEquals("result", 0L, result);
    }
    
    public void testGetRanges() throws Throwable {
        int[] lens = new int[0];
        long[][] result = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens)).getRanges();
        assertNull("result", result);
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes2 = new byte[0];
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "binarySearchOnKeys", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode}, cSBNode2, 1);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore, "binarySearchOnKeys", "(byte[],com.huawei.unibi.molap.engine.datastorage.tree.CSBNode)com.huawei.unibi.molap.engine.datastorage.tree.CSBNode", new Object[] {bytes, cSBNode2}, cSBNode3, 1);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 0);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.get(bytes, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHierarchyTreeLeafNodeAddEntryWithAggressiveMocks() throws Throwable {
        CSBTreeLeafNode cSBTreeLeafNode = (CSBTreeLeafNode) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore$HierarchyTreeLeafNode"), true);
        NodeKeyStore nodeKeyStore = (NodeKeyStore) Mockingbird.getProxyObject(NodeKeyStore.class);
        Pair pair = (Pair) Mockingbird.getProxyObject(Pair.class);
        byte[] bytes = new byte[0];
        ((CSBTreeLeafNode) cSBTreeLeafNode).keyStore = nodeKeyStore;
        ((CSBTreeLeafNode) cSBTreeLeafNode).nKeys = 0;
        pair.setKey(bytes);
        Mockingbird.enterRecordingMode();
        nodeKeyStore.put(0, bytes);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore$HierarchyTreeLeafNode"));
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore$HierarchyTreeLeafNode", "addEntry", new Class[] {Pair.class}, cSBTreeLeafNode, new Object[] {pair});
        assertEquals("(CSBTreeLeafNode) cSBTreeLeafNode.nKeys", 1, ((CSBTreeLeafNode) cSBTreeLeafNode).nKeys);
        assertNotNull("(CSBTreeLeafNode) cSBTreeLeafNode.keyStore", ((CSBTreeLeafNode) cSBTreeLeafNode).keyStore);
    }
    
    public void testSearchWithAggressiveMocks() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes7 = new byte[0];
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), -2);
        Mockingbird.setReturnValue(cSBNode2.getChild(6), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 0);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, false, null);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks1() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        byte[] bytes12 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes12, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes12), 0);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        scanner.setDataStore(hierarchyBtreeStore, cSBNode3, 24);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, false, scanner);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks2() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 1);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 2);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, true, null);
        assertNull("result", result);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks3() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 1);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 2);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        scanner.setDataStore(hierarchyBtreeStore, null, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, true, scanner);
        assertNull("result", result);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks4() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), -2);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, false, null);
        assertNull("result", result);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks5() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 1);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 10);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, true, null);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks6() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 1);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 10);
        scanner.setDataStore(hierarchyBtreeStore, cSBNode3, 9);
        Mockingbird.setNormalReturnForVoid();
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, true, scanner);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSearchWithAggressiveMocks7() throws Throwable {
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class, true);
        CSBNode cSBNode = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        byte[] bytes2 = new byte[0];
        CSBNode cSBNode2 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes3 = new byte[0];
        byte[] bytes4 = new byte[0];
        byte[] bytes5 = new byte[0];
        byte[] bytes6 = new byte[0];
        byte[] bytes7 = new byte[0];
        CSBNode cSBNode3 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        byte[] bytes8 = new byte[0];
        byte[] bytes9 = new byte[0];
        byte[] bytes10 = new byte[0];
        byte[] bytes11 = new byte[0];
        CSBNode cSBNode4 = (CSBNode) Mockingbird.getProxyObject(CSBNode.class);
        setPrivateField(hierarchyBtreeStore, "root", cSBNode);
        setPrivateField(hierarchyBtreeStore, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(cSBNode.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode.getnKeys(), 1);
        Mockingbird.setReturnValue(false, cSBNode, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes2, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes2), 0);
        Mockingbird.setReturnValue(cSBNode.getChild(1), cSBNode2);
        Mockingbird.setReturnValue(cSBNode2.isLeafNode(), false);
        Mockingbird.setReturnValue(cSBNode2.getnKeys(), 31);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes3, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes3), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes4, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes4), -2);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes5, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes5), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes6, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes6), 1);
        Mockingbird.setReturnValue(false, cSBNode2, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes7, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes7), 0);
        Mockingbird.setReturnValue(cSBNode2.getChild(7), cSBNode3);
        Mockingbird.setReturnValue(cSBNode3.isLeafNode(), true);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 15);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes8, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes8), 1);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes9, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes9), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes10, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes10), -2);
        Mockingbird.setReturnValue(false, cSBNode3, "getKey", "(int,com.huawei.unibi.molap.datastorage.store.FileHolder)byte[]", bytes11, 1);
        Mockingbird.setReturnValue(keyGenerator.compare(bytes, bytes11), 1);
        Mockingbird.setReturnValue(cSBNode3.getnKeys(), 2);
        Mockingbird.setReturnValue(cSBNode3.getNext(), null);
        scanner.setDataStore(hierarchyBtreeStore, null, 0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(cSBNode3.getNext(), cSBNode4);
        KeyValue keyValue = new KeyValue();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", keyValue);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(KeyValue.class), "setRow", "(int)void", null, 1);
        Mockingbird.enterTestMode(HierarchyBtreeStore.class);
        KeyValue result = hierarchyBtreeStore.search(bytes, true, scanner);
        assertNotNull("hierarchyBtreeStore.keyGenerator", getPrivateField(hierarchyBtreeStore, "keyGenerator"));
    }
    
    public void testSize() throws Throwable {
        int[] lens = new int[0];
        long result = new HierarchyBtreeStore(new MultiDimKeyVarLengthGenerator(lens)).size();
        assertEquals("result", 0L, result);
    }
    
    public void testHierarchyTreeLeafNodeConstructorThrowsNegativeArraySizeException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore$HierarchyTreeLeafNode", "<init>", new Class[] {int.class, int.class, int.class}, null, new Object[] {new Integer(-1), new Integer(100), new Integer(1000)});
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractSingleArrayKeyStore.class, ex);
        }
    }
    
    public void testBinarySearchOnKeysThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        byte[] bytes = new byte[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore", "binarySearchOnKeys", new Class[] {byte[].class, CSBNode.class}, hierarchyBtreeStore, new Object[] {bytes, new CSBInternalNode(100, 1000, "testHierarchyBtreeStoreTableName")});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CSBInternalNode.class, ex);
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        }
    }
    
    public void testBinarySearchOnKeysThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        byte[] bytes = new byte[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore", "binarySearchOnKeys", new Class[] {byte[].class, CSBNode.class}, hierarchyBtreeStore, new Object[] {bytes, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyBtreeStore.class, ex);
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        }
    }
    
    public void testBuildThrowsNegativeArraySizeException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        DataInputStream factStream = new FileDataInputStream("testHierarchyBtreeStoreFilesLocation", -1, 100, new ArrayList(100), true, "testHierarchyBtreeStorePersistenceFileLocation", "testHierarchyBtreeStoreTableName");
        try {
            hierarchyBtreeStore.build(factStream, true);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("hierarchyBtreeStore.root", getPrivateField(hierarchyBtreeStore, "root"));
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
            assertEquals("hierarchyBtreeStore.nLeaf", 0, ((Number) getPrivateField(hierarchyBtreeStore, "nLeaf")).intValue());
            assertEquals("hierarchyBtreeStore.size()", 0L, hierarchyBtreeStore.size());
            assertNull("(FileDataInputStream) factStream.getValueCompressionMode()", ((FileDataInputStream) factStream).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNegativeArraySizeException1() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        DataInputStream factStream = new FileDataInputStream("testHierarchyBtreeStoreFilesLocation", -1, 100, new ArrayList(100), true, "testHierarchyBtreeStorePersistenceFileLocation", "testHierarchyBtreeStoreTableName");
        try {
            hierarchyBtreeStore.build(factStream);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("hierarchyBtreeStore.root", getPrivateField(hierarchyBtreeStore, "root"));
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
            assertEquals("hierarchyBtreeStore.nLeaf", 0, ((Number) getPrivateField(hierarchyBtreeStore, "nLeaf")).intValue());
            assertEquals("hierarchyBtreeStore.size()", 0L, hierarchyBtreeStore.size());
            assertNull("(FileDataInputStream) factStream.getValueCompressionMode()", ((FileDataInputStream) factStream).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        DataInputStream factStream = new FileDataInputStream("testHierarchyBtreeStoreFilesLocation", 100, 1000, new ArrayList(100), true, "testHierarchyBtreeStorePersistenceFileLocation", "testHierarchyBtreeStoreTableName");
        try {
            hierarchyBtreeStore.build(factStream, true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("hierarchyBtreeStore.root", getPrivateField(hierarchyBtreeStore, "root"));
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
            assertEquals("hierarchyBtreeStore.nLeaf", 0, ((Number) getPrivateField(hierarchyBtreeStore, "nLeaf")).intValue());
            assertEquals("hierarchyBtreeStore.size()", 0L, hierarchyBtreeStore.size());
            assertNull("(FileDataInputStream) factStream.getValueCompressionMode()", ((FileDataInputStream) factStream).getValueCompressionMode());
        }
    }
    
    public void testBuildThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        DataInputStream factStream = new FileDataInputStream("testHierarchyBtreeStoreFilesLocation", 100, 1000, new ArrayList(100), true, "testHierarchyBtreeStorePersistenceFileLocation", "testHierarchyBtreeStoreTableName");
        try {
            hierarchyBtreeStore.build(factStream);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileDataInputStream.class, ex);
            assertNull("hierarchyBtreeStore.root", getPrivateField(hierarchyBtreeStore, "root"));
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
            assertEquals("hierarchyBtreeStore.nLeaf", 0, ((Number) getPrivateField(hierarchyBtreeStore, "nLeaf")).intValue());
            assertEquals("hierarchyBtreeStore.size()", 0L, hierarchyBtreeStore.size());
            assertNull("(FileDataInputStream) factStream.getValueCompressionMode()", ((FileDataInputStream) factStream).getValueCompressionMode());
        }
    }
    
    public void testGetNextThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        int[] lens2 = new int[2];
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        byte[] startKey = new byte[2];
        Scanner scanner = new NonFilterTreeScanner(startKey, startKey, new MultiDimKeyVarLengthGenerator(lens2), new KeyValue(), lens, new FileHolderImpl(100));
        byte[] key = new byte[2];
        try {
            hierarchyBtreeStore.getNext(key, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyBtreeStore.class, ex);
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        int[] lens2 = new int[2];
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        byte[] startKey = new byte[2];
        Scanner scanner = new NonFilterTreeScanner(startKey, startKey, new MultiDimKeyVarLengthGenerator(lens2), new KeyValue(), lens, new FileHolderImpl(100));
        try {
            hierarchyBtreeStore.get(startKey, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyBtreeStore.class, ex);
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        }
    }
    
    public void testSearchThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        HierarchyBtreeStore hierarchyBtreeStore = new HierarchyBtreeStore(keyGenerator);
        byte[] startKey = "testString".getBytes();
        int[] lens2 = new int[0];
        Scanner scanner = new FilterTreeScanner(startKey, "testString".getBytes(), new MultiDimKeyVarLengthGenerator(lens2), new KeyValue(), lens2, new FileHolderImpl(100));
        byte[] key = new byte[3];
        try {
            hierarchyBtreeStore.search(key, true, scanner);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyBtreeStore.class, ex);
            assertSame("hierarchyBtreeStore.keyGenerator", keyGenerator, getPrivateField(hierarchyBtreeStore, "keyGenerator"));
        }
    }
}

