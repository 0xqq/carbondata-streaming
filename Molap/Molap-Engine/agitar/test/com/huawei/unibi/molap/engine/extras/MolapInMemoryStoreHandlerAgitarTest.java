/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:05:12 PM
 * Time to generate: 00:29.575 seconds
 *
 */

package com.huawei.unibi.molap.engine.extras;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import javax.sql.DataSource;
import mondrian.olap.Connection;
import mondrian.olap.DriverManager;
import mondrian.olap.Util;
import mondrian.rolap.RolapConnectionProperties;
import org.pentaho.platform.api.data.DatasourceServiceException;
import org.pentaho.platform.api.data.IDatasourceService;
import org.pentaho.platform.api.engine.IPentahoObjectFactory;
import org.pentaho.platform.api.engine.ObjectFactoryException;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import org.pentaho.platform.plugin.action.mondrian.catalog.MondrianCatalog;
import org.pentaho.platform.plugin.action.mondrian.catalog.MondrianCatalogHelper;
import org.pentaho.platform.util.messages.LocaleHelper;

public class MolapInMemoryStoreHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapInMemoryStoreHandler.class;
    }
    
    public void testConstructor() throws Throwable {
        new MolapInMemoryStoreHandler();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitInMemoryThreadConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread", "<init>", new Class[] {MolapInMemoryStoreHandler.class}, null, new Object[] {new MolapInMemoryStoreHandler()});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetInstance() throws Throwable {
        MolapInMemoryStoreHandler result = MolapInMemoryStoreHandler.getInstance();
        assertNotNull("result", result);
    }
    
    public void testInitInMemoryThreadRunWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(RolapConnectionProperties.class, "DataSource");
        storeStaticField(MolapInMemoryStoreHandler.class, "LOGGER");
        storeStaticField(RolapConnectionProperties.class, "Locale");
        Thread thread = (Thread) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"), true);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        MondrianCatalogHelper mondrianCatalogHelper = (MondrianCatalogHelper) Mockingbird.getProxyObject(MondrianCatalogHelper.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        IDatasourceService iDatasourceService = (IDatasourceService) Mockingbird.getProxyObject(IDatasourceService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MondrianCatalog mondrianCatalog = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        MondrianCatalog mondrianCatalog2 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings = new String[2];
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        Locale locale = (Locale) Mockingbird.getProxyObject(Locale.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        MondrianCatalog mondrianCatalog3 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings2 = new String[2];
        DataSource dataSource2 = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MondrianCatalog mondrianCatalog4 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", null, 1);
        setPrivateField(mondrianCatalog, "dataSourceInfo", null);
        setPrivateField(mondrianCatalog2, "dataSourceInfo", "");
        setPrivateField(mondrianCatalog2, "definition", "");
        setPrivateField(mondrianCatalog2, "name", "");
        strings[1] = "";
        setPrivateField(RolapConnectionProperties.class, "Locale", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "DataSource", rolapConnectionProperties);
        setPrivateField(MolapInMemoryStoreHandler.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(mondrianCatalog3, "dataSourceInfo", "");
        strings2[1] = "";
        setPrivateField(mondrianCatalog4, "dataSourceInfo", null);
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", mondrianCatalogHelper, 1);
        Mockingbird.setReturnValue(mondrianCatalogHelper.listCatalogs(null, true), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", iDatasourceService, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(iDatasourceService.getDataSource(""), dataSource);
        Mockingbird.setReturnValue(true, Util.class, "parseConnectString", "(java.lang.String)mondrian.olap.Util$PropertyList", propertyList, 1);
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(propertyList.put("Provider", "mondrian"), "");
        Mockingbird.setReturnValue(propertyList.put("PoolNeeded", "false"), "");
        Mockingbird.setReturnValue(LocaleHelper.getLocale(), locale);
        Mockingbird.setReturnValue(false, locale, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "remove", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, DriverManager.class, "getConnection", "(mondrian.olap.Util$PropertyList,mondrian.spi.CatalogLocator,javax.sql.DataSource)mondrian.olap.Connection", connection, 1);
        Mockingbird.setReturnValue(true, System.class, "currentTimeMillis", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(false, iDatasourceService, "getDataSource", "(java.lang.String)javax.sql.DataSource", dataSource2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"));
        callPrivateMethod("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread", "run", new Class[] {}, thread, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitInMemoryThreadRunWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapInMemoryStoreHandler.class, "LOGGER");
        Thread thread = (Thread) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"), true);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        MondrianCatalogHelper mondrianCatalogHelper = (MondrianCatalogHelper) Mockingbird.getProxyObject(MondrianCatalogHelper.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        ObjectFactoryException objectFactoryException = (ObjectFactoryException) Mockingbird.getProxyObject(ObjectFactoryException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MondrianCatalog mondrianCatalog = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings = new String[0];
        MondrianCatalog mondrianCatalog2 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings2 = new String[0];
        MondrianCatalog mondrianCatalog3 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        MondrianCatalog mondrianCatalog4 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", null, 1);
        setPrivateField(MolapInMemoryStoreHandler.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(mondrianCatalog, "dataSourceInfo", "");
        setPrivateField(mondrianCatalog2, "dataSourceInfo", "");
        setPrivateField(mondrianCatalog3, "dataSourceInfo", null);
        setPrivateField(mondrianCatalog4, "dataSourceInfo", null);
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", mondrianCatalogHelper, 1);
        Mockingbird.setReturnValue(mondrianCatalogHelper.listCatalogs(null, true), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setException(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", objectFactoryException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog4);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"));
        callPrivateMethod("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread", "run", new Class[] {}, thread, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitInMemoryThreadRunWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapInMemoryStoreHandler.class, "LOGGER");
        Thread thread = (Thread) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"), true);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        MondrianCatalogHelper mondrianCatalogHelper = (MondrianCatalogHelper) Mockingbird.getProxyObject(MondrianCatalogHelper.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        IDatasourceService iDatasourceService = (IDatasourceService) Mockingbird.getProxyObject(IDatasourceService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MondrianCatalog mondrianCatalog = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        MondrianCatalog mondrianCatalog2 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        MondrianCatalog mondrianCatalog3 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings = new String[2];
        MondrianCatalog mondrianCatalog4 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings2 = new String[2];
        MondrianCatalog mondrianCatalog5 = (MondrianCatalog) Mockingbird.getProxyObject(MondrianCatalog.class);
        String[] strings3 = new String[2];
        DatasourceServiceException datasourceServiceException = (DatasourceServiceException) Mockingbird.getProxyObject(DatasourceServiceException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", null, 1);
        setPrivateField(mondrianCatalog, "dataSourceInfo", null);
        setPrivateField(mondrianCatalog2, "dataSourceInfo", null);
        setPrivateField(mondrianCatalog3, "dataSourceInfo", "");
        strings[1] = "";
        setPrivateField(mondrianCatalog4, "dataSourceInfo", "");
        strings2[1] = "";
        setPrivateField(mondrianCatalog5, "dataSourceInfo", "");
        strings3[1] = "";
        setPrivateField(MolapInMemoryStoreHandler.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", mondrianCatalogHelper, 1);
        Mockingbird.setReturnValue(mondrianCatalogHelper.listCatalogs(null, true), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", iDatasourceService, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, iDatasourceService, "getDataSource", "(java.lang.String)javax.sql.DataSource", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog4);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings2, 1);
        Mockingbird.setReturnValue(false, iDatasourceService, "getDataSource", "(java.lang.String)javax.sql.DataSource", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), mondrianCatalog5);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings3, 1);
        Mockingbird.setException(false, iDatasourceService, "getDataSource", "(java.lang.String)javax.sql.DataSource", datasourceServiceException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"));
        callPrivateMethod("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread", "run", new Class[] {}, thread, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitInMemoryThreadRunWithAggressiveMocks3() throws Throwable {
        Thread thread = (Thread) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"), true);
        MondrianCatalogHelper mondrianCatalogHelper = (MondrianCatalogHelper) Mockingbird.getProxyObject(MondrianCatalogHelper.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(true, PentahoSystem.class, "get", "(java.lang.Class,java.lang.String,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", mondrianCatalogHelper, 1);
        Mockingbird.setReturnValue(mondrianCatalogHelper.listCatalogs(null, true), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread"));
        callPrivateMethod("com.huawei.unibi.molap.engine.extras.MolapInMemoryStoreHandler$InitInMemoryThread", "run", new Class[] {}, thread, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testStartInitInMemoryAction() throws Throwable {
        MolapInMemoryStoreHandler.getInstance().startInitInMemoryAction();
        assertTrue("Test call resulted in expected outcome", true);
    }
}

