/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:49:53 PM
 * Time to generate: 02:15.590 seconds
 *
 */

package com.huawei.unibi.molap.engine.datasource;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapDummyDialect;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapMemberSource;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapTupleReader;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Set;
import mondrian.olap.Util;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapStar;
import mondrian.rolap.SqlMemberSource;
import mondrian.rolap.SqlTupleReader;
import mondrian.spi.Dialect;

public class AbstractMolapDataSourceAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractMolapDataSource.class;
    }
    
    public void testGetAggCountWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        molapStatement.executeAggCount("", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        int result = abstractMolapDataSource.getAggCount("", null);
        assertEquals("result", 0, result);
    }
    
    public void testGetAggCountWithAggressiveMocks1() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        molapStatement.rowCount = 0;
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        molapStatement.executeAggCount("", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, molapResultHolder, "getObject", "(int)java.lang.Object", new Double(0.0), 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        int result = abstractMolapDataSource.getAggCount("", null);
        assertEquals("result", 0, result);
    }
    
    public void testGetColumnsWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, null, 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        Set result = abstractMolapDataSource.getColumns("");
        assertNull("result", result);
    }
    
    public void testGetColumnsWithAggressiveMocks1() throws Throwable {
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), null);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        Set result = abstractMolapDataSource.getColumns("");
        assertNull("result", result);
    }
    
    public void testGetColumnsWithAggressiveMocks2() throws Throwable {
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(cube.getMetaTableColumns(""), null);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        Set result = abstractMolapDataSource.getColumns("");
        assertNull("result", result);
    }
    
    public void testGetConnection() throws Throwable {
        Connection result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getConnection();
        assertNull("result", result);
    }
    
    public void testGetConnectionWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        Connection result = abstractMolapDataSource.getConnection("", "");
        assertNull("result", result);
    }
    
    public void testGetDialect() throws Throwable {
        MolapDummyDialect result = (MolapDummyDialect) new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getDialect();
        assertEquals("result.getDatabaseProduct()", Dialect.DatabaseProduct.UNKNOWN, result.getDatabaseProduct());
    }
    
    public void testGetDimCardinalityWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        molapStatement.executeCount("", (RolapStar) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(molapResultHolder.isNext(), true);
        Mockingbird.setReturnValue(false, molapResultHolder, "getObject", "(int)java.lang.Object", new Double(0.0), 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        int result = abstractMolapDataSource.getDimCardinality("", null);
        assertEquals("result", 0, result);
    }
    
    public void testGetDimCardinalityWithAggressiveMocks1() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.enterRecordingMode();
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource)", molapStatement);
        Mockingbird.enterNormalMode();
        molapStatement.updateIterator(molapResultHolder);
        Mockingbird.enterRecordingMode();
        molapStatement.executeCount("", (RolapStar) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, molapResultHolder, "isNext", "()boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        int result = abstractMolapDataSource.getDimCardinality("", null);
        assertEquals("result", 0, result);
    }
    
    public void testGetLogWriter() throws Throwable {
        PrintWriter result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getLogWriter();
        assertNull("result", result);
    }
    
    public void testGetLoginTimeout() throws Throwable {
        int result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getLoginTimeout();
        assertEquals("result", 0, result);
    }
    
    public void testGetMemberSourceWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(MolapMemberSource.class, "<init>(mondrian.rolap.RolapHierarchy)", Mockingbird.getProxyObject(MolapMemberSource.class));
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        SqlMemberSource result = abstractMolapDataSource.getMemberSource(null);
        assertNull("result.getHierarchy()", result.getHierarchy());
    }
    
    public void testGetMetaTables() throws Throwable {
        String[] result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getMetaTables();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetMetaTablesWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), null);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        String[] result = abstractMolapDataSource.getMetaTables();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetMetaTablesWithAggressiveMocks1() throws Throwable {
        storeStaticField(RolapConnection.class, "THREAD_LOCAL");
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        ThreadLocal threadLocal = (ThreadLocal) Mockingbird.getProxyObject(ThreadLocal.class);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        String[] strings = new String[0];
        setPrivateField(RolapConnection.class, "THREAD_LOCAL", threadLocal);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap, 1);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", new Object[] {"SCHEMA_NAME"}, "", 1);
        Mockingbird.setReturnValue(false, threadLocal, "get", "()java.lang.Object", new Object[] {}, hashMap2, 1);
        Mockingbird.setReturnValue(false, hashMap2, "get", "(java.lang.Object)java.lang.Object", new Object[] {"CUBENAME"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), cube);
        Mockingbird.setReturnValue(cube.getMetaTableNames(), set);
        Mockingbird.setReturnValue(false, set, "toArray", "(java.lang.Object[])java.lang.Object[]", strings, 1);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        String[] result = abstractMolapDataSource.getMetaTables();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetSegmentLoader() throws Throwable {
        MolapSegmentLoader result = (MolapSegmentLoader) new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getSegmentLoader();
        assertNotNull("result", result);
    }
    
    public void testGetTupleReaderWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(MolapTupleReader.class, "<init>(mondrian.rolap.sql.TupleConstraint,mondrian.rolap.RolapSchema)", Mockingbird.getProxyObject(MolapTupleReader.class));
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        SqlTupleReader result = abstractMolapDataSource.getTupleReader(null, null);
        assertNotNull("result", result);
    }
    
    public void testIsWrapperForWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        boolean result = abstractMolapDataSource.isWrapperFor((Class) null);
        assertFalse("result", result);
    }
    
    public void testLoadCubesWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        molapMetadata.load(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        abstractMolapDataSource.loadCubes(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetLogWriterWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        abstractMolapDataSource.setLogWriter(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetLoginTimeoutWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        abstractMolapDataSource.setLoginTimeout(0);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testUnwrapWithAggressiveMocks() throws Throwable {
        AbstractMolapDataSource abstractMolapDataSource = (AbstractMolapDataSource) Mockingbird.getProxyObject(AbstractMolapDataSource.class, true);
        Mockingbird.enterTestMode(AbstractMolapDataSource.class);
        Object result = abstractMolapDataSource.unwrap((Class) null);
        assertNull("result", result);
    }
}

