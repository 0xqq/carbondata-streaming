/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:54:33 PM
 * Time to generate: 01:27.961 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.datastorage.streams.impl.FileDataInputStream;
import com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import java.util.HashMap;
import java.util.Map;
import javax.sql.DataSource;
import mondrian.olap.Dimension;
import mondrian.olap.DimensionType;
import mondrian.olap.Schema;
import mondrian.olap.Util;
import mondrian.rolap.RolapCubeHierarchy;
import mondrian.rolap.RolapCubeLevel;
import mondrian.rolap.RolapDimension;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapLevel;

public class HierarchyStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HierarchyStore.class;
    }
    
    public void testConstructor() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        assertEquals("hierarchyStore.getDimensionName()", "", hierarchyStore.getDimensionName());
        assertEquals("hierarchyStore.getHierName()", "testString", hierarchyStore.getHierName());
        assertEquals("hierarchyStore.getTableName()", "testString.hierarchy", hierarchyStore.getTableName());
        assertSame("hierarchyStore.getRolapHierarchy()", rolapHierarchy, hierarchyStore.getRolapHierarchy());
    }
    
    public void testConstructor1() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), null);
        Mockingbird.setReturnValue(rolapHierarchy.getName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        assertEquals("hierarchyStore.getDimensionName()", "testString", hierarchyStore.getDimensionName());
        assertEquals("hierarchyStore.getHierName()", "testString", hierarchyStore.getHierName());
        assertEquals("hierarchyStore.getTableName()", "testString.hierarchy", hierarchyStore.getTableName());
        assertSame("hierarchyStore.getRolapHierarchy()", rolapHierarchy, hierarchyStore.getRolapHierarchy());
    }
    
    public void testBuildWithAggressiveMocks() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class, true);
        Mockingbird.enterRecordingMode();
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Mockingbird.replaceObjectForRecording(HierarchyBtreeStore.class, "<init>(com.huawei.unibi.molap.keygenerator.KeyGenerator)", hierarchyBtreeStore);
        hierarchyBtreeStore.build(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HierarchyStore.class);
        hierarchyStore.build(null, null);
        assertEquals("hierarchyStore.getHierBTreeStore().size()", 0L, hierarchyStore.getHierBTreeStore().size());
    }
    
    public void testGetDimensionName() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), null);
        Mockingbird.setReturnValue(rolapHierarchy.getName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        String result = new HierarchyStore(rolapHierarchy).getDimensionName();
        assertEquals("result", "testString", result);
    }
    
    public void testGetHierBTreeStore() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), null);
        Mockingbird.setReturnValue(rolapHierarchy.getName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyBtreeStore result = new HierarchyStore(rolapHierarchy).getHierBTreeStore();
        assertNull("result", result);
    }
    
    public void testGetLevelName() throws Throwable {
        Schema rolapSchema = (Schema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testHierarchyStoreKey", new Util.PropertyList(), Mockingbird.getProxyObject(DataSource.class), "testHierarchyStoreMd5Bytes"});
        RolapDimension rolapDimension = (RolapDimension) callPrivateMethod("mondrian.rolap.RolapDimension", "<init>", new Class[] {Schema.class, String.class, String.class, boolean.class, String.class, DimensionType.class, boolean.class, Map.class}, null, new Object[] {rolapSchema, "testHierarchyStoreName", "testHierarchyStoreCaption", Boolean.TRUE, "testHierarchyStoreDescription", DimensionType.MeasuresDimension, Boolean.FALSE, new HashMap(100, 100.0F)});
        RolapHierarchy rolapHierarchy = (RolapHierarchy) callPrivateMethod("mondrian.rolap.RolapHierarchy", "<init>", new Class[] {RolapDimension.class, String.class, String.class, boolean.class, String.class, boolean.class, RolapHierarchy.class, Map.class}, null, new Object[] {rolapDimension, "testHierarchyStoreSubName", "testHierarchyStoreCaption", Boolean.TRUE, "testHierarchyStoreDescription", Boolean.TRUE, null, new HashMap(1000, 1000.0F)});
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        Mockingbird.enterTestMode(HierarchyStore.class);
        String result = hierarchyStore.getLevelName();
        assertNull("result", result);
    }
    
    public void testGetLevelName1() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        Mockingbird.enterRecordingMode();
        RolapCubeLevel[] rolapCubeLevels = new RolapCubeLevel[0];
        Object levels = callPrivateMethod("mondrian.rolap.RolapHierarchy", "getLevels", new Class[] {}, rolapHierarchy, new Object[] {});
        Mockingbird.setReturnValue(levels, rolapCubeLevels);
        Mockingbird.enterTestMode(HierarchyStore.class);
        String result = hierarchyStore.getLevelName();
        assertNull("result", result);
    }
    
    public void testGetLevelName2() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), null);
        Mockingbird.setReturnValue(rolapHierarchy.getName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        Mockingbird.enterRecordingMode();
        RolapLevel[] rolapLevels = new RolapLevel[1];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        rolapLevels[0] = rolapLevel;
        Mockingbird.setReturnValue(rolapHierarchy.getLevels(), rolapLevels);
        Mockingbird.setReturnValue(rolapLevel.isAll(), false);
        Mockingbird.setReturnValue(rolapLevel.getName(), "MeasuresLevel");
        Mockingbird.enterTestMode(HierarchyStore.class);
        String result = hierarchyStore.getLevelName();
        assertEquals("result", "MeasuresLevel", result);
    }
    
    public void testGetRolapHierarchy() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        RolapCubeHierarchy result = (RolapCubeHierarchy) new HierarchyStore(rolapHierarchy).getRolapHierarchy();
        assertSame("result", rolapHierarchy, result);
    }
    
    public void testGetTableName() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), null);
        Mockingbird.setReturnValue(rolapHierarchy.getName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        String result = new HierarchyStore(rolapHierarchy).getTableName();
        assertEquals("result", "testString.hierarchy", result);
    }
    
    public void testSetHierName() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        hierarchyStore.setHierName("testHierarchyStoreHierName");
        assertEquals("hierarchyStore.getHierName()", "testHierarchyStoreHierName", hierarchyStore.getHierName());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new HierarchyStore(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HierarchyStore.class, ex);
        }
    }
    
    public void testBuildThrowsNegativeArraySizeException() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        FileDataInputStream factStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class);
        MultiDimKeyVarLengthGenerator keyGen = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        Mockingbird.enterRecordingMode();
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Mockingbird.replaceObjectForRecording(HierarchyBtreeStore.class, "<init>(com.huawei.unibi.molap.keygenerator.KeyGenerator)", hierarchyBtreeStore);
        hierarchyBtreeStore.build(factStream);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NegativeArraySizeException.class));
        Mockingbird.enterTestMode(HierarchyStore.class);
        try {
            hierarchyStore.build(keyGen, factStream);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertSame("hierarchyStore.getHierBTreeStore()", hierarchyBtreeStore, hierarchyStore.getHierBTreeStore());
        }
    }
    
    public void testBuildThrowsNullPointerException() throws Throwable {
        RolapCubeHierarchy rolapHierarchy = (RolapCubeHierarchy) Mockingbird.getProxyObject(RolapCubeHierarchy.class);
        Mockingbird.enterRecordingMode();
        Dimension rolapCubeDimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Mockingbird.setReturnValue(rolapHierarchy.getDimension(), rolapCubeDimension);
        Mockingbird.setReturnValue(rolapCubeDimension.getName(), "");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.setReturnValue(rolapHierarchy.getSubName(), "testString");
        Mockingbird.enterTestMode(HierarchyStore.class);
        HierarchyStore hierarchyStore = new HierarchyStore(rolapHierarchy);
        FileDataInputStream factStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class);
        MultiDimKeyVarLengthGenerator keyGen = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        Mockingbird.enterRecordingMode();
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        Mockingbird.replaceObjectForRecording(HierarchyBtreeStore.class, "<init>(com.huawei.unibi.molap.keygenerator.KeyGenerator)", hierarchyBtreeStore);
        hierarchyBtreeStore.build(factStream);
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HierarchyStore.class);
        try {
            hierarchyStore.build(keyGen, factStream);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("hierarchyStore.getHierBTreeStore()", hierarchyBtreeStore, hierarchyStore.getHierBTreeStore());
        }
    }
}

