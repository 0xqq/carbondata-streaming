/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:49 PM
 * Time to generate: 01:55.862 seconds
 *
 */

package com.huawei.unibi.molap.engine.mondrian.extensions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.executer.MolapExecutor;
import com.huawei.unibi.molap.engine.executer.MolapExecutorFactory;
import com.huawei.unibi.molap.engine.query.MolapSQLQuery;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import com.huawei.unibi.molap.keygenerator.KeyGenException;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.sql.DataSource;
import mondrian.olap.Level;
import mondrian.olap.MondrianDef;
import mondrian.olap.Util;
import mondrian.recorder.ListRecorder;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.RolapStar;
import mondrian.rolap.RolapUtil;
import mondrian.rolap.SqlStatement;
import mondrian.rolap.StarColumnPredicate;
import mondrian.rolap.agg.AggQuerySpec;
import mondrian.rolap.agg.DrillThroughQuerySpec;
import mondrian.rolap.agg.LiteralStarPredicate;
import mondrian.rolap.agg.QuerySpec;
import mondrian.rolap.aggmatcher.AggStar;
import mondrian.rolap.aggmatcher.JdbcSchema;
import mondrian.server.Execution;
import mondrian.server.Locus;

public class MolapStatementAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapStatement.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapStatement molapStatement = new MolapStatement(null);
        assertEquals("molapStatement.resultSetType", 0, ((Number) getPrivateField(molapStatement, "resultSetType")).intValue());
        assertEquals("molapStatement.maxRows", -1, ((Number) getPrivateField(molapStatement, "maxRows")).intValue());
        assertNull("molapStatement.locus", getPrivateField(molapStatement, "locus"));
        assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
        assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
        assertNull("molapStatement.dataSource", getPrivateField(molapStatement, "dataSource"));
        assertEquals("molapStatement.resultSetConcurrency", -1, ((Number) getPrivateField(molapStatement, "resultSetConcurrency")).intValue());
        assertNull("molapStatement.sql", getPrivateField(molapStatement, "sql"));
        assertNull("molapStatement.dataSource", getPrivateField(molapStatement, "dataSource"));
        assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
        assertEquals("molapStatement.firstRowOrdinal", 0, ((Number) getPrivateField(molapStatement, "firstRowOrdinal")).intValue());
        assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
    }
    
    public void testConstructor1() throws Throwable {
        List types = new ArrayList(100);
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapStatement molapStatement = new MolapStatement(dataSource, "testMolapStatementSql", types, 100, 1000, locus, 0, -1);
        assertEquals("molapStatement.resultSetType", 0, ((Number) getPrivateField(molapStatement, "resultSetType")).intValue());
        assertEquals("molapStatement.maxRows", 100, ((Number) getPrivateField(molapStatement, "maxRows")).intValue());
        assertSame("molapStatement.locus", locus, getPrivateField(molapStatement, "locus"));
        assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
        assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
        assertSame("molapStatement.dataSource", dataSource, getPrivateField(molapStatement, "dataSource"));
        assertEquals("molapStatement.resultSetConcurrency", -1, ((Number) getPrivateField(molapStatement, "resultSetConcurrency")).intValue());
        assertEquals("molapStatement.sql", "testMolapStatementSql", getPrivateField(molapStatement, "sql"));
        assertSame("molapStatement.dataSource", dataSource, getPrivateField(molapStatement, "dataSource"));
        assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
        assertEquals("molapStatement.firstRowOrdinal", 1000, ((Number) getPrivateField(molapStatement, "firstRowOrdinal")).intValue());
        assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
    }
    
    public void testDimensionComparatorSchemaBasedConstructor() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased"));
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased", "<init>", new Class[] {MolapStatement.class}, null, new Object[] {molapStatement});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.close();
        assertNull("molapStatement.getIterator()", molapStatement.getIterator());
    }
    
    public void testCreateAccs() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        Mockingbird.enterTestMode(MolapStatement.class);
        SqlStatement.Accessor result = (SqlStatement.Accessor) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "createAccs", new Class[] {int.class, SqlStatement.Type.class}, molapStatement, new Object[] {new Integer(100), SqlStatement.Type.INT});
        assertNotNull("result", result);
    }
    
    public void testCreateAccsWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        Mockingbird.enterRecordingMode();
        SqlStatement.Accessor accessor = (SqlStatement.Accessor) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$5"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$5"), "<init>(com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement,int)", accessor);
        Mockingbird.enterTestMode(MolapStatement.class);
        SqlStatement.Accessor result = (SqlStatement.Accessor) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "createAccs", new Class[] {int.class, SqlStatement.Type.class}, molapStatement, new Object[] {new Integer(0), SqlStatement.Type.DOUBLE});
        assertNotNull("result", result);
    }
    
    public void testDimensionComparatorSchemaBasedCompareWithAggressiveMocks() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased"), true);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        dimension.setSchemaOrdinal(0);
        dimension2.setSchemaOrdinal(0);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased", "compare", new Class[] {MolapMetadata.Dimension.class, MolapMetadata.Dimension.class}, comparator, new Object[] {dimension, dimension2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testExecute() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MolapStatement molapStatement = new MolapStatement(dataSource, "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        RolapSchema rolapSchema = (RolapSchema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testMolapStatementKey", Util.parseConnectString("testMolapStatements"), Mockingbird.getProxyObject(DataSource.class), "testMolapStatementMd5Bytes"});
        List cols = new ArrayList(1000);
        Map constraints = new HashMap(100, 100.0F);
        List msrs = new ArrayList(0);
        MolapMetadata.Cube locCube = new MolapMetadata.Cube("testMolapStatementName");
        RolapStar star = (RolapStar) callPrivateMethod("mondrian.rolap.RolapStar", "<init>", new Class[] {RolapSchema.class, DataSource.class, MondrianDef.Relation.class, String.class}, null, new Object[] {rolapSchema, Mockingbird.getProxyObject(DataSource.class), new MondrianDef.Table(), "testMolapStatementCubeName"});
        JdbcSchema jdbcSchema = (JdbcSchema) callPrivateMethod("mondrian.rolap.aggmatcher.JdbcSchema", "<init>", new Class[] {DataSource.class}, null, new Object[] {null});
        JdbcSchema.Table dbTable = (JdbcSchema.Table) callPrivateMethod("mondrian.rolap.aggmatcher.JdbcSchema$Table", "<init>", new Class[] {JdbcSchema.class, String.class, String.class}, null, new Object[] {jdbcSchema, "testMolapStatementName", "testMolapStatementTableType"});
        AggStar aggStar = AggStar.makeAggStar(star, dbTable, new ListRecorder(), 100);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, dataSource), null);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(locCube, cols, constraints, msrs, aggStar, true);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testExecuteAggCount() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        MolapStatement molapStatement = new MolapStatement(dataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, dataSource), null);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeAggCount("testMolapStatementTable", null);
        assertEquals("molapStatement.guessTypes().size()", 1, molapStatement.guessTypes().size());
        assertEquals("molapStatement.guessTypes().get(0)", SqlStatement.Type.INT, molapStatement.guessTypes().get(0));
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testExecuteAggCountWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "INT");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dataSource", null);
        setPrivateField(SqlStatement.Type.class, "INT", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.add((Object) null), false);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", molapResultHolder);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        molapExecutor.executeAggTableCount("", molapResultHolder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeAggCount("", null);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
    }
    
    public void testExecuteCount() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeCount("testMolapStatementDim", "testMolapStatementSchemaName");
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
        assertNull("molapStatement.getIterator()", molapStatement.getIterator());
    }
    
    public void testExecuteCount1() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        RolapSchema rolapSchema = (RolapSchema) callPrivateMethod("mondrian.rolap.RolapSchema", "<init>", new Class[] {String.class, Util.PropertyList.class, DataSource.class, String.class}, null, new Object[] {"testMolapStatementKey", Util.parseConnectString("testMolapStatements"), Mockingbird.getProxyObject(DataSource.class), "testMolapStatementMd5Bytes"});
        RolapStar star = (RolapStar) callPrivateMethod("mondrian.rolap.RolapStar", "<init>", new Class[] {RolapSchema.class, DataSource.class, MondrianDef.Relation.class, String.class}, null, new Object[] {rolapSchema, Mockingbird.getProxyObject(DataSource.class), new MondrianDef.Table(), "testMolapStatementCubeName"});
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeCount("testMolapStatementDim", star);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
        assertNull("molapStatement.getIterator()", molapStatement.getIterator());
    }
    
    public void testExecuteCountWithAggressiveMocks() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "INT");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dataSource", null);
        setPrivateField(rolapStar, "factTable", table);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar, "cubeName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(table.getTableName(), "");
        setPrivateField(SqlStatement.Type.class, "INT", null);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", molapResultHolder);
        Mockingbird.setReturnValue(cube.getDimensions(""), null);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", null, 1);
        molapExecutor.executeDimensionCount(null, molapResultHolder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeCount("", rolapStar);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
    }
    
    public void testExecuteCountWithAggressiveMocks1() throws Throwable {
        storeStaticField(SqlStatement.Type.class, "INT");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dataSource", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(SqlStatement.Type.class, "INT", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapMetadata.getCube(""), cube);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", molapResultHolder);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", null, 1);
        molapExecutor.executeDimensionCount(null, molapResultHolder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.executeCount("", "");
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
    }
    
    public void testExecuteQueryWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(MolapStatement.class, "LOGGER");
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list5 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        List list6 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list7 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        List list8 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure3 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        KeyGenException keyGenException = (KeyGenException) Mockingbird.getProxyObject(KeyGenException.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapSQLQuery.parseQuery(""), molapSQLQuery);
        Mockingbird.enterNormalMode();
        dimension2.setDataType(null);
        dimension4.setDataType(null);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(measure, "colName", "");
        measure.setAggName("");
        setPrivateField(measure, "dataType", null);
        setPrivateField(measure2, "colName", "X");
        measure2.setAggName("");
        setPrivateField(measure3, "colName", "X");
        measure3.setAggName("");
        setPrivateField(measure4, "colName", "");
        setPrivateField(measure5, "colName", "");
        setPrivateField(measure6, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        setPrivateField(MolapStatement.class, "LOGGER", logService);
        measure7.setAggName("count");
        measure9.setAggName("count");
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapSQLQuery.getTables(), list3);
        Mockingbird.setReturnValue(list3.get(0), "");
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(molapSQLQuery.getSchemaName(), "");
        Mockingbird.setReturnValue(molapSQLQuery.getCubeName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(molapSQLQuery.getSelects(), list4);
        Mockingbird.setReturnValue(molapSQLQuery.getPred(), map);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(list4.get(0), "");
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(dimension.getCopy(), dimension2);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list5, 1);
        Mockingbird.setReturnValue(list5.size(), 1);
        Mockingbird.setReturnValue(list5.size(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list5.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", Mockingbird.getProxyObject(MolapFilterInfo.class));
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(list4.size(), 2);
        Mockingbird.setReturnValue(list4.get(1), "");
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension3, 1);
        Mockingbird.setReturnValue(dimension3.getCopy(), dimension4);
        Mockingbird.setReturnValue(list2.add(dimension4), false);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list6, 1);
        Mockingbird.setReturnValue(list6.size(), 1);
        Mockingbird.setReturnValue(list6.size(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList2);
        Mockingbird.setReturnValue(list6.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), comparable);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), comparable);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", Mockingbird.getProxyObject(MolapFilterInfo.class));
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(list4.size(), 1);
        Mockingbird.setReturnValue(molapSQLQuery.getAggs(), map2);
        Mockingbird.setReturnValue(map2.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), "");
        Mockingbird.setReturnValue(entry.getValue(), "");
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list7, 1);
        Mockingbird.setReturnValue(list7.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), measure);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(measure), false);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), "X");
        Mockingbird.setReturnValue(entry2.getValue(), "X");
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list8, 1);
        Mockingbird.setReturnValue(list8.iterator(), iterator5);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure2);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure3);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure4);
        Mockingbird.setReturnValue(iterator5.hasNext(), true);
        Mockingbird.setReturnValue(iterator5.next(), measure5);
        Mockingbird.setReturnValue(iterator5.hasNext(), false);
        Mockingbird.setReturnValue(measure3.getCopy(), measure6);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(cube.getDimensions(""), null);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList3);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure7);
        Mockingbird.setReturnValue(measure7.getCopy(), measure8);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure9);
        Mockingbird.setReturnValue(measure9.getCopy(), measure10);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setException(false, molapExecutor, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", keyGenException, 1);
        Mockingbird.setReturnValue(false, keyGenException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapResultHolder result = molapStatement.executeQuery("");
        assertFalse("result.wasNull()", result.wasNull());
        assertNotNull("molapStatementMolapStatement.LOGGER", getPrivateField(MolapStatement.class, "LOGGER"));
        assertNull("molapStatement.getAccessors()", molapStatement.getAccessors());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        AggQuerySpec aggQuerySpec = (AggQuerySpec) Mockingbird.getProxyObject(AggQuerySpec.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        AggStar.FactTable.Measure measure = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        AggStar.FactTable.Measure measure2 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        AggStar.FactTable.Measure measure3 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        AggStar.Table.Column column = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        AggStar.Table.Column column3 = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor2 = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure11 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar2, "cubeName", "");
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure2, "expression", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(measure2, "name", "");
        setPrivateField(measure3, "expression", null);
        setPrivateField(column, "expression", column2);
        column2.name = "";
        dimension.setDataType(null);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(column3, "expression", column4);
        column4.name = "";
        dimension2.setDataType(null);
        setPrivateField(measure6, "dataType", null);
        setPrivateField(measure7, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        measure8.setAggName("count");
        measure10.setAggName("count");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure);
        Mockingbird.setReturnValue(false, expression, "getTableAlias", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, molapExecutor, "executeTableCount", "(java.lang.String)long", new Long(0L), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(0), column);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(list2.add(dimension), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), starColumnPredicate);
        starColumnPredicate.values((Collection) arrayList2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", molapFilterInfo);
        Mockingbird.setReturnValue(hashMap.put(dimension, molapFilterInfo), null);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(1), column3);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension2, 1);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList4.size(), -1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure6);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure7);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, null), molapExecutor2);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList5);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure8);
        Mockingbird.setReturnValue(measure8.getCopy(), measure9);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure10);
        Mockingbird.setReturnValue(measure10.getCopy(), measure11);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, molapExecutor2, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(aggQuerySpec);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
        assertInvocationCount(expression, "getTableAlias", 1);
        assertInvocationCount(list, "add", 4);
        assertInvocationCount(molapExecutor2, "executeTableCount", 1);
        assertInvocationCount(molapExecutor, "execute", 1);
    }
    
    public void testExecuteWithAggressiveMocks1() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        AggQuerySpec aggQuerySpec = (AggQuerySpec) Mockingbird.getProxyObject(AggQuerySpec.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        AggStar.FactTable.Measure measure = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        AggStar.FactTable.Measure measure2 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        AggStar.FactTable.Measure measure3 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        AggStar.Table.Column column = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        AggStar.Table.Column column3 = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor2 = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure10 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure11 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar2, "cubeName", "");
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure2, "expression", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(measure2, "name", "");
        setPrivateField(measure3, "expression", null);
        setPrivateField(column, "expression", column2);
        column2.name = "";
        Mockingbird.enterNormalMode();
        dimension.setDataType(null);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(column3, "expression", column4);
        column4.name = "";
        dimension2.setDataType(null);
        setPrivateField(measure6, "dataType", null);
        setPrivateField(measure7, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        measure8.setAggName("count");
        measure10.setAggName("count");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure);
        Mockingbird.setReturnValue(false, expression, "getTableAlias", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, molapExecutor, "executeTableCount", "(java.lang.String)long", new Long(1L), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(0), column);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(list2.add(dimension), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), starColumnPredicate);
        starColumnPredicate.values((Collection) arrayList2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", molapFilterInfo);
        Mockingbird.setReturnValue(hashMap.put(dimension, molapFilterInfo), null);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(1), column3);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension2, 1);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList4.size(), -1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure6);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure7);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, null), molapExecutor2);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList5);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure8);
        Mockingbird.setReturnValue(measure8.getCopy(), measure9);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure10);
        Mockingbird.setReturnValue(measure10.getCopy(), measure11);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, molapExecutor2, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(aggQuerySpec);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
        assertInvocationCount(molapExecutor, "execute", 1);
        assertInvocationCount(molapExecutor2, "executeTableCount", 1);
        assertInvocationCount(list, "add", 4);
        assertInvocationCount(expression, "getTableAlias", 1);
    }
    
    public void testExecuteWithAggressiveMocks2() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        AggQuerySpec aggQuerySpec = (AggQuerySpec) Mockingbird.getProxyObject(AggQuerySpec.class);
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        AggStar.FactTable.Measure measure = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        AggStar.FactTable.Measure measure2 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        AggStar.FactTable.Measure measure3 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        AggStar.Table.Column column = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        AggStar.Table.Column column3 = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor2 = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar2, "cubeName", "");
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure2, "expression", expression2);
        setPrivateField(measure2, "name", "");
        setPrivateField(measure3, "expression", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(measure3, "name", "");
        setPrivateField(column, "expression", column2);
        column2.name = "";
        dimension.setDataType(null);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(column3, "expression", column4);
        column4.name = "";
        dimension2.setDataType(null);
        setPrivateField(measure4, "dataType", null);
        setPrivateField(measure5, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        measure6.setAggName("count");
        measure8.setAggName("count");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure);
        Mockingbird.setReturnValue(false, expression, "getTableAlias", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, molapExecutor, "executeTableCount", "(java.lang.String)long", new Long(0L), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(0), column);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(list2.add(dimension), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), starColumnPredicate);
        starColumnPredicate.values((Collection) arrayList2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList3);
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList3.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", molapFilterInfo);
        Mockingbird.setReturnValue(hashMap.put(dimension, molapFilterInfo), null);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(1), column3);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension2, 1);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList4.size(), -1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure4);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), measure5);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, null), molapExecutor2);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList5);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure6);
        Mockingbird.setReturnValue(measure6.getCopy(), measure7);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure8);
        Mockingbird.setReturnValue(measure8.getCopy(), measure9);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, molapExecutor2, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(aggQuerySpec);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
        assertInvocationCount(molapExecutor2, "executeTableCount", 1);
        assertInvocationCount(expression, "getTableAlias", 1);
        assertInvocationCount(list, "add", 4);
        assertInvocationCount(molapExecutor, "execute", 1);
    }
    
    public void testExecuteWithAggressiveMocks3() throws Throwable {
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        AggQuerySpec aggQuerySpec = (AggQuerySpec) Mockingbird.getProxyObject(AggQuerySpec.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        AggStar.FactTable.Measure measure = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        AggStar.FactTable.Measure measure2 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        AggStar.FactTable.Measure measure3 = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        AggStar.Table.Column column = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        LiteralStarPredicate literalStarPredicate = (LiteralStarPredicate) Mockingbird.getProxyObject(LiteralStarPredicate.class);
        AggStar.Table.Column column3 = (AggStar.Table.Column) Mockingbird.getProxyObject(AggStar.Table.Column.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor2 = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure9 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar2, "cubeName", "");
        Mockingbird.enterNormalMode();
        cube.setFactTableName("");
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure2, "expression", expression2);
        setPrivateField(measure2, "name", "");
        setPrivateField(measure3, "expression", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(measure3, "name", "");
        setPrivateField(column, "expression", column2);
        column2.name = "";
        dimension.setDataType(null);
        setPrivateField(column3, "expression", column4);
        column4.name = "";
        dimension2.setDataType(null);
        setPrivateField(measure4, "dataType", null);
        setPrivateField(measure5, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        measure6.setAggName("count");
        measure8.setAggName("count");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure);
        Mockingbird.setReturnValue(false, expression, "getTableAlias", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(false, molapExecutor, "executeTableCount", "(java.lang.String)long", new Long(0L), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure2);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", null, 1);
        Mockingbird.setReturnValue(arrayList.add((Object) null), false);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(0), column);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(list2.add(dimension), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(0), literalStarPredicate);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 2);
        Mockingbird.setReturnValue(aggQuerySpec.getColumn(1), column3);
        Mockingbird.setReturnValue(false, cube, "getAggDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension2, 1);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), null);
        Mockingbird.setReturnValue(aggQuerySpec.getPredicate(1), starColumnPredicate);
        starColumnPredicate.values((Collection) arrayList2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.size(), -1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getColumnCount(), 1);
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure4);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure5);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(MolapExecutorFactory.getMolapExecutor(null, null), molapExecutor2);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList3);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure6);
        Mockingbird.setReturnValue(measure6.getCopy(), measure7);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure8);
        Mockingbird.setReturnValue(measure8.getCopy(), measure9);
        Mockingbird.setReturnValue(false, arrayList3, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(false, molapExecutor2, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(aggQuerySpec);
        assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
        assertInvocationCount(expression, "getTableAlias", 1);
        assertInvocationCount(molapExecutor2, "executeTableCount", 1);
        assertInvocationCount(molapExecutor, "execute", 1);
        assertInvocationCount(list, "add", 4);
    }
    
    public void testExecuteWithAggressiveMocks4() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapStatement.class, "LOGGER");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        AggQuerySpec aggQuerySpec = (AggQuerySpec) Mockingbird.getProxyObject(AggQuerySpec.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        AggStar.FactTable.Measure measure = (AggStar.FactTable.Measure) Mockingbird.getProxyObject(AggStar.FactTable.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(molapStatement, "dataSource", null);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar2, "cubeName", "");
        setPrivateField(measure, "expression", expression);
        setPrivateField(MolapStatement.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(aggQuerySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(aggQuerySpec.getMeasureAsColumn(0), measure);
        Mockingbird.setReturnValue(false, expression, "getTableAlias", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setException(false, molapExecutor, "executeTableCount", "(java.lang.String)long", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(aggQuerySpec);
        assertNotNull("molapStatementMolapStatement.LOGGER", getPrivateField(MolapStatement.class, "LOGGER"));
        assertNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertNull("molapStatement.getIterator()", molapStatement.getIterator());
        assertNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
    }
    
    public void testExecuteWithAggressiveMocks5() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(RolapUtil.class, "sqlNullValue");
        storeStaticField(MolapStatement.class, "LOGGER");
        storeStaticField(MolapStatement.class, "d");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        QuerySpec querySpec = (QuerySpec) Mockingbird.getProxyObject(QuerySpec.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        RolapStar rolapStar2 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar rolapStar3 = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension4 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        StarColumnPredicate starColumnPredicate3 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate4 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        RolapStar.Measure measure3 = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        Object[] dimensions = new MolapMetadata.Dimension[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MolapMetadata.Dimension[] dimensions2 = new MolapMetadata.Dimension[0];
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure6 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure7 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure8 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        KeyGenException keyGenException = (KeyGenException) Mockingbird.getProxyObject(KeyGenException.class);
        setPrivateField(molapStatement, "types", list);
        setPrivateField(molapStatement, "dimensionsList", list2);
        setPrivateField(molapStatement, "dataSource", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(querySpec.getStar(), rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(rolapStar2, "schema", rolapSchema);
        setPrivateField(rolapStar3, "cubeName", "");
        setPrivateField(column, "expression", column3);
        column3.name = "";
        Mockingbird.enterNormalMode();
        dimension2.setDataType(null);
        setPrivateField(column2, "expression", column4);
        column4.name = "";
        dimension4.setDataType(null);
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure, "name", "");
        setPrivateField(measure2, "dataType", null);
        setPrivateField(measure3, "expression", expression2);
        setPrivateField(measure3, "name", "");
        setPrivateField(measure4, "dataType", null);
        setPrivateField(MolapStatement.class, "d", dimensions);
        setPrivateField(MolapStatement.class, "LOGGER", logService);
        measure5.setAggName("count");
        measure7.setAggName("count");
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(querySpec.getColumns(), columns);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(querySpec.getStar(), rolapStar2);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(querySpec.getStar(), rolapStar3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension, 1);
        Mockingbird.setReturnValue(dimension.getCopy(), dimension2);
        Mockingbird.setReturnValue(list2.add(dimension2), false);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(0), starColumnPredicate);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(0), null);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(0), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.setReturnValue(arrayList2.size(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(arrayList2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", Mockingbird.getProxyObject(MolapFilterInfo.class));
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, cube, "getDimension", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", dimension3, 1);
        Mockingbird.setReturnValue(dimension3.getCopy(), dimension4);
        Mockingbird.setReturnValue(list2.add(dimension4), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(1), starColumnPredicate3);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(1), null);
        Mockingbird.setReturnValue(querySpec.getColumnPredicate(1), starColumnPredicate4);
        starColumnPredicate4.values((Collection) arrayList3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList3.size(), 1);
        Mockingbird.setReturnValue(arrayList3.size(), 0);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList4);
        Mockingbird.setReturnValue(arrayList3.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), comparable);
        Mockingbird.setReturnValue(arrayList4.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), comparable);
        Mockingbird.setReturnValue(arrayList4.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList4, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(MolapFilterInfo.class, "<init>(java.util.List,java.util.List)", Mockingbird.getProxyObject(MolapFilterInfo.class));
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(querySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(querySpec.getMeasure(0), measure);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure2, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(measure2), false);
        Mockingbird.setReturnValue(querySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(querySpec.getMeasure(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure4, 1);
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(measure4), false);
        Mockingbird.setReturnValue(querySpec.getMeasureCount(), 1);
        Mockingbird.replaceObjectForRecording(MolapResultHolder.class, "<init>(java.util.List)", Mockingbird.getProxyObject(MolapResultHolder.class));
        Mockingbird.setReturnValue(false, cube, "getDimensions", "(java.lang.String)java.util.List", null, 1);
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        Mockingbird.setReturnValue(list2.toArray(dimensions), dimensions2);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList5);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.get(0), measure5);
        Mockingbird.setReturnValue(measure5.getCopy(), measure6);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 2);
        Mockingbird.setReturnValue(arrayList.get(1), measure7);
        Mockingbird.setReturnValue(measure7.getCopy(), measure8);
        Mockingbird.setReturnValue(false, arrayList5, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setException(false, molapExecutor, "execute", "(com.huawei.unibi.molap.metadata.MolapMetadata$Cube,com.huawei.unibi.molap.engine.util.MolapResultHolder,java.lang.String,com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[],java.util.List,java.util.Map,boolean)void", keyGenException, 1);
        Mockingbird.setReturnValue(false, keyGenException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(querySpec);
        assertNotNull("molapStatementMolapStatement.LOGGER", getPrivateField(MolapStatement.class, "LOGGER"));
        assertNull("molapStatement.getAccessors()", molapStatement.getAccessors());
        assertNotNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertFalse("molapStatement.getIterator().wasNull()", molapStatement.getIterator().wasNull());
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
        assertInvocationCount(list, "add", 4);
        assertInvocationCount(logService, "error", 1);
        assertInvocationCount(molapExecutor, "execute", 1);
    }
    
    public void testExecuteWithAggressiveMocks6() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapStatement.class, "LOGGER");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        Level[] levels = new Level[0];
        AggStar aggStar = (AggStar) Mockingbird.getProxyObject(AggStar.class);
        AggStar.FactTable factTable = (AggStar.FactTable) Mockingbird.getProxyObject(AggStar.FactTable.class);
        RolapLevel[] rolapLevels = new RolapLevel[0];
        MolapExecutor molapExecutor = (MolapExecutor) Mockingbird.getProxyObject(MolapExecutor.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(molapStatement, "dataSource", null);
        setPrivateField(aggStar, "aggTable", factTable);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, MolapExecutorFactory.class, "getMolapExecutor", "(java.util.List,javax.sql.DataSource)com.huawei.unibi.molap.engine.executer.MolapExecutor", molapExecutor, 1);
        setPrivateField(factTable, "name", "");
        setPrivateField(MolapStatement.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setException(false, molapExecutor, "executeTableCount", "(java.lang.String)long", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.execute(null, "", levels, aggStar, false, null, rolapLevels);
        assertNotNull("molapStatementMolapStatement.LOGGER", getPrivateField(MolapStatement.class, "LOGGER"));
        assertNull("molapStatement.getAccessors()", molapStatement.getAccessors());
        assertNull("molapStatement.guessTypes()", molapStatement.guessTypes());
        assertNull("molapStatement.getIterator()", molapStatement.getIterator());
        assertNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
    }
    
    public void testGetAccessors() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, null, 0, -1);
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) molapStatement.getAccessors();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetConstrMapWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Level[] levels = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MondrianDef.Column column = new MondrianDef.Column();
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.size(), 0);
        setPrivateField(rolapLevel, "keyExp", column);
        column.name = "X";
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        dimension2.setColName("");
        dimension3.setColName("X");
        Mockingbird.enterRecordingMode();
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", hashMap);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), "X");
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dimension);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dimension2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), dimension3);
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(hashMap.put(dimension3, (Object) null), null);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapStatement.class);
        Map result = (Map) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getConstrMap", new Class[] {Map.class, Level[].class, List.class}, molapStatement, new Object[] {map, levels, list});
        assertNotNull("result", result);
    }
    
    public void testGetConstrMapWithAggressiveMocks1() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Level[] levels = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MondrianDef.Column column = new MondrianDef.Column();
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.size(), 0);
        setPrivateField(rolapLevel, "keyExp", column);
        column.name = "X";
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>(int)", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), "");
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapStatement.class);
        Map result = (Map) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getConstrMap", new Class[] {Map.class, Level[].class, List.class}, molapStatement, new Object[] {map, levels, null});
        assertNotNull("result", result);
    }
    
    public void testGetDimensionWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension3 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        dimension2.setColName("");
        dimension3.setColName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension3);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapMetadata.Dimension result = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getDimension", new Class[] {String.class, List.class}, molapStatement, new Object[] {"X", list});
        assertNull("result.getName()", result.getName());
    }
    
    public void testGetDimensionWithAggressiveMocks1() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        MolapMetadata.Dimension dimension2 = (MolapMetadata.Dimension) Mockingbird.getProxyObject(MolapMetadata.Dimension.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        dimension.setColName("");
        dimension2.setColName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), dimension2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapMetadata.Dimension result = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getDimension", new Class[] {String.class, List.class}, molapStatement, new Object[] {"X", list});
        assertNull("result", result);
    }
    
    public void testGetDimensionsList() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) molapStatement.getDimensionsList();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetIterator() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        MolapResultHolder iterator = new MolapResultHolder(new ArrayList(1000));
        molapStatement.updateIterator(iterator);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapResultHolder result = molapStatement.getIterator();
        assertSame("result", iterator, result);
    }
    
    public void testGetMeasureFromColWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MolapMetadata.Measure measure = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        setPrivateField(measure, "colName", "");
        setPrivateField(measure2, "colName", "");
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), measure2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapStatement.class);
        MolapMetadata.Measure result = (MolapMetadata.Measure) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getMeasureFromCol", new Class[] {String.class, String.class, List.class}, molapStatement, new Object[] {"X", "", list});
        assertNull("result", result);
    }
    
    public void testGetMolapQueryWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        DrillThroughQuerySpec drillThroughQuerySpec = (DrillThroughQuerySpec) Mockingbird.getProxyObject(DrillThroughQuerySpec.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate3 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate4 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        RolapStar.Measure measure3 = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(drillThroughQuerySpec, "star", rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar, "cubeName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(column, "expression", column3);
        column3.name = "";
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(column2, "expression", column4);
        column4.name = "";
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure, "name", "");
        setPrivateField(measure2, "colName", "");
        Mockingbird.enterNormalMode();
        measure2.setAggName("");
        setPrivateField(measure3, "expression", null);
        setPrivateField(measure5, "colName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumns(), columns);
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class);
        Mockingbird.replaceObjectForRecording(MolapSQLQuery.class, "<init>()", molapSQLQuery);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addTable", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), starColumnPredicate);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addFilter", "(java.lang.String,java.util.List)void", null, 1);
        molapSQLQuery.addColumn("");
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate3);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate4);
        starColumnPredicate4.values((Collection) arrayList3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(0), measure);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure2, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(molapSQLQuery.toString(), "");
        Mockingbird.enterTestMode(MolapStatement.class);
        String result = molapStatement.getMolapQuery(drillThroughQuerySpec);
        assertEquals("result", "", result);
    }
    
    public void testGetMolapQueryWithAggressiveMocks1() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        DrillThroughQuerySpec drillThroughQuerySpec = (DrillThroughQuerySpec) Mockingbird.getProxyObject(DrillThroughQuerySpec.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Comparable comparable = (Comparable) Mockingbird.getProxyObject(Comparable.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate3 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate4 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        RolapStar.Measure measure3 = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(drillThroughQuerySpec, "star", rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar, "cubeName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(column, "expression", column3);
        column3.name = "";
        setPrivateField(RolapUtil.class, "sqlNullValue", comparable);
        setPrivateField(column2, "expression", column4);
        column4.name = "";
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure, "name", "");
        setPrivateField(measure2, "colName", "");
        Mockingbird.enterNormalMode();
        measure2.setAggName("");
        setPrivateField(measure3, "expression", null);
        setPrivateField(measure5, "colName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumns(), columns);
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class);
        Mockingbird.replaceObjectForRecording(MolapSQLQuery.class, "<init>()", molapSQLQuery);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addTable", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), starColumnPredicate);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.size(), 1);
        Mockingbird.setReturnValue(arrayList.size(), 0);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), comparable);
        Mockingbird.setReturnValue(arrayList2.add("@NU#LL$!"), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addFilter", "(java.lang.String,java.util.List)void", null, 1);
        molapSQLQuery.addColumn("");
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate3);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate4);
        starColumnPredicate4.values((Collection) arrayList3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList3.size(), -1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(0), measure);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure2, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(molapSQLQuery.toString(), "");
        Mockingbird.enterTestMode(MolapStatement.class);
        String result = molapStatement.getMolapQuery(drillThroughQuerySpec);
        assertEquals("result", "", result);
    }
    
    public void testGetMolapQueryWithAggressiveMocks2() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        DrillThroughQuerySpec drillThroughQuerySpec = (DrillThroughQuerySpec) Mockingbird.getProxyObject(DrillThroughQuerySpec.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        MondrianDef.Column column4 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        RolapStar.Measure measure3 = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(drillThroughQuerySpec, "star", rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar, "cubeName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(column, "expression", column3);
        column3.name = "";
        setPrivateField(column2, "expression", column4);
        column4.name = "";
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure, "name", "");
        setPrivateField(measure2, "colName", "");
        Mockingbird.enterNormalMode();
        measure2.setAggName("");
        setPrivateField(measure3, "expression", null);
        setPrivateField(measure5, "colName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumns(), columns);
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class);
        Mockingbird.replaceObjectForRecording(MolapSQLQuery.class, "<init>()", molapSQLQuery);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addTable", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(molapMetadata.getCube(""), cube);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), null);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate2);
        starColumnPredicate2.values((Collection) arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.size(), -1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(0), measure);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure2, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(molapSQLQuery.toString(), "");
        Mockingbird.enterTestMode(MolapStatement.class);
        String result = molapStatement.getMolapQuery(drillThroughQuerySpec);
        assertEquals("result", "", result);
    }
    
    public void testGetMolapQueryWithAggressiveMocks3() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        DrillThroughQuerySpec drillThroughQuerySpec = (DrillThroughQuerySpec) Mockingbird.getProxyObject(DrillThroughQuerySpec.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        RolapStar.Table table = (RolapStar.Table) Mockingbird.getProxyObject(RolapStar.Table.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapStar.Column[] columns = new RolapStar.Column[2];
        RolapStar.Column column = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        RolapStar.Column column2 = (RolapStar.Column) Mockingbird.getProxyObject(RolapStar.Column.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata.Cube cube = (MolapMetadata.Cube) Mockingbird.getProxyObject(MolapMetadata.Cube.class);
        MondrianDef.Column column3 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        LiteralStarPredicate literalStarPredicate = (LiteralStarPredicate) Mockingbird.getProxyObject(LiteralStarPredicate.class);
        MondrianDef.Column column4 = new MondrianDef.Column();
        StarColumnPredicate starColumnPredicate2 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        StarColumnPredicate starColumnPredicate3 = (StarColumnPredicate) Mockingbird.getProxyObject(StarColumnPredicate.class);
        RolapStar.Measure measure = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MolapMetadata.Measure measure2 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        RolapStar.Measure measure3 = (RolapStar.Measure) Mockingbird.getProxyObject(RolapStar.Measure.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata.Measure measure4 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        MolapMetadata.Measure measure5 = (MolapMetadata.Measure) Mockingbird.getProxyObject(MolapMetadata.Measure.class);
        setPrivateField(drillThroughQuerySpec, "star", rolapStar);
        setPrivateField(rolapStar, "factTable", table);
        setPrivateField(rolapStar, "schema", rolapSchema);
        setPrivateField(rolapStar, "cubeName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, table, "getTableName", "()java.lang.String", "", 1);
        columns[0] = column;
        columns[1] = column2;
        setPrivateField(column, "expression", column3);
        column3.name = "";
        setPrivateField(column2, "expression", column4);
        column4.name = "";
        setPrivateField(measure, "expression", expression);
        setPrivateField(measure, "name", "");
        setPrivateField(measure2, "colName", "");
        Mockingbird.enterNormalMode();
        measure2.setAggName("");
        setPrivateField(measure3, "expression", null);
        setPrivateField(measure5, "colName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumns(), columns);
        MolapSQLQuery molapSQLQuery = (MolapSQLQuery) Mockingbird.getProxyObject(MolapSQLQuery.class);
        Mockingbird.replaceObjectForRecording(MolapSQLQuery.class, "<init>()", molapSQLQuery);
        molapSQLQuery.addTable("");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, rolapSchema, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, molapMetadata, "getCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", cube, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), starColumnPredicate);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(0), literalStarPredicate);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addColumn", "(java.lang.String)void", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate2);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), null);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getColumnPredicate(1), starColumnPredicate3);
        starColumnPredicate3.values((Collection) arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(arrayList.size(), -1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(0), measure);
        Mockingbird.setReturnValue(false, cube, "getMeasure", "(java.lang.String,java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Measure", measure2, 1);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 2);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasure(1), measure3);
        Mockingbird.setReturnValue(false, cube, "getMeasures", "(java.lang.String)java.util.List", list, 1);
        Mockingbird.setReturnValue(list.get(0), measure4);
        Mockingbird.setReturnValue(measure4.getCopy(), measure5);
        Mockingbird.setReturnValue(false, molapSQLQuery, "addAggColumn", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(drillThroughQuerySpec.getMeasureCount(), 1);
        Mockingbird.setReturnValue(molapSQLQuery.toString(), "");
        Mockingbird.enterTestMode(MolapStatement.class);
        String result = molapStatement.getMolapQuery(drillThroughQuerySpec);
        assertEquals("result", "", result);
    }
    
    public void testGetSortedDimensionsList() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) molapStatement.getSortedDimensionsList();
        assertEquals("result.size()", 0, result.size());
        assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
    }
    
    public void testGetSortedDimensionsListWithAggressiveMocks() throws Throwable {
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(molapStatement, "dimensionsList", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 0);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(int)", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement$DimensionComparatorSchemaBased"), "<init>(com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement)", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {arrayList, comparator}, null, 1);
        Mockingbird.enterTestMode(MolapStatement.class);
        List result = molapStatement.getSortedDimensionsList();
        assertNotNull("result", result);
        assertNotNull("molapStatement.getDimensionsList()", molapStatement.getDimensionsList());
    }
    
    public void testGetUpdatedMeasureFor() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMolapStatementColName", 100, "count", "testMolapStatementAggClassName", "testMolapStatementName", SqlStatement.Type.OBJECT, new MolapMetadata.Cube("testMolapStatementName"));
        List arrayList = new ArrayList(1000);
        boolean add = arrayList.add((Object) null);
        arrayList.set(0, measure);
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getUpdatedMeasureFor", new Class[] {List.class, boolean.class}, molapStatement, new Object[] {arrayList, Boolean.valueOf(add)});
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testGetUpdatedMeasureFor1() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        MolapMetadata.Measure measure = new MolapMetadata.Measure("testMolapStatementColName", 100, "testMolapStatementAggName", "testMolapStatementAggClassName", "testMolapStatementName", SqlStatement.Type.STRING, new MolapMetadata.Cube("testMolapStatementName"));
        List arrayList = new ArrayList(1000);
        boolean add = arrayList.add((Object) null);
        arrayList.set(0, measure);
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getUpdatedMeasureFor", new Class[] {List.class, boolean.class}, molapStatement, new Object[] {arrayList, Boolean.valueOf(add)});
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", measure, ((List) result).get(0));
    }
    
    public void testGetintArray() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        List arrayList = new ArrayList(100);
        arrayList.add(new Integer(0));
        Mockingbird.enterTestMode(MolapStatement.class);
        int[] result = (int[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getintArray", new Class[] {List.class}, molapStatement, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertEquals("(int[]) result[0]", 0, ((int[]) result)[0]);
    }
    
    public void testGetintArray1() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        List arrayList = new ArrayList(100);
        Mockingbird.enterTestMode(MolapStatement.class);
        int[] result = (int[]) callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getintArray", new Class[] {List.class}, molapStatement, new Object[] {arrayList});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGuessTypes() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        Mockingbird.enterTestMode(MolapStatement.class);
        ArrayList result = (ArrayList) molapStatement.guessTypes();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testHasOrdinalColumnWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapStatement.class, "assignOrderKeys");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        MondrianDef.Expression expression2 = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        setPrivateField(rolapLevel, "ordinalExp", expression);
        setPrivateField(rolapLevel, "keyExp", expression2);
        setPrivateField(MolapStatement.class, "assignOrderKeys", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(expression.equals(expression2), false);
        Mockingbird.enterTestMode(MolapStatement.class);
        boolean result = molapStatement.hasOrdinalColumn(rolapLevel);
        assertTrue("result", result);
    }
    
    public void testHasOrdinalColumnWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapStatement.class, "assignOrderKeys");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        setPrivateField(MolapStatement.class, "assignOrderKeys", Boolean.FALSE);
        Mockingbird.enterTestMode(MolapStatement.class);
        boolean result = molapStatement.hasOrdinalColumn(null);
        assertFalse("result", result);
    }
    
    public void testHasOrdinalColumnWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapStatement.class, "assignOrderKeys");
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class, true);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        setPrivateField(rolapLevel, "ordinalExp", expression);
        setPrivateField(rolapLevel, "keyExp", expression);
        setPrivateField(MolapStatement.class, "assignOrderKeys", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(expression.equals(expression), true);
        Mockingbird.enterTestMode(MolapStatement.class);
        boolean result = molapStatement.hasOrdinalColumn(rolapLevel);
        assertFalse("result", result);
    }
    
    public void testUpdateIterator() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        MolapResultHolder iterator = new MolapResultHolder(new ArrayList(1000));
        Mockingbird.enterTestMode(MolapStatement.class);
        molapStatement.updateIterator(iterator);
        assertSame("molapStatement.getIterator()", iterator, molapStatement.getIterator());
    }
    
    public void testExecuteQueryThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(MolapStatement.class);
        try {
            molapStatement.executeQuery("testMolapStatementQuery");
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
            assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
            assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
            assertNull("molapStatement.getIterator()", molapStatement.getIterator());
            assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
        }
    }
    
    public void testExecuteQueryThrowsNullPointerException() throws Throwable {
        MolapStatement molapStatement = new MolapStatement(null);
        try {
            molapStatement.executeQuery(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSQLQuery.class, ex);
            assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
            assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
            assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
            assertNull("molapStatement.getIterator()", molapStatement.getIterator());
            assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
        }
    }
    
    public void testExecuteQueryThrowsStringIndexOutOfBoundsException() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        Mockingbird.enterTestMode(MolapStatement.class);
        try {
            molapStatement.executeQuery("");
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -7", ex.getMessage());
            assertThrownBy(String.class, ex);
            assertTrue("molapStatementMolapStatement.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(MolapStatement.class, "LOGGER")).isDebugEnabled());
            assertEquals("molapStatement.getAccessors().size()", 0, molapStatement.getAccessors().size());
            assertEquals("molapStatement.guessTypes().size()", 0, molapStatement.guessTypes().size());
            assertNull("molapStatement.getIterator()", molapStatement.getIterator());
            assertEquals("molapStatement.getDimensionsList().size()", 0, molapStatement.getDimensionsList().size());
        }
    }
    
    public void testGetUpdatedMeasureForThrowsNullPointerException() throws Throwable {
        Locus locus = new Locus(Execution.NONE, "testMolapStatementComponent", "testMolapStatementMessage");
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class), "testMolapStatementSql", new ArrayList(100), 100, 1000, locus, 0, -1);
        List arrayList = new ArrayList(1000);
        boolean add = arrayList.add((Object) null);
        Mockingbird.enterTestMode(MolapStatement.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getUpdatedMeasureFor", new Class[] {List.class, boolean.class}, molapStatement, new Object[] {arrayList, Boolean.valueOf(add)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapStatement.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testGetintArrayThrowsNullPointerException() throws Throwable {
        MolapStatement molapStatement = new MolapStatement((DataSource) Mockingbird.getProxyObject(DataSource.class));
        Mockingbird.enterTestMode(MolapStatement.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement", "getintArray", new Class[] {List.class}, molapStatement, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapStatement.class, ex);
        }
    }
}

