/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:00 PM
 * Time to generate: 01:40.028 seconds
 *
 */

package com.huawei.unibi.molap.engine.mondrian.extensions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.mondrian.molap.MolapDataSource;
import com.huawei.unibi.mondrian.molap.OlapFactory;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Map;
import javax.sql.DataSource;
import mondrian.olap.Dimension;
import mondrian.olap.MondrianDef;
import mondrian.olap.MondrianException;
import mondrian.olap.Util;
import mondrian.resource.MondrianResource;
import mondrian.rolap.MemberReader;
import mondrian.rolap.NoCacheMemberReader;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapSchema;
import mondrian.rolap.SmartMemberReader;
import mondrian.rolap.aggmatcher.AggTableManager;
import org.apache.log4j.Logger;
import org.eigenbase.xom.XOMUtil;

public class MolapSchemaAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapSchema.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(RolapSchema.class);
        MolapSchema molapSchema = new MolapSchema("", "", null, null);
        assertNull("molapSchema.getSchemaLoadDate()", molapSchema.getSchemaLoadDate());
        assertEquals("molapSchema.mapNameToSet.size()", 0, ((Map) getPrivateField(molapSchema, "mapNameToSet")).size());
        assertNull("molapSchema.name", getPrivateField(molapSchema, "name"));
        assertEquals("molapSchema.key", "", getPrivateField(molapSchema, "key"));
        assertEquals("molapSchema.getWarnings().size()", 0, molapSchema.getWarnings().size());
        assertNull("molapSchema.relationExprCardinalityMap", getPrivateField(molapSchema, "relationExprCardinalityMap"));
        assertNull("molapSchema.getInternalConnection()", molapSchema.getInternalConnection());
        assertNull("molapSchema.mapNameToCube", getPrivateField(molapSchema, "mapNameToCube"));
        assertEquals("molapSchemaRolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
        assertEquals("molapSchema.getParameters().length", 0, molapSchema.getParameters().length);
        assertEquals("molapSchemaRolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
        assertNull("molapSchema.getChecksum()", molapSchema.getChecksum());
        assertNull("molapSchema.getFunTable()", molapSchema.getFunTable());
        assertEquals("molapSchemaRolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
        assertEquals("molapSchemaRolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
        assertNull("molapSchema.aggTableManager", getPrivateField(molapSchema, "aggTableManager"));
        assertNull("molapSchema.mapNameToRole", getPrivateField(molapSchema, "mapNameToRole"));
        assertNull("molapSchema.getXMLSchema()", molapSchema.getXMLSchema());
        assertNull("molapSchema.getAnnotationMap()", molapSchema.getAnnotationMap());
        assertNotNull("molapSchema.defaultRole", getPrivateField(molapSchema, "defaultRole"));
        assertNull("molapSchema.getDataSourceChangeListener()", molapSchema.getDataSourceChangeListener());
        assertNotNull("molapSchemaRolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
        assertEquals("molapSchemaRolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        assertNotNull("molapSchema.getRolapStarRegistry()", (Object) molapSchema.getRolapStarRegistry());
        assertNull("molapSchema.mapSharedHierarchyToReader", getPrivateField(molapSchema, "mapSharedHierarchyToReader"));
        assertNotNull("molapSchema.nativeRegistry", getPrivateField(molapSchema, "nativeRegistry"));
        assertNull("molapSchema.mapSharedHierarchyNameToHierarchy", getPrivateField(molapSchema, "mapSharedHierarchyNameToHierarchy"));
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testConstructor1() throws Throwable {
        Mockingbird.ignoreConstructorExceptions(RolapSchema.class);
        MolapSchema molapSchema = new MolapSchema("", "", "", "", null, null);
        assertNull("molapSchema.getSchemaLoadDate()", molapSchema.getSchemaLoadDate());
        assertEquals("molapSchema.mapNameToSet.size()", 0, ((Map) getPrivateField(molapSchema, "mapNameToSet")).size());
        assertNull("molapSchema.name", getPrivateField(molapSchema, "name"));
        assertEquals("molapSchema.key", "", getPrivateField(molapSchema, "key"));
        assertEquals("molapSchema.getWarnings().size()", 0, molapSchema.getWarnings().size());
        assertNull("molapSchema.relationExprCardinalityMap", getPrivateField(molapSchema, "relationExprCardinalityMap"));
        assertNull("molapSchema.getInternalConnection()", molapSchema.getInternalConnection());
        assertNull("molapSchema.mapNameToCube", getPrivateField(molapSchema, "mapNameToCube"));
        assertEquals("molapSchemaRolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
        assertEquals("molapSchema.getParameters().length", 0, molapSchema.getParameters().length);
        assertEquals("molapSchemaRolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
        assertEquals("molapSchema.getChecksum()", "", molapSchema.getChecksum());
        assertNull("molapSchema.getFunTable()", molapSchema.getFunTable());
        assertEquals("molapSchemaRolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
        assertEquals("molapSchemaRolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
        assertNull("molapSchema.aggTableManager", getPrivateField(molapSchema, "aggTableManager"));
        assertNull("molapSchema.mapNameToRole", getPrivateField(molapSchema, "mapNameToRole"));
        assertNull("molapSchema.getXMLSchema()", molapSchema.getXMLSchema());
        assertNull("molapSchema.getAnnotationMap()", molapSchema.getAnnotationMap());
        assertNotNull("molapSchema.defaultRole", getPrivateField(molapSchema, "defaultRole"));
        assertNull("molapSchema.getDataSourceChangeListener()", molapSchema.getDataSourceChangeListener());
        assertNotNull("molapSchemaRolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
        assertEquals("molapSchemaRolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        assertNotNull("molapSchema.getRolapStarRegistry()", (Object) molapSchema.getRolapStarRegistry());
        assertNull("molapSchema.mapSharedHierarchyToReader", getPrivateField(molapSchema, "mapSharedHierarchyToReader"));
        assertNotNull("molapSchema.nativeRegistry", getPrivateField(molapSchema, "nativeRegistry"));
        assertNull("molapSchema.mapSharedHierarchyNameToHierarchy", getPrivateField(molapSchema, "mapSharedHierarchyNameToHierarchy"));
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testAddCubeWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapSchema.class, "LOGGER");
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        setPrivateField(molapSchema, "mapNameToCube", map);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapCube, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Util.class, "normalizeName", "(java.lang.String)java.lang.String", "", 1);
        setPrivateField(MolapSchema.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findCache", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "clearCache", "(java.lang.String)void", null, 1);
        inMemoryCubeStore.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSchema.class);
        molapSchema.addCube(rolapCube);
        assertNotNull("molapSchema.mapNameToCube", getPrivateField(molapSchema, "mapNameToCube"));
        assertNotNull("molapSchemaMolapSchema.LOGGER", getPrivateField(MolapSchema.class, "LOGGER"));
    }
    
    public void testAddCubeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapSchema.class, "LOGGER");
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(molapSchema, "mapNameToCube", map);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapCube, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Util.class, "normalizeName", "(java.lang.String)java.lang.String", "", 1);
        setPrivateField(MolapSchema.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(MolapSchema.class);
        molapSchema.addCube(rolapCube);
        assertNotNull("molapSchema.mapNameToCube", getPrivateField(molapSchema, "mapNameToCube"));
        assertNotNull("molapSchemaMolapSchema.LOGGER", getPrivateField(MolapSchema.class, "LOGGER"));
    }
    
    public void testAddCubeWithAggressiveMocks2() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapSchema.class, "LOGGER");
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class);
        setPrivateField(molapSchema, "mapNameToCube", map);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapCube, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Util.class, "normalizeName", "(java.lang.String)java.lang.String", "", 1);
        setPrivateField(MolapSchema.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        setPrivateField(InMemoryCubeStore.class, "instance", inMemoryCubeStore);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findCache", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(MolapSchema.class);
        molapSchema.addCube(rolapCube);
        assertNotNull("molapSchema.mapNameToCube", getPrivateField(molapSchema, "mapNameToCube"));
        assertNotNull("molapSchemaMolapSchema.LOGGER", getPrivateField(MolapSchema.class, "LOGGER"));
    }
    
    public void testCreateMemberReaderWithAggressiveMocks() throws Throwable {
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapDataSource, "getMemberSource", "(mondrian.rolap.RolapHierarchy)mondrian.rolap.SqlMemberSource", null, 1);
        Mockingbird.setReturnValue(false, molapDataSource, "isEnableCache", "()boolean", Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(NoCacheMemberReader.class, "<init>(mondrian.rolap.MemberReader)", Mockingbird.getProxyObject(NoCacheMemberReader.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        MemberReader result = molapSchema.createMemberReader(null, null);
        assertNotNull("result", result);
    }
    
    public void testCreateMemberReaderWithAggressiveMocks1() throws Throwable {
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapHierarchy, "dimension", dimension);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapDataSource, "getMemberSource", "(mondrian.rolap.RolapHierarchy)mondrian.rolap.SqlMemberSource", null, 1);
        Mockingbird.setReturnValue(false, molapDataSource, "isEnableCache", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(dimension.isHighCardinality(), true);
        Mockingbird.replaceObjectForRecording(NoCacheMemberReader.class, "<init>(mondrian.rolap.MemberReader)", Mockingbird.getProxyObject(NoCacheMemberReader.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        MemberReader result = molapSchema.createMemberReader(rolapHierarchy, null);
        assertNotNull("result", result);
    }
    
    public void testCreateMemberReaderWithAggressiveMocks2() throws Throwable {
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapHierarchy, "dimension", dimension);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapDataSource, "getMemberSource", "(mondrian.rolap.RolapHierarchy)mondrian.rolap.SqlMemberSource", null, 1);
        Mockingbird.setReturnValue(false, molapDataSource, "isEnableCache", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(dimension.isHighCardinality(), false);
        Mockingbird.replaceObjectForRecording(SmartMemberReader.class, "<init>(mondrian.rolap.MemberReader)", Mockingbird.getProxyObject(SmartMemberReader.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        MemberReader result = molapSchema.createMemberReader(rolapHierarchy, null);
        assertNotNull("result", result);
    }
    
    public void testCreateMemberReaderWithAggressiveMocks3() throws Throwable {
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, molapSchema, "getMemberReaderFromStr", "(mondrian.rolap.RolapHierarchy,java.lang.String)mondrian.rolap.MemberReader", null, 1);
        Mockingbird.enterTestMode(MolapSchema.class);
        MemberReader result = molapSchema.createMemberReader(null, "");
        assertNull("result", result);
    }
    
    public void testLoadWithAggressiveMocks() throws Throwable {
        MolapSchema molapSchema = (MolapSchema) Mockingbird.getProxyObject(MolapSchema.class, true);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        AggTableManager aggTableManager = (AggTableManager) Mockingbird.getProxyObject(AggTableManager.class);
        Logger logger = (Logger) Mockingbird.getProxyObject(Logger.class);
        Logger logger2 = (Logger) Mockingbird.getProxyObject(Logger.class);
        MolapDataSource molapDataSource = (MolapDataSource) Mockingbird.getProxyObject(MolapDataSource.class);
        setPrivateField(molapSchema, "mapNameToCube", null);
        setPrivateField(molapSchema, "internalConnection", rolapConnection);
        setPrivateField(molapSchema, "aggTableManager", aggTableManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(XOMUtil.createDefaultParser(), null);
        setPrivateField(rolapConnection, "dataSource", molapDataSource);
        Mockingbird.setReturnValue(false, molapSchema, "getDomWrapper", "(java.lang.String,java.lang.String,org.eigenbase.xom.Parser)org.eigenbase.xom.DOMWrapper", null, 1);
        MondrianDef.Schema schema = new MondrianDef.Schema();
        Mockingbird.replaceObjectForRecording(MondrianDef.Schema.class, "<init>(org.eigenbase.xom.DOMWrapper)", schema);
        Logger logger3 = (Logger) callPrivateMethod("mondrian.rolap.RolapSchema", "getLogger", new Class[] {}, molapSchema, new Object[] {});
        Mockingbird.setReturnValue(logger3, logger);
        Mockingbird.setReturnValue(logger.isDebugEnabled(), true);
        StringWriter stringWriter = (StringWriter) Mockingbird.getProxyObject(StringWriter.class);
        Mockingbird.replaceObjectForRecording(StringWriter.class, "<init>(int)", stringWriter);
        PrintWriter printWriter = (PrintWriter) Mockingbird.getProxyObject(PrintWriter.class);
        Mockingbird.replaceObjectForRecording(PrintWriter.class, "<init>(java.io.Writer)", printWriter);
        Mockingbird.setReturnValue(false, printWriter, "println", "(java.lang.String)void", new Object[] {"RolapSchema.load: dump xmlschema"}, null, 1);
        schema.display(printWriter, 2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, printWriter, "flush", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RolapSchema.class), "getLogger", "()org.apache.log4j.Logger", logger2, 1);
        Mockingbird.setReturnValue(false, stringWriter, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logger2, "debug", "(java.lang.Object)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RolapSchema.class), "load", "(mondrian.olap.MondrianDef$Schema)void", null, 1);
        Mockingbird.setReturnValue(false, aggTableManager, "initialize", "()void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RolapSchema.class), "setSchemaLoadDate", "()void", null, 1);
        Mockingbird.setReturnValue(false, molapDataSource, "loadCubes", "(java.util.Map)void", null, 1);
        Mockingbird.enterTestMode(MolapSchema.class);
        molapSchema.load("", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        Util.PropertyList connectInfo = new Util.PropertyList();
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, OlapFactory.getOlapConnection(null, connectInfo, null, dataSource), (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaCatalogUrl", connectInfo, dataSource);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Util.PropertyList connectInfo = Util.parseConnectString("testMolapSchemas");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, OlapFactory.getOlapConnection(null, connectInfo, null, dataSource), (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaMd5Bytes", "testMolapSchemaCatalogUrl", "testMolapSchemaCatalogStr", connectInfo, dataSource);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
    
    public void testConstructorThrowsMondrianException() throws Throwable {
        Util.PropertyList connectInfo = new Util.PropertyList();
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaCatalogUrl", connectInfo, null);
            fail("Expected MondrianException to be thrown");
        } catch (MondrianException ex) {
            assertEquals("ex.getMessage()", "Mondrian Error:Internal error: Connect string '' must contain either 'Jdbc' or 'DataSource'", ex.getMessage());
            assertThrownBy(MondrianResource._Def0.class, ex);
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
    
    public void testConstructorThrowsMondrianException1() throws Throwable {
        Util.PropertyList connectInfo = new Util.PropertyList();
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaMd5Bytes", "testMolapSchemaCatalogUrl", "testMolapSchemaCatalogStr", connectInfo, null);
            fail("Expected MondrianException to be thrown");
        } catch (MondrianException ex) {
            assertEquals("ex.getMessage()", "Mondrian Error:Internal error: Connect string '' must contain either 'Jdbc' or 'DataSource'", ex.getMessage());
            assertThrownBy(MondrianResource._Def0.class, ex);
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        Util.PropertyList connectInfo = new Util.PropertyList();
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, OlapFactory.getOlapConnection(null, connectInfo, null, dataSource), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaCatalogUrl", connectInfo, dataSource);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        Util.PropertyList connectInfo = new Util.PropertyList();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, OlapFactory.getOlapConnection(null, connectInfo, null, dataSource), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSchema.class);
        try {
            new MolapSchema("testMolapSchemaKey", "testMolapSchemaMd5Bytes", "testMolapSchemaCatalogUrl", "testMolapSchemaCatalogStr", connectInfo, dataSource);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("RolapSchema.hierarchyAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "hierarchyAllowed")).size());
            assertEquals("RolapSchema.schemaAllowed.size()", 4, ((Collection) getPrivateField(RolapSchema.class, "schemaAllowed")).size());
            assertEquals("RolapSchema.memberAllowed.size()", 2, ((Collection) getPrivateField(RolapSchema.class, "memberAllowed")).size());
            assertEquals("RolapSchema.cubeAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "cubeAllowed")).size());
            assertNotNull("RolapSchema.LOGGER", getPrivateField(RolapSchema.class, "LOGGER"));
            assertEquals("RolapSchema.dimensionAllowed.size()", 3, ((Collection) getPrivateField(RolapSchema.class, "dimensionAllowed")).size());
        }
    }
}

