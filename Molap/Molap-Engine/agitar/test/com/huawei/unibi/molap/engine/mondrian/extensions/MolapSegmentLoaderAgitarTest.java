/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:34 PM
 * Time to generate: 02:07.024 seconds
 *
 */

package com.huawei.unibi.molap.engine.mondrian.extensions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.util.MolapResultHolder;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Iterator;
import java.util.List;
import java.util.SortedSet;
import java.util.Stack;
import mondrian.olap.MondrianProperties;
import mondrian.olap.Util;
import mondrian.rolap.BitKey;
import mondrian.rolap.RolapStar;
import mondrian.rolap.RolapUtil;
import mondrian.rolap.SqlStatement;
import mondrian.rolap.agg.AggregationManager;
import mondrian.rolap.agg.GroupingSet;
import mondrian.rolap.agg.GroupingSetsList;
import mondrian.rolap.agg.SegmentLoader;
import mondrian.server.Execution;
import mondrian.server.Locus;
import org.apache.log4j.Logger;
import org.eigenbase.util.property.BooleanProperty;

public class MolapSegmentLoaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapSegmentLoader.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = new MolapSegmentLoader();
        assertNull("molapSegmentLoader.stmt", getPrivateField(molapSegmentLoader, "stmt"));
    }
    
    public void testCreateExecuteSqlWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        setPrivateField(molapSegmentLoader, "stmt", Mockingbird.getProxyObject(MolapStatement.class));
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        SqlStatement result = molapSegmentLoader.createExecuteSql(null, null);
        assertNull("result.getResultSet()", result.getResultSet());
    }
    
    public void testCreateExecuteSqlWithAggressiveMocks1() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        Locus locus = (Locus) Mockingbird.getProxyObject(Locus.class);
        setPrivateField(molapSegmentLoader, "stmt", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getStar(), rolapStar);
        Mockingbird.enterNormalMode();
        rolapStar.setDataSource(null);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(locus, "execution", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getDefaultLevelBitKey(), null);
        Mockingbird.setReturnValue(groupingSetsList.getDefaultMeasureBitKey(), null);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, booleanProperty, "get", "()boolean", Boolean.TRUE, 1);
        MolapSegmentArrayQuerySpec molapSegmentArrayQuerySpec = (MolapSegmentArrayQuerySpec) Mockingbird.getProxyObject(MolapSegmentArrayQuerySpec.class);
        Mockingbird.replaceObjectForRecording(MolapSegmentArrayQuerySpec.class, "<init>(mondrian.rolap.agg.GroupingSetsList,java.util.List)", molapSegmentArrayQuerySpec);
        Mockingbird.setReturnValue(Locus.peek(), locus);
        Mockingbird.replaceObjectForRecording(Locus.class, "<init>(mondrian.server.Execution,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locus.class));
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource,java.lang.String,java.util.List,int,int,mondrian.server.Locus,int,int)", molapStatement);
        molapStatement.execute(molapSegmentArrayQuerySpec);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        SqlStatement result = molapSegmentLoader.createExecuteSql(groupingSetsList, (List) list);
        assertNull("result.getResultSet()", result.getResultSet());
    }
    
    public void testCreateExecuteSqlWithAggressiveMocks2() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        AggregationManager aggregationManager = (AggregationManager) Mockingbird.getProxyObject(AggregationManager.class);
        Locus locus = (Locus) Mockingbird.getProxyObject(Locus.class);
        setPrivateField(molapSegmentLoader, "stmt", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getStar(), rolapStar);
        Mockingbird.enterNormalMode();
        rolapStar.setDataSource(null);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(locus, "execution", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getDefaultLevelBitKey(), null);
        Mockingbird.setReturnValue(groupingSetsList.getDefaultMeasureBitKey(), null);
        Mockingbird.setReturnValue(false, booleanProperty, "get", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(AggregationManager.instance(), aggregationManager);
        Mockingbird.setReturnValue(false, aggregationManager, "findAgg", "(mondrian.rolap.RolapStar,mondrian.rolap.BitKey,mondrian.rolap.BitKey,boolean[])mondrian.rolap.aggmatcher.AggStar", null, 1);
        MolapSegmentArrayQuerySpec molapSegmentArrayQuerySpec = (MolapSegmentArrayQuerySpec) Mockingbird.getProxyObject(MolapSegmentArrayQuerySpec.class);
        Mockingbird.replaceObjectForRecording(MolapSegmentArrayQuerySpec.class, "<init>(mondrian.rolap.agg.GroupingSetsList,java.util.List)", molapSegmentArrayQuerySpec);
        Mockingbird.setReturnValue(Locus.peek(), locus);
        Mockingbird.replaceObjectForRecording(Locus.class, "<init>(mondrian.server.Execution,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locus.class));
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource,java.lang.String,java.util.List,int,int,mondrian.server.Locus,int,int)", molapStatement);
        molapStatement.execute(molapSegmentArrayQuerySpec);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        SqlStatement result = molapSegmentLoader.createExecuteSql(groupingSetsList, null);
        assertNull("result.getResultSet()", result.getResultSet());
    }
    
    public void testCreateExecuteSqlWithAggressiveMocks3() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        AggregationManager aggregationManager = (AggregationManager) Mockingbird.getProxyObject(AggregationManager.class);
        Locus locus = (Locus) Mockingbird.getProxyObject(Locus.class);
        setPrivateField(molapSegmentLoader, "stmt", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getStar(), rolapStar);
        Mockingbird.enterNormalMode();
        rolapStar.setDataSource(null);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(locus, "execution", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getDefaultLevelBitKey(), null);
        Mockingbird.setReturnValue(groupingSetsList.getDefaultMeasureBitKey(), null);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(false, booleanProperty, "get", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(AggregationManager.instance(), aggregationManager);
        Mockingbird.setReturnValue(false, aggregationManager, "findAgg", "(mondrian.rolap.RolapStar,mondrian.rolap.BitKey,mondrian.rolap.BitKey,boolean[])mondrian.rolap.aggmatcher.AggStar", null, 1);
        MolapSegmentArrayQuerySpec molapSegmentArrayQuerySpec = (MolapSegmentArrayQuerySpec) Mockingbird.getProxyObject(MolapSegmentArrayQuerySpec.class);
        Mockingbird.replaceObjectForRecording(MolapSegmentArrayQuerySpec.class, "<init>(mondrian.rolap.agg.GroupingSetsList,java.util.List)", molapSegmentArrayQuerySpec);
        Mockingbird.setReturnValue(Locus.peek(), locus);
        Mockingbird.replaceObjectForRecording(Locus.class, "<init>(mondrian.server.Execution,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locus.class));
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource,java.lang.String,java.util.List,int,int,mondrian.server.Locus,int,int)", molapStatement);
        molapStatement.execute(molapSegmentArrayQuerySpec);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        SqlStatement result = molapSegmentLoader.createExecuteSql(groupingSetsList, (List) list);
        assertNull("result.getResultSet()", result.getResultSet());
    }
    
    public void testCreateExecuteSqlWithAggressiveMocks4() throws Throwable {
        storeStaticField(MondrianProperties.class, "instance");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RolapStar rolapStar = (RolapStar) Mockingbird.getProxyObject(RolapStar.class);
        MondrianProperties mondrianProperties = (MondrianProperties) Mockingbird.getProxyObject(MondrianProperties.class);
        BooleanProperty booleanProperty = (BooleanProperty) Mockingbird.getProxyObject(BooleanProperty.class);
        Locus locus = (Locus) Mockingbird.getProxyObject(Locus.class);
        setPrivateField(molapSegmentLoader, "stmt", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getStar(), rolapStar);
        Mockingbird.enterNormalMode();
        rolapStar.setDataSource(null);
        setPrivateField(MondrianProperties.class, "instance", mondrianProperties);
        setPrivateField(mondrianProperties, "UseAggregates", booleanProperty);
        setPrivateField(locus, "execution", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.getDefaultLevelBitKey(), null);
        Mockingbird.setReturnValue(groupingSetsList.getDefaultMeasureBitKey(), null);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(false, booleanProperty, "get", "()boolean", Boolean.FALSE, 1);
        MolapSegmentArrayQuerySpec molapSegmentArrayQuerySpec = (MolapSegmentArrayQuerySpec) Mockingbird.getProxyObject(MolapSegmentArrayQuerySpec.class);
        Mockingbird.replaceObjectForRecording(MolapSegmentArrayQuerySpec.class, "<init>(mondrian.rolap.agg.GroupingSetsList,java.util.List)", molapSegmentArrayQuerySpec);
        Mockingbird.setReturnValue(Locus.peek(), locus);
        Mockingbird.replaceObjectForRecording(Locus.class, "<init>(mondrian.server.Execution,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Locus.class));
        MolapStatement molapStatement = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        Mockingbird.replaceObjectForRecording(MolapStatement.class, "<init>(javax.sql.DataSource,java.lang.String,java.util.List,int,int,mondrian.server.Locus,int,int)", molapStatement);
        molapStatement.execute(molapSegmentArrayQuerySpec);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        SqlStatement result = molapSegmentLoader.createExecuteSql(groupingSetsList, (List) list);
        assertNull("result.getResultSet()", result.getResultSet());
    }
    
    public void testGetRollupBitKeyWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        BitKey bitKey = (BitKey) Mockingbird.getProxyObject(BitKey.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(BitKey.Factory.makeBitKey(2), bitKey);
        Mockingbird.setReturnValue(molapResultHolder.getObject(2), new Integer(1));
        bitKey.set(0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(molapResultHolder.getObject(3), new Integer(1));
        bitKey.set(1);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        BitKey result = molapSegmentLoader.getRollupBitKey(2, molapResultHolder, 1);
        assertNotNull("result", result);
    }
    
    public void testGetRollupBitKeyWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        BitKey bitKey = (BitKey) Mockingbird.getProxyObject(BitKey.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(BitKey.Factory.makeBitKey(2), bitKey);
        Mockingbird.setReturnValue(molapResultHolder.getObject(2), new Integer(0));
        Mockingbird.setReturnValue(molapResultHolder.getObject(3), new Integer(1));
        bitKey.set(1);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        BitKey result = molapSegmentLoader.getRollupBitKey(2, molapResultHolder, 1);
        assertNotNull("result", result);
    }
    
    public void testIsAggregateNullWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.findGroupingFunctionIndex(0), -1);
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        boolean result = molapSegmentLoader.isAggregateNull((MolapResultHolder) null, 0, groupingSetsList, 0);
        assertFalse("result", result);
    }
    
    public void testLoadWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Locus locus = (Locus) Mockingbird.getProxyObject(Locus.class);
        Execution execution = (Execution) Mockingbird.getProxyObject(Execution.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        GroupingSet groupingSet = (GroupingSet) Mockingbird.getProxyObject(GroupingSet.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        GroupingSet groupingSet2 = (GroupingSet) Mockingbird.getProxyObject(GroupingSet.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(Locus.peek(), locus);
        setPrivateField(locus, "execution", execution);
        setPrivateField(groupingSet, "segments", list2);
        setPrivateField(groupingSet2, "segments", list3);
        Mockingbird.setReturnValue(false, execution, "checkCancelOrTimeout", "()void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(SegmentLoader.class), "loadSegmentsFromCache", "(java.util.List,java.util.List,mondrian.rolap.RolapAggregationManager$PinSet)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(SegmentLoader.class), "loadSegmentsFromCacheRollup", "(java.util.List,java.util.List,mondrian.rolap.RolapAggregationManager$PinSet)void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), groupingSet);
        Mockingbird.setReturnValue(false, list2, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), groupingSet2);
        Mockingbird.setReturnValue(false, list3, "size", "()int", new Integer(-1), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        molapSegmentLoader.load(list, null, null, null);
        assertFalse("molapSegmentLoaderSegmentLoader.LOGGER.isTraceEnabled()", ((Logger) getPrivateField(SegmentLoader.class, "LOGGER")).isTraceEnabled());
        assertNull("molapSegmentLoader.stmt", getPrivateField(molapSegmentLoader, "stmt"));
    }
    
    public void testProcessBasedOnTypeWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        boolean[] booleans = new boolean[0];
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapResultHolder.getObject(1), new Double(0.0));
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(0.0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processBasedOnType", new Class[] {List.class, MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, boolean[].class, int.class, SqlStatement.Type.class}, molapSegmentLoader, new Object[] {null, molapResultHolder, obj, new Integer(0), booleans, new Integer(0), SqlStatement.Type.DOUBLE});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessBasedOnTypeWithAggressiveMocks1() throws Throwable {
        storeStaticField(Util.class, "nullValue");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        boolean[] booleans = new boolean[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(molapResultHolder.getObject(1), null);
        setPrivateField(Util.class, "nullValue", null);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setObject", new Class[] {int.class, Object.class}, obj, new Object[] {new Integer(0), null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processBasedOnType", new Class[] {List.class, MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, boolean[].class, int.class, SqlStatement.Type.class}, molapSegmentLoader, new Object[] {null, molapResultHolder, obj, new Integer(0), booleans, new Integer(0), SqlStatement.Type.STRING});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessData() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = new MolapSegmentLoader();
        SortedSet[] axisValueSets = new SortedSet[0];
        MolapStatement stmt1 = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        boolean[] axisContainsNull = new boolean[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        Mockingbird.enterRecordingMode();
        List arrayList = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.setReturnValue(groupingSetsList.getDefaultSegments(), arrayList);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(2), 1);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Mockingbird.setReturnValue(stmt1.getIterator(), molapResultHolder);
        Mockingbird.setReturnValue(stmt1.guessTypes(), Mockingbird.getProxyObject(List.class));
        Mockingbird.setReturnValue(groupingSetsList.useGroupingSets(), false);
        Mockingbird.setReturnValue(molapResultHolder.getDataTypes(), Mockingbird.getProxyObject(List.class));
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        Mockingbird.replaceObjectForRecording(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), "<init>(java.util.List,int)", obj);
        Mockingbird.setReturnValue(molapResultHolder.isNext(), false);
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        Object result = molapSegmentLoader.processData(stmt1, axisContainsNull, axisValueSets, groupingSetsList);
        assertSame("result", obj, result);
    }
    
    public void testProcessRowsForDoubleWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[0];
        SortedSet[] sortedSets = new SortedSet[1];
        SortedSet sortedSet = (SortedSet) Mockingbird.getProxyObject(SortedSet.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        sortedSets[0] = sortedSet;
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, sortedSet, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(0.0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForDouble", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, double.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, null, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Double(0.0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForDoubleWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[1];
        SortedSet sortedSet = (SortedSet) Mockingbird.getProxyObject(SortedSet.class);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        sortedSets[0] = sortedSet;
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.TRUE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.findGroupingFunctionIndex(0), -1);
        Mockingbird.setReturnValue(false, sortedSet, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(0.0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForDouble", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, double.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Double(0.0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForDoubleWithAggressiveMocks2() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[1];
        SortedSet sortedSet = (SortedSet) Mockingbird.getProxyObject(SortedSet.class);
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        sortedSets[0] = sortedSet;
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.FALSE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, sortedSet, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(0.0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForDouble", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, double.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Double(0.0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForIntegerWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.TRUE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.findGroupingFunctionIndex(0), -1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForInteger", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, int.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Integer(0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForIntegerWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.FALSE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForInteger", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, int.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Integer(0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForIntegerWithAggressiveMocks2() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[0];
        SortedSet[] sortedSets = new SortedSet[1];
        SortedSet sortedSet = (SortedSet) Mockingbird.getProxyObject(SortedSet.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        sortedSets[0] = sortedSet;
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, sortedSet, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setInt", new Class[] {int.class, int.class}, obj, new Object[] {new Integer(0), new Integer(0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForInteger", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, int.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, null, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Integer(0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForLongWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.TRUE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(groupingSetsList.findGroupingFunctionIndex(0), -1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForLong", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, long.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Long(0L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForLongWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.FALSE);
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForLong", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, long.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Long(0L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForLongWithAggressiveMocks2() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[0];
        SortedSet[] sortedSets = new SortedSet[1];
        SortedSet sortedSet = (SortedSet) Mockingbird.getProxyObject(SortedSet.class);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        sortedSets[0] = sortedSet;
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, sortedSet, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setLong", new Class[] {int.class, long.class}, obj, new Object[] {new Integer(0), new Long(0L)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForLong", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, long.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, null, molapResultHolder, new Integer(0), obj, new Integer(0), new Integer(0), new Long(0L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsForStringWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapUtil.class, "sqlNullValue");
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        boolean[] booleans = new boolean[1];
        SortedSet[] sortedSets = new SortedSet[0];
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(groupingSetsList, "useGroupingSet", Boolean.FALSE);
        setPrivateField(RolapUtil.class, "sqlNullValue", null);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setObject", new Class[] {int.class, Object.class}, obj, new Object[] {new Integer(0), null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsForString", new Class[] {boolean[].class, SortedSet[].class, GroupingSetsList.class, MolapResultHolder.class, int.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class, Object.class}, molapSegmentLoader, new Object[] {booleans, sortedSets, groupingSetsList, null, new Integer(0), obj, new Integer(0), new Integer(0), null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseDoubleWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(0.0)});
        Mockingbird.setNormalReturnForVoid();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseDouble", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, double.class}, molapSegmentLoader, new Object[] {molapResultHolder, obj, new Integer(0), new Double(0.0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseDoubleWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setDouble", new Class[] {int.class, double.class}, obj, new Object[] {new Integer(0), new Double(2.802596928649634E-45)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseDouble", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, double.class}, molapSegmentLoader, new Object[] {null, obj, new Integer(0), new Double(2.802596928649634E-45)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseIntegerWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setInt", new Class[] {int.class, int.class}, obj, new Object[] {new Integer(0), new Integer(0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseInteger", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class}, molapSegmentLoader, new Object[] {molapResultHolder, obj, new Integer(0), new Integer(0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseIntegerWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setInt", new Class[] {int.class, int.class}, obj, new Object[] {new Integer(0), new Integer(0)});
        Mockingbird.setNormalReturnForVoid();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseInteger", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class}, molapSegmentLoader, new Object[] {molapResultHolder, obj, new Integer(0), new Integer(0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseIntegerWithAggressiveMocks2() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setInt", new Class[] {int.class, int.class}, obj, new Object[] {new Integer(0), new Integer(1)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseInteger", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, int.class}, molapSegmentLoader, new Object[] {null, obj, new Integer(0), new Integer(1)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseLongWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setLong", new Class[] {int.class, long.class}, obj, new Object[] {new Integer(0), new Long(0L)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseLong", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, long.class}, molapSegmentLoader, new Object[] {molapResultHolder, obj, new Integer(0), new Long(0L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseLongWithAggressiveMocks1() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        MolapResultHolder molapResultHolder = (MolapResultHolder) Mockingbird.getProxyObject(MolapResultHolder.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        setPrivateField(molapResultHolder, "isLastValueNull", Boolean.TRUE);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setLong", new Class[] {int.class, long.class}, obj, new Object[] {new Integer(0), new Long(0L)});
        Mockingbird.setNormalReturnForVoid();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setNull", new Class[] {int.class, boolean.class}, obj, new Object[] {new Integer(0), Boolean.TRUE});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseLong", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, long.class}, molapSegmentLoader, new Object[] {molapResultHolder, obj, new Integer(0), new Long(0L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseLongWithAggressiveMocks2() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setLong", new Class[] {int.class, long.class}, obj, new Object[] {new Integer(0), new Long(1L)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseLong", new Class[] {MolapResultHolder.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, long.class}, molapSegmentLoader, new Object[] {null, obj, new Integer(0), new Long(1L)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testProcessRowsInCaseStringWithAggressiveMocks() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = (MolapSegmentLoader) Mockingbird.getProxyObject(MolapSegmentLoader.class, true);
        Object obj = Mockingbird.getProxyObject(Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"));
        boolean[] booleans = new boolean[1];
        booleans[0] = true;
        Mockingbird.enterRecordingMode();
        callPrivateMethod("mondrian.rolap.agg.SegmentLoader$RowList", "setObject", new Class[] {int.class, Object.class}, obj, new Object[] {new Integer(0), new Double(100.0)});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.mondrian.extensions.MolapSegmentLoader", "processRowsInCaseString", new Class[] {List.class, Class.forName("mondrian.rolap.agg.SegmentLoader$RowList"), int.class, boolean[].class, int.class, Object.class}, molapSegmentLoader, new Object[] {null, obj, new Integer(0), booleans, new Integer(0), new Double(100.0)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateExecuteSqlThrowsNullPointerException() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = new MolapSegmentLoader();
        GroupingSetsList groupingSetsList = (GroupingSetsList) Mockingbird.getProxyObject(GroupingSetsList.class);
        ArrayList compoundPredicateList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(groupingSetsList.getStar(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        try {
            molapSegmentLoader.createExecuteSql(groupingSetsList, compoundPredicateList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("groupingSetsList.getGroupingSets()", groupingSetsList.getGroupingSets());
        }
    }
    
    public void testLoadThrowsEmptyStackException() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = new MolapSegmentLoader();
        List groupingSets = new ArrayList(100);
        MolapStatement stmt = new MolapStatement(null);
        try {
            molapSegmentLoader.load(groupingSets, new AggregationManager.PinSetImpl(), new ArrayList(1000), stmt);
            fail("Expected EmptyStackException to be thrown");
        } catch (EmptyStackException ex) {
            assertSame("molapSegmentLoader.stmt", stmt, getPrivateField(molapSegmentLoader, "stmt"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Stack.class, ex);
            assertFalse("molapSegmentLoaderSegmentLoader.LOGGER.isTraceEnabled()", ((Logger) getPrivateField(SegmentLoader.class, "LOGGER")).isTraceEnabled());
            assertEquals("(ArrayList) groupingSets.size()", 0, groupingSets.size());
        }
    }
    
    public void testProcessDataThrowsIndexOutOfBoundsException() throws Throwable {
        GroupingSetsList groupingSetsList = new GroupingSetsList(new ArrayList(100));
        SortedSet[] axisValueSets = new SortedSet[0];
        boolean[] axisContainsNull = new boolean[0];
        try {
            new MolapSegmentLoader().processData(new MolapStatement(null), axisContainsNull, axisValueSets, groupingSetsList);
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 0, Size: 0", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertEquals("axisContainsNull.length", 0, axisContainsNull.length);
        }
    }
    
    public void testProcessDataThrowsNullPointerException() throws Throwable {
        MolapSegmentLoader molapSegmentLoader = new MolapSegmentLoader();
        MolapStatement stmt1 = (MolapStatement) Mockingbird.getProxyObject(MolapStatement.class);
        boolean[] axisContainsNull = new boolean[0];
        SortedSet[] axisValueSets = new SortedSet[0];
        Mockingbird.enterTestMode(MolapSegmentLoader.class);
        try {
            molapSegmentLoader.processData(stmt1, axisContainsNull, axisValueSets, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapSegmentLoader.class, ex);
            assertEquals("axisContainsNull.length", 0, axisContainsNull.length);
        }
    }
}

