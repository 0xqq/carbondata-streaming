/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:49:38 PM
 * Time to generate: 01:49.251 seconds
 *
 */

package com.huawei.unibi.molap.engine.executer;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.executer.impl.InMemoryQueryExecutor;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.mondrian.molap.MolapFilterInfo;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class AbstractMolapExecutorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AbstractMolapExecutor.class;
    }
    
    public void testAddPointKeyInList() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        List result = new ArrayList(1000);
        long[] longs = new long[1];
        long[][] predKeys = new long[1][];
        predKeys[0] = longs;
        long[] builder = new long[2];
        inMemoryQueryExecutor.addPointKeyInList(predKeys, -1, builder, result);
        assertEquals("(ArrayList) result.size()", 1, result.size());
    }
    
    public void testAddPointKeyInListWithAggressiveMocks() throws Throwable {
        AbstractMolapExecutor abstractMolapExecutor = (AbstractMolapExecutor) Mockingbird.getProxyObject(AbstractMolapExecutor.class, true);
        long[][] longs = new long[2][0];
        long[] longs2 = new long[0];
        long[] longs3 = new long[0];
        longs[0] = longs2;
        Mockingbird.enterTestMode(AbstractMolapExecutor.class);
        abstractMolapExecutor.addPointKeyInList(longs, -1, longs3, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddPointKeyInListWithAggressiveMocks1() throws Throwable {
        AbstractMolapExecutor abstractMolapExecutor = (AbstractMolapExecutor) Mockingbird.getProxyObject(AbstractMolapExecutor.class, true);
        long[][] longs = new long[2][0];
        long[] longs2 = new long[2];
        long[] longs3 = new long[1];
        longs[0] = longs2;
        longs2[0] = 0L;
        longs2[1] = 0L;
        Mockingbird.enterRecordingMode();
        abstractMolapExecutor.addPointKeyInList(longs, 0, longs3, null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, abstractMolapExecutor, "addPointKeyInList", "(long[][],int,long[],java.util.List)void", null, 1);
        Mockingbird.enterTestMode(AbstractMolapExecutor.class);
        abstractMolapExecutor.addPointKeyInList(longs, -1, longs3, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstraintsExistsOnAllDimensions() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        boolean result = inMemoryQueryExecutor.constraintsExistsOnAllDimensions(new HashMap(100, 100.0F));
        assertTrue("result", result);
    }
    
    public void testConstraintsExistsOnAllDimensionsWithAggressiveMocks() throws Throwable {
        AbstractMolapExecutor abstractMolapExecutor = (AbstractMolapExecutor) Mockingbird.getProxyObject(AbstractMolapExecutor.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo2 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        MolapFilterInfo molapFilterInfo3 = (MolapFilterInfo) Mockingbird.getProxyObject(MolapFilterInfo.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), molapFilterInfo);
        Mockingbird.setReturnValue(molapFilterInfo.getEffectiveIncludedMembers(), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), molapFilterInfo2);
        Mockingbird.setReturnValue(molapFilterInfo2.getEffectiveIncludedMembers(), list2);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), molapFilterInfo3);
        Mockingbird.setReturnValue(molapFilterInfo3.getEffectiveIncludedMembers(), list3);
        Mockingbird.setReturnValue(list3.size(), 0);
        Mockingbird.enterTestMode(AbstractMolapExecutor.class);
        boolean result = abstractMolapExecutor.constraintsExistsOnAllDimensions(map);
        assertFalse("result", result);
    }
    
    public void testGetKeyGenerator() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName");
        MolapMetadata.Dimension[] dims = new MolapMetadata.Dimension[1];
        dims[0] = dimension;
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        MultiDimKeyVarLengthGenerator result = (MultiDimKeyVarLengthGenerator) inMemoryQueryExecutor.getKeyGenerator(dims);
        assertEquals("result.getDimCount()", 1, result.getDimCount());
    }
    
    public void testGetKeyGenerator1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        MolapMetadata.Dimension[] dims = new MolapMetadata.Dimension[0];
        MultiDimKeyVarLengthGenerator result = (MultiDimKeyVarLengthGenerator) inMemoryQueryExecutor.getKeyGenerator(dims);
        assertEquals("result.getDimCount()", 0, result.getDimCount());
    }
    
    public void testSetEndKey() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[0];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[3];
        long[] longs2 = new long[2];
        long[][] longs3 = new long[2][];
        long[] longs4 = new long[0];
        long[][] longs5 = new long[4][];
        longs5[0] = longs;
        longs5[1] = longs4;
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs2, longs3, longs5, dimensions});
        assertEquals("longs2[1]", 1L, longs2[1]);
    }
    
    public void testSetEndKey1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[0];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[3];
        long[] longs2 = new long[2];
        long[][] longs3 = new long[2][];
        long[][] longs4 = new long[4][];
        longs4[0] = longs;
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs2, longs3, longs4, dimensions});
        assertEquals("longs2[1]", 1L, longs2[1]);
    }
    
    public void testSetEndKey2() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[][] longs = new long[3][];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        long[] longs2 = new long[1];
        long[][] longs3 = new long[2][];
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs2, longs, longs3, dimensions});
        assertEquals("longs2[0]", 1L, longs2[0]);
    }
    
    public void testSetEndKey3() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[1];
        long[][] longs2 = new long[3][];
        longs2[0] = longs;
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        long[] longs3 = new long[1];
        long[][] longs4 = new long[2][];
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs3, longs2, longs4, dimensions});
        assertEquals("longs3[0]", 1L, longs3[0]);
    }
    
    public void testSetStartAndEndKeysWithAggressiveMocks() throws Throwable {
        AbstractMolapExecutor abstractMolapExecutor = (AbstractMolapExecutor) Mockingbird.getProxyObject(AbstractMolapExecutor.class, true);
        long[] longs = new long[0];
        long[] longs2 = new long[0];
        long[][] longs3 = new long[0][0];
        long[][] longs4 = new long[0][0];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, abstractMolapExecutor, "setStartKey", "(long[],long[][],long[][])void", new Object[] {longs, longs3, longs4}, null, 1);
        Mockingbird.setReturnValue(false, abstractMolapExecutor, "setEndKey", "(long[],long[][],long[][],com.huawei.unibi.molap.metadata.MolapMetadata$Dimension[])void", new Object[] {longs2, longs3, longs4, dimensions}, null, 1);
        Mockingbird.enterTestMode(AbstractMolapExecutor.class);
        abstractMolapExecutor.setStartAndEndKeys(longs, longs2, longs3, longs4, dimensions);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSetStartKey() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[1];
        long[][] longs2 = new long[3][];
        long[][] longs3 = new long[2][];
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs3});
        assertEquals("longs.length", 1, longs.length);
    }
    
    public void testSetStartKey1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[][] longs = new long[3][];
        long[][] longs2 = new long[3][];
        long[] longs3 = new long[0];
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {longs3, longs, longs2});
        assertEquals("longs3.length", 0, longs3.length);
    }
    
    public void testSetStartKey2() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[1];
        long[] longs2 = new long[1];
        long[][] longs3 = new long[3][];
        longs3[0] = longs2;
        long[][] longs4 = new long[2][];
        callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {longs, longs3, longs4});
        assertEquals("longs.length", 1, longs.length);
    }
    
    public void testAddPointKeyInListThrowsArrayIndexOutOfBoundsException() throws Throwable {
        List result = new ArrayList(100);
        long[] longs = new long[3];
        long[][] predKeys = new long[3][];
        predKeys[1] = longs;
        long[] builder = new long[0];
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(1000));
        try {
            inMemoryQueryExecutor.addPointKeyInList(predKeys, 0, builder, result);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
            assertEquals("builder.length", 0, builder.length);
        }
    }
    
    public void testAddPointKeyInListThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(dimList);
        List result = new ArrayList(1000);
        long[][] predKeys = new long[0][];
        long[] builder = new long[2];
        try {
            inMemoryQueryExecutor.addPointKeyInList(predKeys, -2, builder, result);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
            assertEquals("builder.length", 2, builder.length);
        }
    }
    
    public void testAddPointKeyInListThrowsNullPointerException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        List result = new ArrayList(1000);
        long[] longs = new long[1];
        long[][] predKeys = new long[2][];
        predKeys[1] = longs;
        try {
            inMemoryQueryExecutor.addPointKeyInList(predKeys, 0, (long[]) null, result);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
        }
    }
    
    public void testAddPointKeyInListThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(dimList);
        long[] builder = new long[3];
        List result = new ArrayList(1000);
        try {
            inMemoryQueryExecutor.addPointKeyInList((long[][]) null, 100, builder, result);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
            assertEquals("builder.length", 3, builder.length);
        }
    }
    
    public void testAddPointKeyInListThrowsNullPointerException2() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        List result = new ArrayList(1000);
        long[][] predKeys = new long[2][];
        long[] builder = new long[1];
        try {
            inMemoryQueryExecutor.addPointKeyInList(predKeys, 0, builder, result);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
            assertEquals("builder.length", 1, builder.length);
        }
    }
    
    public void testAddPointKeyInListThrowsNullPointerException3() throws Throwable {
        List result = new ArrayList(100);
        long[][] predKeys = new long[3][];
        long[] builder = new long[0];
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(1000));
        try {
            inMemoryQueryExecutor.addPointKeyInList(predKeys, 0, builder, result);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(ArrayList) result.size()", 0, result.size());
            assertEquals("builder.length", 0, builder.length);
        }
    }
    
    public void testConstraintsExistsOnAllDimensionsThrowsNullPointerException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        Map constraints = new HashMap(100, 100.0F);
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName");
        constraints.put(dimension, (Object) null);
        try {
            inMemoryQueryExecutor.constraintsExistsOnAllDimensions(constraints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("(HashMap) constraints.size()", 1, constraints.size());
        }
    }
    
    public void testConstraintsExistsOnAllDimensionsThrowsNullPointerException1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            inMemoryQueryExecutor.constraintsExistsOnAllDimensions(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
    
    public void testGetKeyGeneratorThrowsNullPointerException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            inMemoryQueryExecutor.getKeyGenerator((MolapMetadata.Dimension[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
    
    public void testGetKeyGeneratorThrowsNullPointerException1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        MolapMetadata.Dimension dimension = (MolapMetadata.Dimension) callPrivateMethod("com.huawei.unibi.molap.metadata.MolapMetadata$Dimension", "<init>", new Class[] {}, null, new Object[] {});
        MolapMetadata.Dimension[] dims = new MolapMetadata.Dimension[2];
        dims[0] = dimension;
        try {
            inMemoryQueryExecutor.getKeyGenerator(dims);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
    
    public void testGetKeyGeneratorThrowsNullPointerException2() throws Throwable {
        MolapMetadata.Dimension[] dims = new MolapMetadata.Dimension[1];
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            inMemoryQueryExecutor.getKeyGenerator(dims);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[4];
        long[] longs = new long[5];
        long[][] longs2 = new long[2][];
        long[] longs3 = new long[4];
        long[][] longs4 = new long[2][];
        longs4[1] = longs3;
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs4, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("longs[1]", -1L, longs[1]);
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 5, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[2];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        long[][] longs2 = new long[3][];
        long[][] longs3 = new long[4][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs3, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 2, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        long[] longs = new long[3];
        long[][] longs2 = new long[0][];
        long[][] longs3 = new long[0][];
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs3, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 3, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[2];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        long[] longs2 = new long[4];
        long[][] longs3 = new long[3][];
        longs3[0] = longs2;
        long[][] longs4 = new long[4][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs3, longs4, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 2, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        long[] longs = new long[0];
        long[][] longs2 = new long[1][];
        long[][] longs3 = new long[2][];
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs3, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 0, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[4];
        long[] longs = new long[5];
        long[][] longs2 = new long[2][];
        long[] longs3 = new long[4];
        longs3[3] = -1L;
        long[][] longs4 = new long[2][];
        longs4[1] = longs3;
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs4, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 5, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(dimList);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[2];
        long[] longs = new long[1];
        long[][] longs2 = new long[3][];
        long[][] longs3 = new long[0][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {longs, longs2, longs3, dimensions});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 1, longs.length);
        }
    }
    
    public void testSetEndKeyThrowsNullPointerException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[][] longs = new long[3][];
        long[][] longs2 = new long[3][];
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[1];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setEndKey", new Class[] {long[].class, long[][].class, long[][].class, MolapMetadata.Dimension[].class}, inMemoryQueryExecutor, new Object[] {null, longs2, longs, dimensions});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[5];
        longs[1] = 75L;
        long[] longs2 = new long[4];
        longs2[0] = 20L;
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[] longs3 = new long[2];
        long[][] incldPredKeys = new long[4][];
        incldPredKeys[1] = longs3;
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        excldPredKeys[2] = longs2;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("startKey[0]", 1L, startKey[0]);
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[] startKey = new long[0];
        long[] endKey = new long[0];
        long[][] incldPredKeys = new long[3][];
        long[][] excldPredKeys = new long[4][];
        try {
            new InMemoryQueryExecutor(new ArrayList(100)).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 0, endKey.length);
            assertEquals("startKey.length", 0, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[5];
        longs[0] = -18L;
        longs[1] = 75L;
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[][] incldPredKeys = new long[4][];
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[] longs = new long[0];
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        long[] startKey = new long[5];
        long[] endKey = new long[0];
        long[] longs2 = new long[4];
        long[] longs3 = new long[1];
        long[][] incldPredKeys = new long[3][];
        incldPredKeys[1] = longs2;
        incldPredKeys[2] = longs3;
        try {
            new InMemoryQueryExecutor(new ArrayList(100)).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 0, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[5];
        longs[0] = -18L;
        longs[1] = 75L;
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[] longs2 = new long[2];
        long[][] incldPredKeys = new long[4][];
        incldPredKeys[1] = longs2;
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[][] excldPredKeys = new long[3][];
        long[] startKey = new long[5];
        long[] endKey = new long[0];
        long[] longs = new long[4];
        long[] longs2 = new long[2];
        long[] longs3 = new long[1];
        long[][] incldPredKeys = new long[3][];
        incldPredKeys[0] = longs2;
        incldPredKeys[1] = longs;
        incldPredKeys[2] = longs3;
        try {
            new InMemoryQueryExecutor(new ArrayList(100)).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 0, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[5];
        longs[0] = -18L;
        longs[1] = 75L;
        long[] longs2 = new long[4];
        longs2[0] = 20L;
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[] longs3 = new long[2];
        long[][] incldPredKeys = new long[4][];
        incldPredKeys[1] = longs3;
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        excldPredKeys[2] = longs2;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[5];
        longs[1] = 75L;
        long[] longs2 = new long[4];
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[] longs3 = new long[2];
        long[][] incldPredKeys = new long[4][];
        incldPredKeys[1] = longs3;
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[0] = longs;
        excldPredKeys[2] = longs2;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("startKey[0]", 1L, startKey[0]);
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsArrayIndexOutOfBoundsException8() throws Throwable {
        MolapMetadata.Dimension dimension = new MolapMetadata.Dimension("testAbstractMolapExecutorColName", 100, "testAbstractMolapExecutorName", new MolapMetadata.Cube("testAbstractMolapExecutorName"));
        List dimList = new ArrayList(100);
        dimList.add((Object) null);
        dimList.set(0, dimension);
        long[] longs = new long[4];
        longs[0] = 20L;
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[5];
        long[] startKey = new long[5];
        long[] endKey = new long[5];
        long[] longs2 = new long[2];
        long[][] incldPredKeys = new long[4][];
        incldPredKeys[1] = longs2;
        long[][] excldPredKeys = new long[3][];
        excldPredKeys[2] = longs;
        try {
            new InMemoryQueryExecutor(dimList).setStartAndEndKeys(startKey, endKey, incldPredKeys, excldPredKeys, tables);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "3", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 5, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsNullPointerException() throws Throwable {
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[][] excldPredKeys = new long[3][];
        long[] startKey = new long[5];
        long[] endKey = new long[0];
        try {
            new InMemoryQueryExecutor(new ArrayList(100)).setStartAndEndKeys(startKey, endKey, (long[][]) null, excldPredKeys, tables);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 0, endKey.length);
            assertEquals("startKey.length", 5, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsNullPointerException1() throws Throwable {
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[] startKey = new long[0];
        long[] endKey = new long[1];
        long[][] incldPredKeys = new long[1][];
        try {
            new InMemoryQueryExecutor(new ArrayList(100)).setStartAndEndKeys(startKey, endKey, incldPredKeys, (long[][]) null, tables);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("endKey.length", 1, endKey.length);
            assertEquals("startKey.length", 0, startKey.length);
        }
    }
    
    public void testSetStartAndEndKeysThrowsNullPointerException2() throws Throwable {
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(0), 1);
        MolapMetadata.Dimension[] dimensions = new MolapMetadata.Dimension[0];
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", new Object[] {dimensions}, dimensions, 1);
        InMemoryQueryExecutor inMemoryQueryExecutor = (InMemoryQueryExecutor) Mockingbird.getProxyObject(InMemoryQueryExecutor.class);
        Mockingbird.setReturnValue(true, inMemoryQueryExecutor.getKeyGenerator(dimensions), Mockingbird.getProxyObject(KeyGenerator.class));
        Mockingbird.enterTestMode(AbstractMolapExecutor.class);
        long[][] excldPredKeys = new long[0][];
        MolapMetadata.Dimension[] tables = new MolapMetadata.Dimension[0];
        long[] startKey = new long[0];
        long[][] incldPredKeys = new long[0][];
        try {
            inMemoryQueryExecutor.setStartAndEndKeys(startKey, (long[]) null, incldPredKeys, excldPredKeys, tables);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("startKey.length", 0, startKey.length);
        }
    }
    
    public void testSetStartKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[][] longs = new long[4][];
        long[] longs2 = new long[4];
        long[][] longs3 = new long[0][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {longs2, longs, longs3});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs2.length", 4, longs2.length);
        }
    }
    
    public void testSetStartKeyThrowsNullPointerException() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[] longs = new long[3];
        long[][] longs2 = new long[4][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {longs, null, longs2});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
            assertEquals("longs.length", 3, longs.length);
        }
    }
    
    public void testSetStartKeyThrowsNullPointerException1() throws Throwable {
        AbstractMolapExecutor inMemoryQueryExecutor = new InMemoryQueryExecutor(new ArrayList(100));
        long[][] longs = new long[2][];
        long[][] longs2 = new long[5][];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.executer.AbstractMolapExecutor", "setStartKey", new Class[] {long[].class, long[][].class, long[][].class}, inMemoryQueryExecutor, new Object[] {null, longs2, longs});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractMolapExecutor.class, ex);
        }
    }
}

