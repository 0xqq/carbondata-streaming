/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:58:02 PM
 * Time to generate: 00:16.397 seconds
 *
 */

package com.huawei.unibi.molap.engine.filters;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.Bits;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;

public class IncludeExcludeKeyFilterImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return IncludeExcludeKeyFilterImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        long[] maxKey = new long[3];
        byte[][] maxKey2 = new byte[0][];
        InMemFilterModel filterModel = new InMemFilterModel(null, maxKey2, 100);
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, keyGenerator, maxKey);
        assertSame("includeExcludeKeyFilterImpl.keyGenerator", keyGenerator, includeExcludeKeyFilterImpl.keyGenerator);
        assertNotNull("includeExcludeKeyFilterImpl.optimizer", includeExcludeKeyFilterImpl.optimizer);
        assertSame("includeExcludeKeyFilterImpl.filterModel", filterModel, includeExcludeKeyFilterImpl.filterModel);
    }
    
    public void testFilterKey() throws Throwable {
        InMemFilterModel filterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        long[] maxKey = new long[0];
        Mockingbird.enterRecordingMode();
        long[][] longs = new long[0][];
        Mockingbird.setReturnValue(filterModel.getIncludePredicateKeys(), longs);
        long[][] longs2 = new long[0][];
        Mockingbird.setReturnValue(filterModel.getExcludePredicateKeys(), longs2);
        Mockingbird.replaceObjectForRecording(IncludeExcludeScanOptimizerImpl.class, "<init>(long[],long[][],long[][],com.huawei.unibi.molap.keygenerator.KeyGenerator)", Mockingbird.getProxyObject(IncludeExcludeScanOptimizerImpl.class));
        Mockingbird.enterTestMode(IncludeExcludeKeyFilterImpl.class);
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, keyGenerator, maxKey);
        KeyValue key = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        int[] ints = new int[0];
        Mockingbird.setReturnValue(filterModel.getColIncludeDimOffset(), ints);
        byte[][][] bytes = new byte[2][][];
        byte[][] bytes2 = new byte[0][];
        bytes[0] = bytes2;
        byte[][] bytes3 = new byte[0][];
        bytes[1] = bytes3;
        Mockingbird.setReturnValue(filterModel.getFilter(), bytes);
        int[] ints2 = new int[0];
        Mockingbird.setReturnValue(filterModel.getColExcludeDimOffset(), ints2);
        byte[][][] bytes4 = new byte[1][][];
        byte[][] bytes5 = new byte[0][];
        bytes4[0] = bytes5;
        Mockingbird.setReturnValue(filterModel.getExcludeFilter(), bytes4);
        Mockingbird.enterTestMode(IncludeExcludeKeyFilterImpl.class);
        boolean result = includeExcludeKeyFilterImpl.filterKey(key);
        assertTrue("result", result);
        assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testFilterKeyWithAggressiveMocks() throws Throwable {
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = (IncludeExcludeKeyFilterImpl) Mockingbird.getProxyObject(IncludeExcludeKeyFilterImpl.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(KeyFilterImpl.class, "filterKey", "(com.huawei.unibi.molap.engine.scanner.impl.KeyValue)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(IncludeExcludeKeyFilterImpl.class);
        boolean result = includeExcludeKeyFilterImpl.filterKey(null);
        assertFalse("result", result);
        assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] maxKey = new long[0];
        int[] lens = new int[1];
        try {
            new IncludeExcludeKeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        byte[][] maxKey = new byte[0][];
        byte[][][] filter = new byte[1][][];
        long[] maxKey2 = new long[1];
        try {
            new IncludeExcludeKeyFilterImpl(new InMemFilterModel(filter, maxKey, 100), null, maxKey2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        try {
            new IncludeExcludeKeyFilterImpl(null, new MultiDimKeyVarLengthGenerator(lens), maxKey);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeKeyFilterImpl.class, ex);
        }
    }
    
    public void testFilterKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        InMemFilterModel filterModel = new InMemFilterModel();
        byte[][][] filter = new byte[0][][];
        filterModel.setFilter(filter);
        int[] colIncludeDimOffset = new int[3];
        filterModel.setColIncludeDimOffset(colIncludeDimOffset);
        int[] lens = new int[0];
        long[] maxKey = new long[1];
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            includeExcludeKeyFilterImpl.filterKey(new KeyValue());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        InMemFilterModel filterModel = new InMemFilterModel();
        int[] lens = new int[0];
        int[] colExcludeDimOffset = new int[2];
        colExcludeDimOffset[0] = 1;
        filterModel.setColExcludeDimOffset(colExcludeDimOffset);
        byte[][][] excludeFilter = new byte[1][][];
        filterModel.setExcludeFilter(excludeFilter);
        int[] colIncludeDimOffset = new int[0];
        filterModel.setColIncludeDimOffset(colIncludeDimOffset);
        long[] maxKey = new long[3];
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            includeExcludeKeyFilterImpl.filterKey(new KeyValue());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeKeyFilterImpl.class, ex);
            assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[3];
        byte[][] maxKey2 = new byte[0][];
        int[] lens = new int[0];
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(new InMemFilterModel(null, maxKey2, 100), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            includeExcludeKeyFilterImpl.filterKey(new KeyValue());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException1() throws Throwable {
        InMemFilterModel filterModel = new InMemFilterModel();
        int[] lens = new int[0];
        int[] colExcludeDimOffset = new int[2];
        filterModel.setColExcludeDimOffset(colExcludeDimOffset);
        byte[][][] excludeFilter = new byte[1][][];
        filterModel.setExcludeFilter(excludeFilter);
        int[] colIncludeDimOffset = new int[0];
        filterModel.setColIncludeDimOffset(colIncludeDimOffset);
        long[] maxKey = new long[3];
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            includeExcludeKeyFilterImpl.filterKey(new KeyValue());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeKeyFilterImpl.class, ex);
            assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException2() throws Throwable {
        InMemFilterModel filterModel = new InMemFilterModel();
        int[] lens = new int[0];
        int[] colIncludeDimOffset = new int[0];
        filterModel.setColIncludeDimOffset(colIncludeDimOffset);
        long[] maxKey = new long[3];
        IncludeExcludeKeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(filterModel, new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            includeExcludeKeyFilterImpl.filterKey(new KeyValue());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeKeyFilterImpl.class, ex);
            assertTrue("includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
}

