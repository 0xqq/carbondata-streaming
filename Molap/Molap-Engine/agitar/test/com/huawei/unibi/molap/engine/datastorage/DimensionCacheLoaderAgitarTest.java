/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:52:35 PM
 * Time to generate: 02:02.694 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream;
import com.huawei.unibi.molap.engine.datastorage.streams.impl.FileDataInputStream;
import com.huawei.unibi.molap.engine.datastorage.tree.HierarchyBtreeStore;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.util.CacheUtil;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.factory.KeyGeneratorFactory;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import mondrian.olap.Dimension;
import mondrian.olap.Level;
import mondrian.olap.MondrianDef;
import mondrian.rolap.RolapHierarchy;
import mondrian.rolap.RolapLevel;
import mondrian.rolap.RolapProperty;

public class DimensionCacheLoaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DimensionCacheLoader.class;
    }
    
    public void testConstructor() throws Throwable {
        new DimensionCacheLoader();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDataInputStreamWrappedScannerConstructor() throws Throwable {
        DataInputStream fileDataInputStream = new FileDataInputStream("testDataInputStreamWrappedScannerFilesLocation", 100, 1000, new ArrayList(100), true, "testDataInputStreamWrappedScannerPersistenceFileLocation", "testDataInputStreamWrappedScannerTableName");
        Scanner scanner = (Scanner) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "<init>", new Class[] {DataInputStream.class}, null, new Object[] {fileDataInputStream});
        Object object = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "getNext", new Class[] {}, scanner, new Object[] {});
        assertNull("(Scanner) scanner.getNext()", object);
    }
    
    public void testDataInputStreamWrappedScannerCloseInputWithAggressiveMocks() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        setPrivateField(scanner, "dataInputStream", dataInputStream);
        Mockingbird.enterRecordingMode();
        dataInputStream.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "closeInput", new Class[] {}, scanner, new Object[] {});
        Object object = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "getNext", new Class[] {}, scanner, new Object[] {});
        assertNull("(Scanner) scanner.getNext()", object);
    }
    
    public void testDataInputStreamWrappedScannerGetFileHolderWithAggressiveMocks() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        FileHolder result = (FileHolder) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "getFileHolder", new Class[] {}, scanner, new Object[] {});
        assertNull("result", result);
    }
    
    public void testDataInputStreamWrappedScannerGetNextWithAggressiveMocks() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        setPrivateField(scanner, "data", null);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        KeyValue result = (KeyValue) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "getNext", new Class[] {}, scanner, new Object[] {});
        assertNull("result", result);
    }
    
    public void testDataInputStreamWrappedScannerIsDoneWithAggressiveMocks() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        setPrivateField(scanner, "dataInputStream", dataInputStream);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInputStream.getNextHierTuple(), null);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "isDone", new Class[] {}, scanner, new Object[] {})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testDataInputStreamWrappedScannerIsDoneWithAggressiveMocks1() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Pair pair = (Pair) Mockingbird.getProxyObject(Pair.class);
        double[] doubles = new double[0];
        byte[] bytes = new byte[0];
        setPrivateField(scanner, "dataInputStream", dataInputStream);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInputStream.getNextHierTuple(), pair);
        Mockingbird.enterNormalMode();
        pair.setValue(doubles);
        pair.setKey(bytes);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "isDone", new Class[] {}, scanner, new Object[] {})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testDataInputStreamWrappedScannerSetDataStoreWithAggressiveMocks() throws Throwable {
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), true);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "setDataStore", new Class[] {DataStore.class, DataStoreBlock.class, int.class}, scanner, new Object[] {null, null, new Integer(0)});
        Object object = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner", "getNext", new Class[] {}, scanner, new Object[] {});
        assertNull("(Scanner) scanner.getNext()", object);
    }
    
    public void testGetKeyGenerator() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Mockingbird.enterRecordingMode();
        RolapLevel[] rolapLevels = new RolapLevel[0];
        Mockingbird.setReturnValue(rolapHierarchy.getLevels(), rolapLevels);
        Mockingbird.setReturnValue(rolapHierarchy.hasAll(), false);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        MultiDimKeyVarLengthGenerator result = (MultiDimKeyVarLengthGenerator) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "getKeyGenerator", new Class[] {RolapHierarchy.class}, null, new Object[] {rolapHierarchy});
        assertEquals("result.getDimCount()", 0, result.getDimCount());
    }
    
    public void testGetKeyGenerator1() throws Throwable {
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[2];
        Level level = (Level) Mockingbird.getProxyObject(Level.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.TRUE);
        levels[0] = level;
        levels[1] = rolapLevel;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, level, "isAll", "()boolean", Boolean.TRUE, 1);
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        KeyGenerator result = (KeyGenerator) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "getKeyGenerator", new Class[] {RolapHierarchy.class}, null, new Object[] {rolapHierarchy});
        assertNull("result", result);
    }
    
    public void testLoadBTreeHierarchyFileStore() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "dimeName", "");
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", null);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "loadBTreeHierarchyFileStore", new Class[] {HierarchyStore.class, String.class}, null, new Object[] {hierarchyStore, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadBTreeHierarchyFileStore1() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Level[] levels = new Level[2];
        MondrianDef.Table table = new MondrianDef.Table();
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", table);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        table.name = "";
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", keyGenerator, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", fileDataInputStream);
        fileDataInputStream.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(keyGenerator, fileDataInputStream);
        Mockingbird.setNormalReturnForVoid();
        fileDataInputStream.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "loadBTreeHierarchyFileStore", new Class[] {HierarchyStore.class, String.class}, null, new Object[] {hierarchyStore, ""});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarchyFromSlice() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Level[] levels = new Level[2];
        MondrianDef.Table table = new MondrianDef.Table();
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Level level = (Level) Mockingbird.getProxyObject(Level.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", table);
        levels[0] = rolapLevel;
        levels[1] = level;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", Boolean.FALSE, 1);
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyBtreeStore, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore2);
        setPrivateField(hierarchyBtreeStore2, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyBtreeStore3, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore5, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyBtreeStore4, "nTotalKeys", new Long(-1L));
        table.name = "";
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, level, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", keyGenerator, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore2, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore4);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore5);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", fileDataInputStream);
        fileDataInputStream.initInput();
        Mockingbird.setNormalReturnForVoid();
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), "<init>(com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream)", scanner);
        Mockingbird.setReturnValue(arrayList.add(scanner), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(keyGenerator, scannersInputCombiner);
        Mockingbird.setNormalReturnForVoid();
        fileDataInputStream.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarchyFromSlice(hierarchyStore, list, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarchyFromSlice1() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Level[] levels = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "dimeName", "");
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", null);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyBtreeStore, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore2);
        setPrivateField(hierarchyBtreeStore2, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyBtreeStore3, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore5, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyBtreeStore4, "nTotalKeys", new Long(1L));
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", keyGenerator, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore4);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore5);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore4, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean3, 1);
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        FileDataInputStream fileDataInputStream = (FileDataInputStream) Mockingbird.getProxyObject(FileDataInputStream.class);
        Mockingbird.replaceObjectForRecording(FileDataInputStream.class, "<init>(java.lang.String,int,int,java.util.List,boolean,java.lang.String,java.lang.String)", fileDataInputStream);
        fileDataInputStream.initInput();
        Mockingbird.setNormalReturnForVoid();
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader$DataInputStreamWrappedScanner"), "<init>(com.huawei.unibi.molap.engine.datastorage.streams.DataInputStream)", scanner);
        Mockingbird.setReturnValue(arrayList.add(scanner), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(keyGenerator, scannersInputCombiner);
        Mockingbird.setNormalReturnForVoid();
        fileDataInputStream.closeInput();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarchyFromSlice(hierarchyStore, list, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarchyFromSlice2() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Level[] levels = new Level[2];
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyBtreeStore, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore2);
        setPrivateField(hierarchyBtreeStore2, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyBtreeStore3, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore5, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyBtreeStore4, "nTotalKeys", new Long(1L));
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore4);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore5);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore4, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(null, scannersInputCombiner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarchyFromSlice(hierarchyStore, list, null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarchyFromSlice3() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Level[] levels = new Level[2];
        MondrianDef.Table table = new MondrianDef.Table();
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", table);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyBtreeStore, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore2);
        setPrivateField(hierarchyBtreeStore2, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyBtreeStore3, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore5, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyBtreeStore4, "nTotalKeys", new Long(1L));
        table.name = "";
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore4);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore5);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore4, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(null, scannersInputCombiner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarchyFromSlice(hierarchyStore, list, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarchyFromSlice4() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Level[] levels = new Level[2];
        MondrianDef.Table table = new MondrianDef.Table();
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        RolapLevel rolapLevel2 = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        HierarchyStore hierarchyStore2 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore3 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore2 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore4 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore3 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        HierarchyStore hierarchyStore5 = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        HierarchyBtreeStore hierarchyBtreeStore4 = (HierarchyBtreeStore) Mockingbird.getProxyObject(HierarchyBtreeStore.class);
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "levels", levels);
        setPrivateField(rolapHierarchy, "hasAll", Boolean.FALSE);
        setPrivateField(rolapHierarchy, "relation", table);
        levels[0] = rolapLevel;
        levels[1] = rolapLevel2;
        setPrivateField(rolapLevel, "levelCardinality", new Integer(0));
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, rolapLevel, "isAll", "()boolean", boolean2, 1);
        setPrivateField(rolapLevel2, "levelCardinality", new Integer(0));
        setPrivateField(hierarchyStore2, "btreeStore", hierarchyBtreeStore);
        setPrivateField(hierarchyBtreeStore, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore3, "btreeStore", hierarchyBtreeStore2);
        setPrivateField(hierarchyBtreeStore2, "nTotalKeys", new Long(-1L));
        setPrivateField(hierarchyStore4, "btreeStore", hierarchyBtreeStore3);
        setPrivateField(hierarchyBtreeStore3, "nTotalKeys", new Long(1L));
        setPrivateField(hierarchyStore5, "btreeStore", hierarchyBtreeStore4);
        setPrivateField(hierarchyBtreeStore4, "nTotalKeys", new Long(1L));
        table.name = "";
        Mockingbird.setReturnValue(false, rolapLevel2, "isAll", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, KeyGeneratorFactory.class, "getKeyGenerator", "(int[])com.huawei.unibi.molap.keygenerator.KeyGenerator", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore2);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore3);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", Mockingbird.getProxyObject(NonFilterTreeScanner.class));
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore4);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore3, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), hierarchyStore5);
        Mockingbird.replaceObjectForRecording(KeyValue.class, "<init>()", new KeyValue());
        NonFilterTreeScanner nonFilterTreeScanner2 = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class);
        Mockingbird.replaceObjectForRecording(NonFilterTreeScanner.class, "<init>(byte[],byte[],com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.scanner.impl.KeyValue,int[],com.huawei.unibi.molap.datastorage.store.FileHolder)", nonFilterTreeScanner2);
        Mockingbird.setReturnValue(false, hierarchyBtreeStore4, "getNext", "(byte[],com.huawei.unibi.molap.engine.scanner.Scanner)com.huawei.unibi.molap.engine.scanner.impl.KeyValue", null, 1);
        Mockingbird.setReturnValue(arrayList.add(nonFilterTreeScanner2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Mockingbird.replaceObjectForRecording(ScannersInputCombiner.class, "<init>(java.util.List,com.huawei.unibi.molap.keygenerator.KeyGenerator,java.util.List,boolean)", scannersInputCombiner);
        scannersInputCombiner.initInput();
        Mockingbird.setNormalReturnForVoid();
        hierarchyStore.build(null, scannersInputCombiner);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarchyFromSlice(hierarchyStore, list, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadHierarichyFromFileStore() throws Throwable {
        HierarchyStore hierarchyStore = (HierarchyStore) Mockingbird.getProxyObject(HierarchyStore.class);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        setPrivateField(hierarchyStore, "rolapHierarchy", rolapHierarchy);
        setPrivateField(hierarchyStore, "tableName", "");
        setPrivateField(rolapHierarchy, "relation", table);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, DimensionCacheLoader.class, "getKeyGenerator", "(mondrian.rolap.RolapHierarchy)com.huawei.unibi.molap.keygenerator.KeyGenerator", new Object[] {rolapHierarchy}, null, 1);
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadHierarichyFromFileStore(hierarchyStore, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMemberFromFileStore() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Int2ObjectOpenHashMap int2ObjectOpenHashMap = (Int2ObjectOpenHashMap) Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", int2ObjectOpenHashMap);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapHierarchy);
        setPrivateField(rolapHierarchy, "relation", table);
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        memberStore.addAll(int2ObjectOpenHashMap);
        Mockingbird.setNormalReturnForVoid();
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMemberFromFileStore(memberStore, "", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMemberFromFileStore1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Int2ObjectOpenHashMap int2ObjectOpenHashMap = (Int2ObjectOpenHashMap) Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", int2ObjectOpenHashMap);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapHierarchy);
        setPrivateField(rolapHierarchy, "relation", table);
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(true, CacheUtil.class, "getMembersList", "(java.lang.String,byte,java.lang.String)it.unimi.dsi.fastutil.ints.Int2ObjectMap", null, 1);
        int2ObjectOpenHashMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        memberStore.addAll(int2ObjectOpenHashMap);
        Mockingbird.setNormalReturnForVoid();
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMemberFromFileStore(memberStore, "", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMemberFromFileStore2() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        Mockingbird.enterRecordingMode();
        Int2ObjectOpenHashMap int2ObjectOpenHashMap = (Int2ObjectOpenHashMap) Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", int2ObjectOpenHashMap);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        MondrianDef.Table table = new MondrianDef.Table();
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapHierarchy);
        setPrivateField(rolapHierarchy, "relation", table);
        table.name = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        memberStore.addAll(int2ObjectOpenHashMap);
        Mockingbird.setNormalReturnForVoid();
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMemberFromFileStore(memberStore, "", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMemberFromSlices() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        memberStore.mergeStore(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        memberStore.mergeStore(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMemberFromSlices(memberStore, list, null, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMemberFromSlices1() throws Throwable {
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Int2ObjectOpenHashMap int2ObjectOpenHashMap = (Int2ObjectOpenHashMap) Mockingbird.getProxyObject(Int2ObjectOpenHashMap.class);
        Mockingbird.replaceObjectForRecording(Int2ObjectOpenHashMap.class, "<init>()", int2ObjectOpenHashMap);
        RolapHierarchy rolapHierarchy = (RolapHierarchy) Mockingbird.getProxyObject(RolapHierarchy.class);
        Dimension dimension = (Dimension) Mockingbird.getProxyObject(Dimension.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        Mockingbird.setReturnValue(rolapLevel.getHierarchy(), rolapHierarchy);
        setPrivateField(rolapHierarchy, "relation", null);
        Mockingbird.setReturnValue(rolapLevel.getDimension(), dimension);
        Mockingbird.setReturnValue(dimension.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        memberStore.addAll(int2ObjectOpenHashMap);
        Mockingbird.setNormalReturnForVoid();
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        memberStore.mergeStore(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        memberStore.mergeStore(null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMemberFromSlices(memberStore, list, "", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLoadMembersFromDataSource() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        MondrianDef.Expression expression = (MondrianDef.Expression) Mockingbird.getProxyObject(MondrianDef.Expression.class);
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(rolapLevel, "ordinalExp", expression);
        setPrivateField(rolapLevel, "keyExp", expression);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.TRUE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, expression, "equals", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), null);
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource3() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setNormalReturnForVoid();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource4() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException4 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException4);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource5() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource6() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)-1));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", Mockingbird.getProxyObject(Member.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource7() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)-1));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), null);
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.replaceObjectForRecording(Member.class, "<init>(char[])", Mockingbird.getProxyObject(Member.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource8() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[1];
        MondrianDef.Column column = (MondrianDef.Column) Mockingbird.getProxyObject(MondrianDef.Column.class);
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(rolapLevel, "keyExp", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(rolapLevel, "ordinalExp", column);
        rolapPropertys[0] = rolapProperty;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.TRUE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        column.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, column, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(rolapProperty, "exp", column2);
        column2.name = "";
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource9() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[0];
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        char[] chars2 = new char[0];
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars2, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource10() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource11() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        MondrianDef.Column column = (MondrianDef.Column) Mockingbird.getProxyObject(MondrianDef.Column.class);
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MondrianDef.Column column3 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(rolapLevel, "keyExp", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(rolapLevel, "ordinalExp", column);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.TRUE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        column.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, column, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(rolapProperty, "exp", column2);
        column2.name = "";
        setPrivateField(rolapProperty2, "exp", column3);
        column3.name = "";
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", sQLException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource12() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setException(resultSet.getLong(2), sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setNormalReturnForVoid();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testLoadMembersFromDataSource13() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        Mockingbird.setReturnValue(false, memberStore, "addMember", "(int,com.huawei.unibi.molap.engine.datastorage.Member)void", null, 1);
        Mockingbird.setReturnValue(resultSet.next(), false);
        memberStore.createSortIndex();
        Mockingbird.setNormalReturnForVoid();
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
        assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
    }
    
    public void testGetKeyGeneratorThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "getKeyGenerator", new Class[] {RolapHierarchy.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
        }
    }
    
    public void testLoadBTreeHierarchyFileStoreThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "loadBTreeHierarchyFileStore", new Class[] {HierarchyStore.class, String.class}, null, new Object[] {null, "testDimensionCacheLoaderFileStore"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
        }
    }
    
    public void testLoadHierarchyFromSliceThrowsNullPointerException() throws Throwable {
        List slices = new ArrayList(100);
        try {
            DimensionCacheLoader.loadHierarchyFromSlice(null, slices, "testDimensionCacheLoaderFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
            assertEquals("(ArrayList) slices.size()", 0, slices.size());
        }
    }
    
    public void testLoadHierarichyFromFileStoreThrowsNullPointerException() throws Throwable {
        Mockingbird.enterRecordingMode();
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.DimensionCacheLoader", "loadBTreeHierarchyFileStore", new Class[] {HierarchyStore.class, String.class}, null, new Object[] {null, "testString"});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadHierarichyFromFileStore(null, "testString");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testLoadHierarichyFromFileStoreThrowsNullPointerException1() throws Throwable {
        try {
            DimensionCacheLoader.loadHierarichyFromFileStore(null, "testDimensionCacheLoaderFileStore");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
        }
    }
    
    public void testLoadMemberFromSlicesThrowsNullPointerException() throws Throwable {
        List slices = new ArrayList(100);
        try {
            DimensionCacheLoader.loadMemberFromSlices(null, slices, null, "testDimensionCacheLoaderDataType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
            assertEquals("(ArrayList) slices.size()", 0, slices.size());
        }
    }
    
    public void testLoadMemberFromSlicesThrowsNullPointerException1() throws Throwable {
        List slices = new ArrayList(100);
        try {
            DimensionCacheLoader.loadMemberFromSlices(null, slices, "testDimensionCacheLoaderFileStore", "testDimensionCacheLoaderDataType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
            assertEquals("(ArrayList) slices.size()", 0, slices.size());
        }
    }
    
    public void testLoadMemberFromSlicesThrowsNullPointerException2() throws Throwable {
        try {
            DimensionCacheLoader.loadMemberFromSlices(null, null, null, "testDimensionCacheLoaderDataType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable() throws Throwable {
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        resultSet.close();
        Mockingbird.setNormalReturnForVoid();
        statement.close();
        Mockingbird.setNormalReturnForVoid();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberStore.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable1() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setNormalReturnForVoid();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberStore.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable2() throws Throwable {
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        MondrianDef.Column column = (MondrianDef.Column) Mockingbird.getProxyObject(MondrianDef.Column.class);
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MondrianDef.Column column3 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(rolapLevel, "keyExp", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(rolapLevel, "ordinalExp", column);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.TRUE);
        column.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, column, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(rolapProperty, "exp", column2);
        column2.name = "";
        setPrivateField(rolapProperty2, "exp", column3);
        column3.name = "";
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", null, 1);
        statement.close();
        Mockingbird.setNormalReturnForVoid();
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable3() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberStore.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable4() throws Throwable {
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        MondrianDef.Column column = (MondrianDef.Column) Mockingbird.getProxyObject(MondrianDef.Column.class);
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        MondrianDef.Column column2 = new MondrianDef.Column();
        MondrianDef.Column column3 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        setPrivateField(rolapLevel, "keyExp", Mockingbird.getProxyObject(MondrianDef.Expression.class));
        setPrivateField(rolapLevel, "ordinalExp", column);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.TRUE);
        column.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, column, "equals", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(rolapProperty, "exp", column2);
        column2.name = "";
        setPrivateField(rolapProperty2, "exp", column3);
        column3.name = "";
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        Mockingbird.setReturnValue(connection.createStatement(), null);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        connection.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DimensionCacheLoader.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
    
    public void testLoadMembersFromDataSourceThrowsThrowable5() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(DimensionCacheLoader.class, "LOGGER");
        storeStaticField(DimensionCacheLoader.class, "assignOrderKeys");
        MemberStore memberStore = (MemberStore) Mockingbird.getProxyObject(MemberStore.class);
        RolapLevel rolapLevel = (RolapLevel) Mockingbird.getProxyObject(RolapLevel.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        RolapProperty[] rolapPropertys = new RolapProperty[2];
        RolapProperty rolapProperty = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        RolapProperty rolapProperty2 = (RolapProperty) Mockingbird.getProxyObject(RolapProperty.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        MondrianDef.Column column = new MondrianDef.Column();
        MondrianDef.Column column2 = new MondrianDef.Column();
        Connection connection = (Connection) Mockingbird.getProxyObject(Connection.class);
        Statement statement = (Statement) Mockingbird.getProxyObject(Statement.class);
        ResultSet resultSet = (ResultSet) Mockingbird.getProxyObject(ResultSet.class);
        char[] chars = new char[0];
        Object obj = Mockingbird.getProxyObject(Object.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        SQLException sQLException = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException2 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        SQLException sQLException3 = (SQLException) Mockingbird.getProxyObject(SQLException.class);
        setPrivateField(memberStore, "rolapLevel", rolapLevel);
        setPrivateField(memberStore, "columnName", "");
        setPrivateField(memberStore, "nameColIndex", new Byte((byte)0));
        setPrivateField(rolapLevel, "properties", rolapPropertys);
        rolapPropertys[0] = rolapProperty;
        rolapPropertys[1] = rolapProperty2;
        setPrivateField(DimensionCacheLoader.class, "assignOrderKeys", Boolean.FALSE);
        setPrivateField(DimensionCacheLoader.class, "LOGGER", logService);
        setPrivateField(rolapProperty, "exp", column);
        column.name = "";
        setPrivateField(rolapProperty2, "exp", column2);
        column2.name = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataSource.getConnection(), connection);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(connection.createStatement(), statement);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, statement, "executeQuery", "(java.lang.String)java.sql.ResultSet", resultSet, 1);
        Mockingbird.setReturnValue(resultSet.next(), true);
        Mockingbird.setReturnValue(resultSet.getString(1), "");
        Mockingbird.setReturnValue(resultSet.getLong(2), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toCharArray", "()char[]", chars, 1);
        Mockingbird.replaceObjectForRecording(NameColumnMember.class, "<init>(char[],int)", Mockingbird.getProxyObject(NameColumnMember.class));
        Mockingbird.setReturnValue(resultSet.getObject(3), obj);
        Mockingbird.setReturnValue(resultSet.getObject(4), obj2);
        resultSet.close();
        Mockingbird.setExceptionForVoid(sQLException);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        statement.close();
        Mockingbird.setExceptionForVoid(sQLException2);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        connection.close();
        Mockingbird.setExceptionForVoid(sQLException3);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(DimensionCacheLoader.class);
        try {
            DimensionCacheLoader.loadMembersFromDataSource(memberStore, dataSource);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MemberStore.class, ex);
            assertNotNull("DimensionCacheLoader.LOGGER", getPrivateField(DimensionCacheLoader.class, "LOGGER"));
        }
    }
}

