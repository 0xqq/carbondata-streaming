/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:52:26 PM
 * Time to generate: 00:22.713 seconds
 *
 */

package com.huawei.unibi.molap.engine.aggregator.impl;

import com.agitar.lib.junit.AgitarTestCase;
import java.util.AbstractCollection;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

public class DistinctCountAggregatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DistinctCountAggregator.class;
    }
    
    public void testConstructor() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testAgg() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        distinctCountAggregator.agg(100.0, 1000.0);
        assertEquals("distinctCountAggregator.getValue()", 0.0, distinctCountAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg1() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        byte[] key = new byte[0];
        distinctCountAggregator.agg(100.0, key, 100, 1000);
        assertEquals("distinctCountAggregator.valueSet.size()", 1, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
        boolean actual = ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).contains(new Double(100.0));
        assertTrue("distinctCountAggregator.valueSet.contains(new Double(100.0))", actual);
    }
    
    public void testAgg2() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        callPrivateMethod("com.huawei.unibi.molap.engine.aggregator.impl.DistinctCountAggregator", "agg", new Class[] {Set.class}, distinctCountAggregator, new Object[] {new HashSet(100, 100.0F)});
        assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testGetValue() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        byte[] key = new byte[0];
        distinctCountAggregator.agg(100.0, key, 100, 1000);
        double result = distinctCountAggregator.getValue();
        assertEquals("result", 1.0, result, 1.0E-6);
        assertEquals("distinctCountAggregator.valueSet.size()", 1, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testGetValue1() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        double result = distinctCountAggregator.getValue();
        assertEquals("result", 0.0, result, 1.0E-6);
        assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testGetValueObject() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        Integer result = (Integer) distinctCountAggregator.getValueObject();
        assertEquals("result", 0, result.intValue());
        assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testGetValueObject1() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        byte[] key = new byte[3];
        distinctCountAggregator.agg(100.0, key, 100, 1000);
        Integer result = (Integer) distinctCountAggregator.getValueObject();
        assertEquals("result", 1, result.intValue());
        assertEquals("distinctCountAggregator.valueSet.size()", 1, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testMerge() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        distinctCountAggregator.merge(new DistinctCountAggregator());
        assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
    }
    
    public void testAggThrowsNullPointerException() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.aggregator.impl.DistinctCountAggregator", "agg", new Class[] {Set.class}, distinctCountAggregator, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractCollection.class, ex);
            assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
        }
    }
    
    public void testMergeThrowsClassCastException() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        try {
            distinctCountAggregator.merge(new AvgAggregator());
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(DistinctCountAggregator.class, ex);
            assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
        }
    }
    
    public void testMergeThrowsNullPointerException() throws Throwable {
        DistinctCountAggregator distinctCountAggregator = new DistinctCountAggregator();
        try {
            distinctCountAggregator.merge(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DistinctCountAggregator.class, ex);
            assertEquals("distinctCountAggregator.valueSet.size()", 0, ((Collection) getPrivateField(distinctCountAggregator, "valueSet")).size());
        }
    }
}

