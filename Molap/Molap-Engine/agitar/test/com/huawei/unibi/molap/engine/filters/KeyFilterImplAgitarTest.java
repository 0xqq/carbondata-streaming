/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:59:47 PM
 * Time to generate: 00:32.874 seconds
 *
 */

package com.huawei.unibi.molap.engine.filters;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.Bits;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;

public class KeyFilterImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return KeyFilterImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        new KeyFilterImpl();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructor1() throws Throwable {
        long[] maxKey = new long[3];
        InMemFilterModel filterModel = new InMemFilterModel();
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, keyGenerator, maxKey);
        assertSame("keyFilterImpl.keyGenerator", keyGenerator, keyFilterImpl.keyGenerator);
        assertNotNull("keyFilterImpl.optimizer", keyFilterImpl.optimizer);
        assertSame("keyFilterImpl.filterModel", filterModel, keyFilterImpl.filterModel);
    }
    
    public void testBinarySearch() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[] bytes = new byte[0];
        byte[][] array = new byte[1][];
        array[0] = bytes;
        byte[] key = new byte[4];
        byte[] maxKey2 = new byte[3];
        int result = keyFilterImpl.binarySearch(array, key, 0, 1, maxKey2, 100);
        assertEquals("result", 0, result);
    }
    
    public void testBinarySearch1() throws Throwable {
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl();
        byte[] bytes = new byte[4];
        byte[][] array = new byte[1][];
        array[0] = bytes;
        byte[] key = new byte[3];
        byte[] maxKey = new byte[1];
        int result = keyFilterImpl.binarySearch(array, key, 100, 0, maxKey, 1000);
        assertEquals("result", 0, result);
    }
    
    public void testBinarySearch2() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[] bytes = new byte[2];
        byte[][] array = new byte[3][];
        array[1] = bytes;
        byte[] key = new byte[3];
        key[1] = (byte)-128;
        byte[] maxKey2 = new byte[2];
        maxKey2[0] = (byte)-57;
        int result = keyFilterImpl.binarySearch(array, key, 1, 1, maxKey2, 100);
        assertEquals("result", 100, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch3() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[][] array = new byte[3][];
        byte[] key = new byte[3];
        byte[] maxKey2 = new byte[2];
        int result = keyFilterImpl.binarySearch(array, key, 0, 1, maxKey2, 100);
        assertEquals("result", 100, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch4() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[] key = new byte[4];
        byte[] maxKey2 = new byte[3];
        int result = keyFilterImpl.binarySearch((byte[][]) null, key, 0, 1, maxKey2, 100);
        assertEquals("result", 100, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch5() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[] key = new byte[3];
        byte[] maxKey2 = new byte[1];
        int result = keyFilterImpl.binarySearch((byte[][]) null, key, 100, 0, maxKey2, 1000);
        assertEquals("result", 1000, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch6() throws Throwable {
        int[] lens = new int[0];
        byte[][] maxKey = new byte[3][];
        long[] maxKey2 = new long[3];
        byte[][][] filter = new byte[0][][];
        KeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(new InMemFilterModel(filter, maxKey, 100), new MultiDimKeyVarLengthGenerator(lens), maxKey2);
        byte[] maxKey3 = new byte[3];
        byte[][] array = new byte[1][];
        byte[] key = new byte[2];
        int result = includeExcludeKeyFilterImpl.binarySearch(array, key, 100, 0, maxKey3, 0);
        assertEquals("result", 0, result);
        assertTrue("(IncludeExcludeKeyFilterImpl) includeExcludeKeyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch7() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[][] array = new byte[0][];
        byte[] key = new byte[3];
        byte[] maxKey2 = new byte[1];
        int result = includeExcludeKeyFilterImpl.binarySearch(array, key, 100, 0, maxKey2, 1000);
        assertEquals("result", -1, result);
    }
    
    public void testBinarySearch8() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[][] array = new byte[4][];
        byte[] key = new byte[0];
        byte[] maxKey2 = new byte[4];
        int result = keyFilterImpl.binarySearch(array, key, 100, 1000, maxKey2, 0);
        assertEquals("result", 0, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch9() throws Throwable {
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl();
        byte[] bytes = new byte[3];
        byte[][] array = new byte[1][];
        array[0] = bytes;
        byte[] key = new byte[1];
        key[0] = (byte)-99;
        byte[] maxKey = new byte[4];
        maxKey[0] = (byte)-1;
        int result = keyFilterImpl.binarySearch(array, key, 0, 1, maxKey, 100);
        assertEquals("result", -2, result);
    }
    
    public void testBinarySearch10() throws Throwable {
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl();
        byte[][] array = new byte[1][];
        byte[] key = new byte[3];
        byte[] maxKey = new byte[1];
        int result = keyFilterImpl.binarySearch(array, key, 100, -1, maxKey, 1000);
        assertEquals("result", 1000, result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testBinarySearch11() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        byte[][] array = new byte[0][];
        byte[] key = new byte[2];
        byte[] maxKey2 = new byte[2];
        int result = keyFilterImpl.binarySearch(array, key, 0, 1, maxKey2, 100);
        assertEquals("result", -1, result);
    }
    
    public void testFilterKey() throws Throwable {
        InMemFilterModel filterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        long[] maxKey = new long[0];
        Mockingbird.enterRecordingMode();
        long[][] longs = new long[1][];
        long[] longs2 = new long[0];
        longs[0] = longs2;
        Mockingbird.setReturnValue(filterModel.getIncludePredicateKeys(), longs);
        Mockingbird.replaceObjectForRecording(ScanOptimizerImpl.class, "<init>(long[],long[][],com.huawei.unibi.molap.keygenerator.KeyGenerator)", Mockingbird.getProxyObject(ScanOptimizerImpl.class));
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, keyGenerator, maxKey);
        KeyValue key = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        int[] ints = new int[2];
        ints[0] = 0;
        ints[1] = 50;
        Mockingbird.setReturnValue(filterModel.getColIncludeDimOffset(), ints);
        byte[][][] bytes = new byte[1][][];
        Mockingbird.setReturnValue(filterModel.getFilter(), bytes);
        byte[] bytes2 = new byte[2];
        bytes2[0] = (byte)29;
        bytes2[1] = (byte)-44;
        Mockingbird.setReturnValue(key.getArray(), bytes2);
        Mockingbird.setReturnValue(key.getKeyOffset(), 0);
        Mockingbird.setReturnValue(key.getKeyLength(), 0);
        byte[][] bytes3 = new byte[1][];
        byte[] bytes4 = new byte[0];
        bytes3[0] = bytes4;
        Mockingbird.setReturnValue(filterModel.getMaxKey(), bytes3);
        Mockingbird.setReturnValue(filterModel.getMaxSize(), -2);
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        boolean result = keyFilterImpl.filterKey(key);
        assertFalse("result", result);
        assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
    }
    
    public void testFilterKey1() throws Throwable {
        InMemFilterModel filterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        long[] maxKey = new long[0];
        Mockingbird.enterRecordingMode();
        long[][] longs = new long[0][];
        Mockingbird.setReturnValue(filterModel.getIncludePredicateKeys(), longs);
        Mockingbird.replaceObjectForRecording(ScanOptimizerImpl.class, "<init>(long[],long[][],com.huawei.unibi.molap.keygenerator.KeyGenerator)", Mockingbird.getProxyObject(ScanOptimizerImpl.class));
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, keyGenerator, maxKey);
        KeyValue key = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        int[] ints = new int[0];
        Mockingbird.setReturnValue(filterModel.getColIncludeDimOffset(), ints);
        byte[][][] bytes = new byte[3][][];
        byte[][] bytes2 = new byte[0][];
        bytes[0] = bytes2;
        byte[][] bytes3 = new byte[0][];
        bytes[1] = bytes3;
        byte[][] bytes4 = new byte[0][];
        bytes[2] = bytes4;
        Mockingbird.setReturnValue(filterModel.getFilter(), bytes);
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        boolean result = keyFilterImpl.filterKey(key);
        assertTrue("result", result);
    }
    
    public void testGetNextJump() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        KeyValue key = new KeyValue();
        KeyFilterImpl includeExcludeKeyFilterImpl = new IncludeExcludeKeyFilterImpl(new InMemFilterModel(), keyGenerator, maxKey);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "arraycopy", "(java.lang.Object,int,java.lang.Object,int,int)void", null, 1);
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        byte[] result = includeExcludeKeyFilterImpl.getNextJump(key);
        assertNull("result", result);
        assertSame("(IncludeExcludeKeyFilterImpl) includeExcludeKeyFilterImpl.keyGenerator", keyGenerator, ((IncludeExcludeKeyFilterImpl) includeExcludeKeyFilterImpl).keyGenerator);
        assertNotNull("(IncludeExcludeKeyFilterImpl) includeExcludeKeyFilterImpl.optimizer", ((IncludeExcludeKeyFilterImpl) includeExcludeKeyFilterImpl).optimizer);
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] maxKey = new long[1];
        int[] lens = new int[1];
        try {
            new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[3];
        try {
            new KeyFilterImpl(new InMemFilterModel(), null, maxKey);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
        }
    }
    
    public void testFilterKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        InMemFilterModel filterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        long[] maxKey = new long[0];
        Mockingbird.enterRecordingMode();
        long[][] longs = new long[0][];
        Mockingbird.setReturnValue(filterModel.getIncludePredicateKeys(), longs);
        Mockingbird.replaceObjectForRecording(ScanOptimizerImpl.class, "<init>(long[],long[][],com.huawei.unibi.molap.keygenerator.KeyGenerator)", Mockingbird.getProxyObject(ScanOptimizerImpl.class));
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, keyGenerator, maxKey);
        KeyValue key = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        Mockingbird.enterRecordingMode();
        int[] ints = new int[2];
        ints[0] = 0;
        ints[1] = -100;
        Mockingbird.setReturnValue(filterModel.getColIncludeDimOffset(), ints);
        byte[][][] bytes = new byte[1][][];
        byte[][] bytes2 = new byte[0][];
        bytes[0] = bytes2;
        Mockingbird.setReturnValue(filterModel.getFilter(), bytes);
        byte[] bytes3 = new byte[0];
        Mockingbird.setReturnValue(key.getArray(), bytes3);
        Mockingbird.setReturnValue(key.getKeyOffset(), 0);
        Mockingbird.setReturnValue(key.getKeyLength(), 0);
        byte[][] bytes4 = new byte[0][];
        Mockingbird.setReturnValue(filterModel.getMaxKey(), bytes4);
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        try {
            keyFilterImpl.filterKey(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        InMemFilterModel filterModel = new InMemFilterModel();
        byte[][][] filter = new byte[0][][];
        filterModel.setFilter(filter);
        int[] colIncludeDimOffset = new int[2];
        filterModel.setColIncludeDimOffset(colIncludeDimOffset);
        long[] maxKey = new long[2];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            keyFilterImpl.filterKey(new KeyValue());
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException() throws Throwable {
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl();
        try {
            keyFilterImpl.filterKey(new KeyValue());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException1() throws Throwable {
        InMemFilterModel filterModel = (InMemFilterModel) Mockingbird.getProxyObject(InMemFilterModel.class);
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        long[] maxKey = new long[0];
        Mockingbird.enterRecordingMode();
        long[][] longs = new long[3][];
        long[] longs2 = new long[0];
        longs[0] = longs2;
        longs[1] = longs2;
        long[] longs3 = new long[0];
        longs[2] = longs3;
        Mockingbird.setReturnValue(filterModel.getIncludePredicateKeys(), longs);
        Mockingbird.replaceObjectForRecording(ScanOptimizerImpl.class, "<init>(long[],long[][],com.huawei.unibi.molap.keygenerator.KeyGenerator)", Mockingbird.getProxyObject(ScanOptimizerImpl.class));
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(filterModel, keyGenerator, maxKey);
        Mockingbird.enterRecordingMode();
        int[] ints = new int[2];
        ints[0] = 0;
        ints[1] = 50;
        Mockingbird.setReturnValue(filterModel.getColIncludeDimOffset(), ints);
        byte[][][] bytes = new byte[1][][];
        Mockingbird.setReturnValue(filterModel.getFilter(), bytes);
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        try {
            keyFilterImpl.filterKey(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testFilterKeyThrowsNullPointerException2() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), new MultiDimKeyVarLengthGenerator(lens), maxKey);
        try {
            keyFilterImpl.filterKey(new KeyValue());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertTrue("keyFilterImplKeyFilterImpl.LOGGER.isDebugEnabled()", ((LogService) getPrivateField(KeyFilterImpl.class, "LOGGER")).isDebugEnabled());
        }
    }
    
    public void testGetNextJumpThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        long[] maxKey = new long[0];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), keyGenerator, maxKey);
        byte[] backKeyArray = new byte[0];
        KeyValue key = new KeyValue();
        key.setBackKeyArray(backKeyArray);
        key.setKeyLength(100);
        try {
            keyFilterImpl.getNextJump(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(System.class, ex);
            assertSame("keyFilterImpl.keyGenerator", keyGenerator, keyFilterImpl.keyGenerator);
            assertNotNull("keyFilterImpl.optimizer", keyFilterImpl.optimizer);
        }
    }
    
    public void testGetNextJumpThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[2];
        lens[0] = 100;
        KeyValue key = new KeyValue();
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        long[] maxKey = new long[2];
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), keyGenerator, maxKey);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "arraycopy", "(java.lang.Object,int,java.lang.Object,int,int)void", null, 1);
        Mockingbird.setException(true, keyGenerator.getKeyArray((byte[]) null), (Throwable) Mockingbird.getProxyObject(ArrayIndexOutOfBoundsException.class));
        Mockingbird.enterTestMode(KeyFilterImpl.class);
        try {
            keyFilterImpl.getNextJump(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertSame("keyFilterImpl.keyGenerator", keyGenerator, keyFilterImpl.keyGenerator);
            assertNotNull("keyFilterImpl.optimizer", keyFilterImpl.optimizer);
        }
    }
    
    public void testGetNextJumpThrowsNegativeArraySizeException() throws Throwable {
        KeyValue key = new KeyValue();
        key.setKeyLength(-1);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl();
        try {
            keyFilterImpl.getNextJump(key);
            fail("Expected NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertNull("keyFilterImpl.keyGenerator", keyFilterImpl.keyGenerator);
            assertNull("keyFilterImpl.optimizer", keyFilterImpl.optimizer);
        }
    }
    
    public void testGetNextJumpThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[3];
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        KeyFilterImpl keyFilterImpl = new KeyFilterImpl(new InMemFilterModel(), keyGenerator, maxKey);
        try {
            keyFilterImpl.getNextJump(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(KeyFilterImpl.class, ex);
            assertSame("keyFilterImpl.keyGenerator", keyGenerator, keyFilterImpl.keyGenerator);
            assertNotNull("keyFilterImpl.optimizer", keyFilterImpl.optimizer);
        }
    }
}

