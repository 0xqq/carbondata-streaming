/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:00:31 PM
 * Time to generate: 00:14.272 seconds
 *
 */

package com.huawei.unibi.molap.engine.aggregator.impl;

import com.agitar.lib.junit.AgitarTestCase;

public class MinAggregatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MinAggregator.class;
    }
    
    public void testConstructor() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        assertEquals("minAggregator.getValue()", Double.MAX_VALUE, minAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        minAggregator.agg(100.0, 1000.0);
        assertEquals("minAggregator.getValue()", 100.0, minAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg1() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        byte[] key = new byte[3];
        minAggregator.agg(100.0, key, 100, 1000);
        assertEquals("minAggregator.getValue()", 100.0, minAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg2() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        byte[] key = new byte[1];
        minAggregator.agg(Double.POSITIVE_INFINITY, key, 100, 1000);
        assertEquals("minAggregator.getValue()", Double.MAX_VALUE, minAggregator.getValue(), 1.0E-6);
    }
    
    public void testGetValue() throws Throwable {
        double result = new MinAggregator().getValue();
        assertEquals("result", Double.MAX_VALUE, result, 1.0E-6);
    }
    
    public void testGetValueObject() throws Throwable {
        Double result = (Double) new MinAggregator().getValueObject();
        assertEquals("result", Double.MAX_VALUE, result.doubleValue(), 1.0E-6);
    }
    
    public void testMerge() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        minAggregator.merge(new MinAggregator());
        assertEquals("minAggregator.getValue()", Double.MAX_VALUE, minAggregator.getValue(), 1.0E-6);
    }
    
    public void testMergeThrowsClassCastException() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        try {
            minAggregator.merge(new AvgAggregator());
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MinAggregator.class, ex);
            assertEquals("minAggregator.getValue()", Double.MAX_VALUE, minAggregator.getValue(), 1.0E-6);
        }
    }
    
    public void testMergeThrowsNullPointerException() throws Throwable {
        MinAggregator minAggregator = new MinAggregator();
        try {
            minAggregator.merge(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MinAggregator.class, ex);
            assertEquals("minAggregator.getValue()", Double.MAX_VALUE, minAggregator.getValue(), 1.0E-6);
        }
    }
}

