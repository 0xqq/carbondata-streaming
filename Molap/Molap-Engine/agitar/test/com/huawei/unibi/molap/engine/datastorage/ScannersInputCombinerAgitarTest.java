/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:09:33 PM
 * Time to generate: 00:26.136 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.compression.ValueCompressionModel;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.aggregator.MeasureAggregator;
import com.huawei.unibi.molap.engine.aggregator.util.AggUtil;
import com.huawei.unibi.molap.engine.scanner.Scanner;
import com.huawei.unibi.molap.engine.scanner.impl.FilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.KeyValue;
import com.huawei.unibi.molap.engine.scanner.impl.NonFilterTreeScanner;
import com.huawei.unibi.molap.engine.scanner.impl.ParallelNonFilterTreeScanner;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import com.huawei.unibi.molap.util.ByteUtil;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.List;

public class ScannersInputCombinerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ScannersInputCombiner.class;
    }
    
    public void testConstructor() throws Throwable {
        List scanners = new ArrayList(100);
        List aggNames = new ArrayList(1000);
        int[] lens = new int[2];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, keyGenerator, aggNames, true);
        assertSame("scannersInputCombiner.keyGenerator", keyGenerator, getPrivateField(scannersInputCombiner, "keyGenerator"));
        assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
        assertTrue("scannersInputCombiner.hasFactCount", ((Boolean) getPrivateField(scannersInputCombiner, "hasFactCount")).booleanValue());
        assertSame("scannersInputCombiner.aggNames", aggNames, getPrivateField(scannersInputCombiner, "aggNames"));
        assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testKeyComparatorConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator", "<init>", new Class[] {ScannersInputCombiner.class}, null, new Object[] {new ScannersInputCombiner(new ArrayList(100), null, new ArrayList(1000), true)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRowTempFileConstructor() throws Throwable {
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile", "<init>", new Class[] {Pair.class, int.class}, null, new Object[] {new Pair("testString", ""), new Integer(100)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCaliculateMaxMin() throws Throwable {
        int[] lens = new int[1];
        double[] value = new double[0];
        byte[] key = new byte[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "caliculateMaxMin", new Class[] {Pair.class}, scannersInputCombiner, new Object[] {new Pair(key, value)});
        assertNull("scannersInputCombiner.getValueCompressionMode()", scannersInputCombiner.getValueCompressionMode());
    }
    
    public void testCloseInput() throws Throwable {
        int[] lens = new int[2];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        scannersInputCombiner.closeInput();
        assertNull("scannersInputCombiner.getValueCompressionMode()", scannersInputCombiner.getValueCompressionMode());
    }
    
    public void testGetLeafNodeInfo() throws Throwable {
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        List result = scannersInputCombiner.getLeafNodeInfo();
        assertNull("result", result);
    }
    
    public void testGetNextHierTuple() throws Throwable {
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(1000), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(100), true);
        Pair result = scannersInputCombiner.getNextHierTuple();
        assertNull("result", result);
    }
    
    public void testGetNextHierTupleWithAggressiveMocks() throws Throwable {
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[2];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[2];
        byte[] bytes = new byte[0];
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair = new Pair();
        byte[] bytes2 = new byte[0];
        double[] doubles3 = new double[2];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair2 = new Pair();
        byte[] bytes3 = new byte[0];
        double[] doubles4 = new double[2];
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj4 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator3 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator4 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        setPrivateField(scannersInputCombiner, "scanners", list);
        setPrivateField(scannersInputCombiner, "tempRows", list2);
        setPrivateField(scannersInputCombiner, "decimalLength", ints);
        setPrivateField(scannersInputCombiner, "lastAggs", measureAggregators);
        setPrivateField(scannersInputCombiner, "lastKey", bytes);
        setPrivateField(scannersInputCombiner, "maxData", doubles);
        setPrivateField(scannersInputCombiner, "minData", doubles2);
        setPrivateField(scannersInputCombiner, "keyGenerator", null);
        setPrivateField(scannersInputCombiner, "hasFactCount", Boolean.FALSE);
        setPrivateField(scannersInputCombiner, "aggNames", list3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list3.size(), 2);
        setPrivateField(obj, "row", pair);
        setPrivateField(obj, "fileNumber", new Integer(0));
        Mockingbird.enterNormalMode();
        pair.setKey(bytes2);
        pair.setValue(doubles3);
        doubles3[0] = 0.0;
        doubles3[1] = 0.0;
        measureAggregators[0] = measureAggregator;
        measureAggregators[1] = measureAggregator2;
        setPrivateField(obj2, "row", pair2);
        setPrivateField(obj2, "fileNumber", new Integer(-1));
        pair2.setKey(bytes3);
        pair2.setValue(doubles4);
        setPrivateField(obj3, "fileNumber", new Integer(-1));
        setPrivateField(obj4, "fileNumber", new Integer(1));
        setPrivateField(obj5, "fileNumber", new Integer(2));
        setPrivateField(obj6, "fileNumber", new Integer(-2));
        doubles4[0] = 0.0;
        doubles4[1] = 0.0;
        ints[0] = 0;
        ints[1] = 0;
        measureAggregators2[0] = measureAggregator3;
        measureAggregators2[1] = measureAggregator4;
        doubles[0] = 0.0;
        doubles[1] = 0.0;
        doubles2[0] = 0.0;
        doubles2[1] = 0.0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj);
        Mockingbird.setReturnValue(list.get(0), scanner);
        Mockingbird.setReturnValue(scanner.isDone(), true);
        Mockingbird.setReturnValue(list.remove(0), null);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(true, ByteUtil.class, "compare", "(byte[],byte[])int", new Integer(0), 1);
        measureAggregator.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        measureAggregator2.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj2);
        Mockingbird.setReturnValue(list.get(-1), scanner2);
        Mockingbird.setReturnValue(scanner2.isDone(), true);
        Mockingbird.setReturnValue(list.remove(-1), null);
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj4);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj5);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), obj6);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(true, ByteUtil.class, "compare", "(byte[],byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, measureAggregator, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"."}, new Integer(-1), 1);
        Mockingbird.setReturnValue(false, measureAggregator2, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators2, 1);
        Mockingbird.setReturnValue(false, measureAggregator3, "agg", "(double,double)void", null, 1);
        Mockingbird.setReturnValue(false, measureAggregator4, "agg", "(double,double)void", null, 1);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        Pair result = scannersInputCombiner.getNextHierTuple();
        assertNotNull("result.getKey()", result.getKey());
        int actual = ((MeasureAggregator[]) getPrivateField(scannersInputCombiner, "lastAggs")).length;
        assertEquals("scannersInputCombiner.lastAggs.length", 2, actual);
        assertNotNull("scannersInputCombiner.tempRows", getPrivateField(scannersInputCombiner, "tempRows"));
        assertEquals("scannersInputCombiner.lastKey.length", 0, ((byte[]) getPrivateField(scannersInputCombiner, "lastKey")).length);
        assertNotNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testGetNextHierTupleWithAggressiveMocks1() throws Throwable {
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[2];
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair = new Pair();
        double[] doubles3 = new double[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] ints2 = new int[0];
        double[] doubles4 = new double[0];
        byte[] bytes = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair2 = new Pair();
        byte[] bytes2 = new byte[0];
        double[] doubles5 = new double[2];
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] ints3 = new int[0];
        double[] doubles6 = new double[0];
        byte[] bytes3 = new byte[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair3 = new Pair();
        byte[] bytes4 = new byte[0];
        double[] doubles7 = new double[2];
        Scanner scanner3 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Object obj4 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj5 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj6 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Object obj7 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        MeasureAggregator[] measureAggregators3 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator3 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator4 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        setPrivateField(scannersInputCombiner, "lastKey", null);
        setPrivateField(scannersInputCombiner, "scanners", list);
        setPrivateField(scannersInputCombiner, "tempRows", list2);
        setPrivateField(scannersInputCombiner, "decimalLength", ints);
        setPrivateField(scannersInputCombiner, "maxData", doubles);
        setPrivateField(scannersInputCombiner, "minData", doubles2);
        setPrivateField(scannersInputCombiner, "keyGenerator", null);
        setPrivateField(scannersInputCombiner, "hasFactCount", Boolean.FALSE);
        setPrivateField(scannersInputCombiner, "aggNames", list3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list3.size(), 2);
        setPrivateField(obj, "row", pair);
        setPrivateField(obj, "fileNumber", new Integer(0));
        Mockingbird.enterNormalMode();
        pair.setKey((Object) null);
        pair.setValue(doubles3);
        keyValue.setMsrCols(ints2);
        setPrivateField(obj2, "row", pair2);
        setPrivateField(obj2, "fileNumber", new Integer(0));
        pair2.setKey(bytes2);
        pair2.setValue(doubles5);
        keyValue2.setMsrCols(ints3);
        doubles5[0] = 0.0;
        doubles5[1] = 0.0;
        measureAggregators2[0] = measureAggregator;
        measureAggregators2[1] = measureAggregator2;
        setPrivateField(obj3, "row", pair3);
        setPrivateField(obj3, "fileNumber", new Integer(-1));
        pair3.setKey(bytes4);
        pair3.setValue(doubles7);
        setPrivateField(obj4, "fileNumber", new Integer(-1));
        setPrivateField(obj5, "fileNumber", new Integer(1));
        setPrivateField(obj6, "fileNumber", new Integer(2));
        setPrivateField(obj7, "fileNumber", new Integer(-2));
        doubles7[0] = 0.0;
        doubles7[1] = 0.0;
        ints[0] = 0;
        ints[1] = 0;
        measureAggregators3[0] = measureAggregator3;
        measureAggregators3[1] = measureAggregator4;
        doubles[0] = 0.0;
        doubles[1] = 0.0;
        doubles2[0] = 0.0;
        doubles2[1] = 0.0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj);
        Mockingbird.setReturnValue(list.get(0), scanner);
        Mockingbird.setReturnValue(scanner.isDone(), false);
        Mockingbird.setReturnValue(scanner.getNext(), keyValue);
        Mockingbird.setReturnValue(keyValue.getOriginalValue(), doubles4);
        Mockingbird.setReturnValue(keyValue.getOriginalKey(), bytes);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj8 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj8);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "binarySearch", "(java.util.List,java.lang.Object,java.util.Comparator)int", new Object[] {list2, obj8, comparator}, new Integer(0), 1);
        list2.add(0, obj8);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj2);
        Mockingbird.setReturnValue(list.get(0), scanner2);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue2);
        Mockingbird.setReturnValue(keyValue2.getOriginalValue(), doubles6);
        Mockingbird.setReturnValue(keyValue2.getOriginalKey(), bytes3);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj9 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj9);
        Comparator comparator2 = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator2);
        Mockingbird.setReturnValue(true, Collections.class, "binarySearch", "(java.util.List,java.lang.Object,java.util.Comparator)int", new Object[] {list2, obj9, comparator2}, new Integer(0), 1);
        list2.add(0, obj9);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators2, 1);
        measureAggregator.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        measureAggregator2.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj3);
        Mockingbird.setReturnValue(list.get(-1), scanner3);
        Mockingbird.setReturnValue(scanner3.isDone(), true);
        Mockingbird.setReturnValue(list.remove(-1), null);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj4);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj5);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj6);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), obj7);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(true, ByteUtil.class, "compare", "(byte[],byte[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, measureAggregator, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, "", "indexOf", "(java.lang.String)int", new Object[] {"."}, new Integer(-1), 1);
        Mockingbird.setReturnValue(false, measureAggregator2, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators3, 1);
        Mockingbird.setReturnValue(false, measureAggregator3, "agg", "(double,double)void", null, 1);
        Mockingbird.setReturnValue(false, measureAggregator4, "agg", "(double,double)void", null, 1);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        Pair result = scannersInputCombiner.getNextHierTuple();
        assertNotNull("result.getKey()", result.getKey());
        int actual = ((MeasureAggregator[]) getPrivateField(scannersInputCombiner, "lastAggs")).length;
        assertEquals("scannersInputCombiner.lastAggs.length", 2, actual);
        assertNotNull("scannersInputCombiner.tempRows", getPrivateField(scannersInputCombiner, "tempRows"));
        assertEquals("scannersInputCombiner.lastKey.length", 0, ((byte[]) getPrivateField(scannersInputCombiner, "lastKey")).length);
        assertNotNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testGetNextHierTupleWithAggressiveMocks2() throws Throwable {
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        int[] ints = new int[2];
        double[] doubles = new double[2];
        double[] doubles2 = new double[2];
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair = new Pair();
        double[] doubles3 = new double[0];
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes = new byte[0];
        MeasureAggregator[] measureAggregators = new MeasureAggregator[0];
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair2 = new Pair();
        byte[] bytes2 = new byte[0];
        double[] doubles4 = new double[2];
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes3 = new byte[0];
        MeasureAggregator[] measureAggregators2 = new MeasureAggregator[2];
        MeasureAggregator measureAggregator = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        MeasureAggregator measureAggregator2 = (MeasureAggregator) Mockingbird.getProxyObject(MeasureAggregator.class);
        double[] doubles5 = new double[2];
        setPrivateField(scannersInputCombiner, "lastKey", null);
        setPrivateField(scannersInputCombiner, "scanners", list);
        setPrivateField(scannersInputCombiner, "tempRows", list2);
        setPrivateField(scannersInputCombiner, "decimalLength", ints);
        setPrivateField(scannersInputCombiner, "maxData", doubles);
        setPrivateField(scannersInputCombiner, "minData", doubles2);
        setPrivateField(scannersInputCombiner, "hasFactCount", Boolean.FALSE);
        setPrivateField(scannersInputCombiner, "aggNames", list3);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list3.size(), 2);
        setPrivateField(obj, "row", pair);
        setPrivateField(obj, "fileNumber", new Integer(0));
        Mockingbird.enterNormalMode();
        pair.setKey((Object) null);
        pair.setValue(doubles3);
        keyValue.setMsrCols((int[]) null);
        setPrivateField(obj2, "row", pair2);
        setPrivateField(obj2, "fileNumber", new Integer(0));
        pair2.setKey(bytes2);
        pair2.setValue(doubles4);
        keyValue2.setMsrCols((int[]) null);
        doubles4[0] = 0.0;
        doubles4[1] = 0.0;
        measureAggregators2[0] = measureAggregator;
        measureAggregators2[1] = measureAggregator2;
        ints[0] = 0;
        ints[1] = 0;
        doubles5[0] = -1.401298464324817E-45;
        doubles5[1] = 0.0;
        doubles[0] = 0.0;
        doubles[1] = 2.802596928649634E-45;
        doubles2[0] = -2.802596928649634E-45;
        doubles2[1] = -1.401298464324817E-45;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj);
        Mockingbird.setReturnValue(list.get(0), scanner);
        Mockingbird.setReturnValue(scanner.isDone(), false);
        Mockingbird.setReturnValue(scanner.getNext(), keyValue);
        Mockingbird.setReturnValue(keyValue.getOriginalKey(), bytes);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj3 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj3);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "binarySearch", "(java.util.List,java.lang.Object,java.util.Comparator)int", new Object[] {list2, obj3, comparator}, new Integer(-1), 1);
        list2.add(0, obj3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators, 1);
        Mockingbird.setReturnValue(list2.size(), 1);
        Mockingbird.setReturnValue(list2.remove(0), obj2);
        Mockingbird.setReturnValue(list.get(0), scanner2);
        Mockingbird.setReturnValue(scanner2.isDone(), false);
        Mockingbird.setReturnValue(scanner2.getNext(), keyValue2);
        Mockingbird.setReturnValue(keyValue2.getOriginalKey(), bytes3);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj4 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj4);
        Comparator comparator2 = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator2);
        Mockingbird.setReturnValue(true, Collections.class, "binarySearch", "(java.util.List,java.lang.Object,java.util.Comparator)int", new Object[] {list2, obj4, comparator2}, new Integer(-2), 1);
        list2.add(1, obj4);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, AggUtil.class, "getAggregators", "(java.util.List,boolean,com.huawei.unibi.molap.keygenerator.KeyGenerator,com.huawei.unibi.molap.engine.datastorage.InMemoryCube)com.huawei.unibi.molap.engine.aggregator.MeasureAggregator[]", measureAggregators2, 1);
        measureAggregator.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        measureAggregator2.agg(0.0, 0.0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(list2.size(), 0);
        Mockingbird.setReturnValue(false, measureAggregator, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, "", "substring", "(int,int)java.lang.String", new Object[] {new Integer(2), new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, measureAggregator2, "getValue", "()double", new Double(0.0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Pair pair3 = new Pair();
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", pair3);
        Mockingbird.enterNormalMode();
        pair3.setValue(doubles5);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        Pair result = scannersInputCombiner.getNextHierTuple();
        assertNull("result.getKey()", result.getKey());
        int actual = ((MeasureAggregator[]) getPrivateField(scannersInputCombiner, "lastAggs")).length;
        assertEquals("scannersInputCombiner.lastAggs.length", 2, actual);
        assertNotNull("scannersInputCombiner.tempRows", getPrivateField(scannersInputCombiner, "tempRows"));
        assertNull("scannersInputCombiner.lastKey", getPrivateField(scannersInputCombiner, "lastKey"));
        assertNotNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testGetNextSortData() throws Throwable {
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        Object result = callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "getNextSortData", new Class[] {}, scannersInputCombiner, new Object[] {});
        assertNull("result", result);
    }
    
    public void testGetValueCompressionMode() throws Throwable {
        int[] lens = new int[2];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        ValueCompressionModel result = scannersInputCombiner.getValueCompressionMode();
        assertNull("result", result);
    }
    
    public void testInitInput() throws Throwable {
        List scanners = new ArrayList(100);
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, null, new ArrayList(1000), true);
        scannersInputCombiner.initInput();
        assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
        assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testInitInput1() throws Throwable {
        int[] lens = new int[2];
        int[] lens2 = new int[0];
        KeyValue currKey = new KeyValue();
        int[] lens3 = new int[2];
        byte[] startKey = new byte[3];
        List scanners = new ArrayList(100);
        byte[] endKey = new byte[2];
        int[] msrs = new int[1];
        FilterTreeScanner filterTreeScanner = new FilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens2), currKey, msrs, new FileHolderImpl());
        byte[] endKey2 = new byte[2];
        int[] msrs2 = new int[0];
        FilterTreeScanner filterTreeScanner2 = new FilterTreeScanner(startKey, endKey2, new MultiDimKeyVarLengthGenerator(lens3), currKey, msrs2, new FileHolderImpl(100));
        boolean hasFactCount = scanners.add(filterTreeScanner);
        scanners.add(filterTreeScanner2);
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), hasFactCount);
        scannersInputCombiner.initInput();
        assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
        boolean actual = filterTreeScanner.equals(((List) getPrivateField(scannersInputCombiner, "scanners")).get(0));
        assertTrue("scannersInputCombiner.scanners.get(0) had filterTreeScanner removed", actual);
    }
    
    public void testInitInputWithAggressiveMocks() throws Throwable {
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Scanner scanner3 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] ints = new int[0];
        double[] doubles = new double[0];
        byte[] bytes = new byte[0];
        Scanner scanner4 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] ints2 = new int[0];
        double[] doubles2 = new double[0];
        byte[] bytes2 = new byte[0];
        setPrivateField(scannersInputCombiner, "scanners", list);
        setPrivateField(scannersInputCombiner, "tempRows", list2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterNormalMode();
        keyValue.setMsrCols(ints);
        keyValue2.setMsrCols(ints2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner);
        Mockingbird.setReturnValue(scanner.isDone(), true);
        Mockingbird.setReturnValue(list.remove(1), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner2);
        Mockingbird.setReturnValue(scanner2.isDone(), true);
        Mockingbird.setReturnValue(list.remove(1), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner3);
        Mockingbird.setReturnValue(scanner3.isDone(), false);
        Mockingbird.setReturnValue(scanner3.getNext(), keyValue);
        Mockingbird.setReturnValue(keyValue.getOriginalValue(), doubles);
        Mockingbird.setReturnValue(keyValue.getOriginalKey(), bytes);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj);
        Mockingbird.setReturnValue(list2.add(obj), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner4);
        Mockingbird.setReturnValue(scanner4.isDone(), false);
        Mockingbird.setReturnValue(scanner4.getNext(), keyValue2);
        Mockingbird.setReturnValue(keyValue2.getOriginalValue(), doubles2);
        Mockingbird.setReturnValue(keyValue2.getOriginalKey(), bytes2);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj2);
        Mockingbird.setReturnValue(list2.add(obj2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {list2, comparator}, null, 1);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        scannersInputCombiner.initInput();
        assertNotNull("scannersInputCombiner.tempRows", getPrivateField(scannersInputCombiner, "tempRows"));
        assertNotNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testInitInputWithAggressiveMocks1() throws Throwable {
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Scanner scanner = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Scanner scanner2 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        Scanner scanner3 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        byte[] bytes = new byte[0];
        Scanner scanner4 = (Scanner) Mockingbird.getProxyObject(Scanner.class);
        KeyValue keyValue2 = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] ints = new int[0];
        double[] doubles = new double[0];
        byte[] bytes2 = new byte[0];
        setPrivateField(scannersInputCombiner, "scanners", list);
        setPrivateField(scannersInputCombiner, "tempRows", list2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterNormalMode();
        keyValue.setMsrCols((int[]) null);
        keyValue2.setMsrCols(ints);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner);
        Mockingbird.setReturnValue(scanner.isDone(), true);
        Mockingbird.setReturnValue(list.remove(1), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner2);
        Mockingbird.setReturnValue(scanner2.isDone(), true);
        Mockingbird.setReturnValue(list.remove(1), null);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner3);
        Mockingbird.setReturnValue(scanner3.isDone(), false);
        Mockingbird.setReturnValue(scanner3.getNext(), keyValue);
        Mockingbird.setReturnValue(keyValue.getOriginalKey(), bytes);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj);
        Mockingbird.setReturnValue(list2.add(obj), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), scanner4);
        Mockingbird.setReturnValue(scanner4.isDone(), false);
        Mockingbird.setReturnValue(scanner4.getNext(), keyValue2);
        Mockingbird.setReturnValue(keyValue2.getOriginalValue(), doubles);
        Mockingbird.setReturnValue(keyValue2.getOriginalKey(), bytes2);
        Mockingbird.replaceObjectForRecording(Pair.class, "<init>(java.lang.Object,java.lang.Object)", new Pair());
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), "<init>(com.huawei.unibi.molap.engine.datastorage.Pair,int)", obj2);
        Mockingbird.setReturnValue(list2.add(obj2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), "<init>(com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner)", comparator);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {list2, comparator}, null, 1);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        scannersInputCombiner.initInput();
        assertNotNull("scannersInputCombiner.tempRows", getPrivateField(scannersInputCombiner, "tempRows"));
        assertNotNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
    }
    
    public void testKeyComparatorCompareWithAggressiveMocks() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), true);
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair = (Pair) Mockingbird.getProxyObject(Pair.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair2 = (Pair) Mockingbird.getProxyObject(Pair.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[2];
        byte[] bytes2 = new byte[2];
        setPrivateField(comparator, "this$0", scannersInputCombiner);
        setPrivateField(obj, "row", pair);
        setPrivateField(obj2, "row", pair2);
        setPrivateField(scannersInputCombiner, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 1);
        Mockingbird.enterNormalMode();
        pair.setKey(bytes);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        pair2.setKey(bytes2);
        bytes2[0] = (byte)0;
        bytes2[1] = (byte)0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 2);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeySizeInBytes", "()int", new Integer(1), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator", "compare", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile")}, comparator, new Object[] {obj, obj2})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testKeyComparatorCompareWithAggressiveMocks1() throws Throwable {
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"), true);
        ScannersInputCombiner scannersInputCombiner = (ScannersInputCombiner) Mockingbird.getProxyObject(ScannersInputCombiner.class);
        Object obj = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair = (Pair) Mockingbird.getProxyObject(Pair.class);
        Object obj2 = Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"));
        Pair pair2 = (Pair) Mockingbird.getProxyObject(Pair.class);
        KeyGenerator keyGenerator = (KeyGenerator) Mockingbird.getProxyObject(KeyGenerator.class);
        byte[] bytes = new byte[3];
        byte[] bytes2 = new byte[3];
        setPrivateField(comparator, "this$0", scannersInputCombiner);
        setPrivateField(obj, "row", pair);
        setPrivateField(obj2, "row", pair2);
        setPrivateField(scannersInputCombiner, "keyGenerator", keyGenerator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 1);
        Mockingbird.enterNormalMode();
        pair.setKey(bytes);
        bytes[0] = (byte)0;
        bytes[1] = (byte)0;
        bytes[2] = (byte)1;
        pair2.setKey(bytes2);
        bytes2[0] = (byte)0;
        bytes2[1] = (byte)0;
        bytes2[2] = (byte)0;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 2);
        Mockingbird.setReturnValue(false, keyGenerator, "getKeySizeInBytes", "()int", new Integer(3), 1);
        Mockingbird.enterTestMode(Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator"));
        int result = ((Number) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$KeyComparator", "compare", new Class[] {Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile"), Class.forName("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner$RowTempFile")}, comparator, new Object[] {obj, obj2})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCaliculateMaxMinThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(1000), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(100), true);
        double[] value = new double[1];
        byte[] key = new byte[0];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "caliculateMaxMin", new Class[] {Pair.class}, scannersInputCombiner, new Object[] {new Pair(key, value)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
        }
    }
    
    public void testCaliculateMaxMinThrowsNullPointerException1() throws Throwable {
        byte[] key = new byte[2];
        int[] lens = new int[2];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "caliculateMaxMin", new Class[] {Pair.class}, scannersInputCombiner, new Object[] {new Pair(key, null)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
        }
    }
    
    public void testInitInputThrowsConcurrentModificationException() throws Throwable {
        ArrayList scanners = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, (KeyGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class), (List) Mockingbird.getProxyObject(ArrayList.class), true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, scanners, "size", "()int", new Object[] {}, new Integer(4), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, scanners, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        ParallelNonFilterTreeScanner parallelNonFilterTreeScanner = (ParallelNonFilterTreeScanner) Mockingbird.getProxyObject(ParallelNonFilterTreeScanner.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, parallelNonFilterTreeScanner, 1);
        Mockingbird.setReturnValue(parallelNonFilterTreeScanner.isDone(), true);
        Mockingbird.setReturnValue(false, scanners, "remove", "(int)java.lang.Object", new Object[] {new Integer(1)}, Mockingbird.getProxyObject(FilterTreeScanner.class), 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setException(false, iterator, "next", "()java.lang.Object", new Object[] {}, (Throwable) Mockingbird.getProxyObject(ConcurrentModificationException.class), 1);
        Mockingbird.enterTestMode(ScannersInputCombiner.class);
        try {
            scannersInputCombiner.initInput();
            fail("Expected ConcurrentModificationException to be thrown");
        } catch (ConcurrentModificationException ex) {
            assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
            assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
        }
    }
    
    public void testInitInputThrowsIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        List scanners = new ArrayList(100);
        int[] lens2 = new int[1];
        byte[] startKey = new byte[3];
        byte[] endKey = new byte[3];
        int[] msrs = new int[0];
        NonFilterTreeScanner nonFilterTreeScanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, new MultiDimKeyVarLengthGenerator(lens2), new ArrayList(1000), scanners.add(nonFilterTreeScanner));
        try {
            scannersInputCombiner.initInput();
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 1, Size: 1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
            assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
            assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
        }
    }
    
    public void testInitInputThrowsNullPointerException() throws Throwable {
        List scanners = new ArrayList(100);
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(scanners, new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), scanners.add((Object) null));
        try {
            scannersInputCombiner.initInput();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
            assertSame("scannersInputCombiner.scanners", scanners, getPrivateField(scannersInputCombiner, "scanners"));
            assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
        }
    }
    
    public void testInitInputThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[0];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(null, new MultiDimKeyVarLengthGenerator(lens), new ArrayList(100), true);
        try {
            scannersInputCombiner.initInput();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
            assertEquals("scannersInputCombiner.tempRows.size()", 0, ((Collection) getPrivateField(scannersInputCombiner, "tempRows")).size());
            assertNull("scannersInputCombiner.scanners", getPrivateField(scannersInputCombiner, "scanners"));
        }
    }
    
    public void testSetDecimalsThrowsNullPointerException() throws Throwable {
        int[] lens = new int[1];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "setDecimals", new Class[] {int.class, double.class}, scannersInputCombiner, new Object[] {new Integer(100), new Double(42.41999816894531)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
        }
    }
    
    public void testSetDecimalsThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[2];
        ScannersInputCombiner scannersInputCombiner = new ScannersInputCombiner(new ArrayList(100), new MultiDimKeyVarLengthGenerator(lens), new ArrayList(1000), true);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.ScannersInputCombiner", "setDecimals", new Class[] {int.class, double.class}, scannersInputCombiner, new Object[] {new Integer(100), new Double(100.0)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScannersInputCombiner.class, ex);
        }
    }
}

