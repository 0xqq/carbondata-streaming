/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:58 PM
 * Time to generate: 00:13.865 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;

public class PairAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Pair.class;
    }
    
    public void testConstructor() throws Throwable {
        Pair pair = new Pair(new Integer(10), "testString");
        assertEquals("pair.getKey()", new Integer(10), pair.getKey());
        assertEquals("pair.getValue()", "testString", pair.getValue());
    }
    
    public void testConstructor1() throws Throwable {
        Pair pair = new Pair();
        assertNull("pair.getKey()", pair.getKey());
    }
    
    public void testEquals() throws Throwable {
        Pair pair = new Pair("", new Pair("", new Object()));
        boolean result = pair.equals(new Pair("", new Object()));
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        boolean result = new Pair(new Pair(new Character(' '), "1 "), null).equals(new Pair("", ""));
        assertFalse("result", result);
    }
    
    public void testEquals2() throws Throwable {
        boolean result = new Pair("", new Integer(10)).equals(new Pair());
        assertFalse("result", result);
    }
    
    public void testEquals3() throws Throwable {
        Pair obj = new Pair("", null);
        boolean result = new Pair("", null).equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals4() throws Throwable {
        Pair key = new Pair();
        Pair obj = new Pair(key, "");
        boolean result = new Pair(key, new Integer(3504)).equals(obj);
        assertFalse("result", result);
    }
    
    public void testEquals5() throws Throwable {
        boolean result = new Pair(null, "").equals(new Pair());
        assertFalse("result", result);
    }
    
    public void testEquals6() throws Throwable {
        Integer key = new Integer(32);
        Integer value = new Integer(0);
        Pair pair = new Pair(key, value);
        boolean result = pair.equals(new Pair(key, value));
        assertTrue("result", result);
    }
    
    public void testEquals7() throws Throwable {
        boolean result = new Pair(null, null).equals(new Pair(Boolean.FALSE, "testString"));
        assertFalse("result", result);
    }
    
    public void testEquals8() throws Throwable {
        Pair pair = new Pair("", new Integer(10));
        boolean result = pair.equals(new Pair("", new Integer(0)));
        assertFalse("result", result);
    }
    
    public void testEquals9() throws Throwable {
        Pair obj = new Pair();
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals10() throws Throwable {
        boolean result = new Pair().equals(new Pair());
        assertTrue("result", result);
    }
    
    public void testEquals11() throws Throwable {
        boolean result = new Pair().equals("");
        assertFalse("result", result);
    }
    
    public void testEquals12() throws Throwable {
        Integer key = new Integer(10);
        Pair pair = new Pair(key, null);
        boolean result = pair.equals(new Pair(key, ""));
        assertFalse("result", result);
    }
    
    public void testEquals13() throws Throwable {
        Pair pair = new Pair(null, " ");
        boolean result = pair.equals(new Pair(null, " "));
        assertTrue("result", result);
    }
    
    public void testHashCode() throws Throwable {
        int result = new Pair(null, "testString").hashCode();
        assertEquals("result", 1727749892, result);
    }
    
    public void testHashCode1() throws Throwable {
        Pair key = new Pair("", "");
        key.setValue((Object) null);
        int result = new Pair(key, new Integer(10)).hashCode();
        assertEquals("result", 30762, result);
    }
    
    public void testHashCode2() throws Throwable {
        new Pair(" ", new Object()).hashCode();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHashCode3() throws Throwable {
        int result = new Pair(new Integer(2), null).hashCode();
        assertEquals("result", 1023, result);
    }
    
    public void testHashCode4() throws Throwable {
        new Pair(new Object(), new Pair()).hashCode();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHashCode5() throws Throwable {
        int result = new Pair(null, null).hashCode();
        assertEquals("result", 961, result);
    }
    
    public void testSetKey() throws Throwable {
        Pair pair = new Pair();
        pair.setKey("testString");
        assertEquals("pair.getKey()", "testString", pair.getKey());
    }
    
    public void testSetValue() throws Throwable {
        Pair pair = new Pair();
        pair.setValue("");
        assertEquals("pair.getValue()", "", pair.getValue());
    }
}

