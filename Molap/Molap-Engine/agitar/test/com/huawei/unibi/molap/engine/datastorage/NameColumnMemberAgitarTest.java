/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:23 PM
 * Time to generate: 00:13.428 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;

public class NameColumnMemberAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NameColumnMember.class;
    }
    
    public void testConstructor() throws Throwable {
        char[] name = new char[3];
        NameColumnMember nameColumnMember = new NameColumnMember(name, 100);
        assertNull("nameColumnMember.attributes", nameColumnMember.attributes);
        assertSame("nameColumnMember.name", name, nameColumnMember.name);
        assertEquals("nameColumnMember.nameColumnIndex", new Integer(100), getPrivateField(nameColumnMember, "nameColumnIndex"));
    }
    
    public void testEquals() throws Throwable {
        char[] name = new char[0];
        boolean result = new NameColumnMember(name, 100).equals("testString");
        assertFalse("result", result);
    }
    
    public void testEquals1() throws Throwable {
        char[] name = new char[0];
        NameColumnMember obj = new NameColumnMember(name, 100);
        boolean result = obj.equals(obj);
        assertTrue("result", result);
    }
    
    public void testEquals2() throws Throwable {
        char[] name = new char[0];
        char[] name2 = new char[0];
        boolean result = new NameColumnMember(name2, 100).equals(new Member(name));
        assertTrue("result", result);
    }
    
    public void testHashCode() throws Throwable {
        Object[] properties = new Object[4];
        properties[0] = new Character('1');
        char[] name = new char[3];
        NameColumnMember nameColumnMember = new NameColumnMember(name, 0);
        nameColumnMember.setAttributes(properties);
        int result = nameColumnMember.hashCode();
        assertEquals("result", 80, result);
    }
    
    public void testEqualsThrowsArrayIndexOutOfBoundsException() throws Throwable {
        char[] name = new char[1];
        Object[] properties = new Object[0];
        NameColumnMember nameColumnMember = new NameColumnMember(name, 100);
        nameColumnMember.setAttributes(properties);
        try {
            nameColumnMember.equals(new NameColumnMember("testString".toCharArray(), 1000));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(NameColumnMember.class, ex);
        }
    }
    
    public void testEqualsThrowsNullPointerException() throws Throwable {
        char[] name = new char[3];
        char[] name2 = new char[3];
        try {
            new NameColumnMember(name2, 100).equals(new NameColumnMember(name, 1000));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NameColumnMember.class, ex);
        }
    }
    
    public void testHashCodeThrowsArrayIndexOutOfBoundsException() throws Throwable {
        Object[] properties = new Object[0];
        char[] name = new char[0];
        NameColumnMember nameColumnMember = new NameColumnMember(name, 100);
        nameColumnMember.setAttributes(properties);
        try {
            nameColumnMember.hashCode();
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(NameColumnMember.class, ex);
        }
    }
    
    public void testHashCodeThrowsNullPointerException() throws Throwable {
        char[] name = new char[3];
        try {
            new NameColumnMember(name, 100).hashCode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NameColumnMember.class, ex);
        }
    }
}

