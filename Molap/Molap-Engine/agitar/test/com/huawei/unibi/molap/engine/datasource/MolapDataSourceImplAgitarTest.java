/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:03:10 PM
 * Time to generate: 00:49.303 seconds
 *
 */

package com.huawei.unibi.molap.engine.datasource;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapStatement;
import mondrian.olap.Util;
import mondrian.rolap.RolapConnectionProperties;

public class MolapDataSourceImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapDataSourceImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        MolapDataSourceImpl molapDataSourceImpl = new MolapDataSourceImpl(Util.parseConnectString("jdbc"));
        assertNull("molapDataSourceImpl.user", getPrivateField(molapDataSourceImpl, "user"));
        assertEquals("molapDataSourceImpl.getURL()", "", molapDataSourceImpl.getURL());
        assertNull("molapDataSourceImpl.password", getPrivateField(molapDataSourceImpl, "password"));
        assertNull("molapDataSourceImpl.getDriverName()", molapDataSourceImpl.getDriverName());
        assertNull("molapDataSourceImpl.getFileStore()", molapDataSourceImpl.getFileStore());
    }
    
    public void testConstructor1() throws Throwable {
        storeStaticField(RolapConnectionProperties.class, "JdbcPassword");
        storeStaticField(RolapConnectionProperties.class, "Jdbc");
        storeStaticField(RolapConnectionProperties.class, "JdbcUser");
        storeStaticField(RolapConnectionProperties.class, "JdbcDrivers");
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        Mockingbird.ignoreConstructorExceptions(AbstractMolapDataSource.class);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        String[] strings = new String[1];
        setPrivateField(RolapConnectionProperties.class, "Jdbc", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcUser", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcPassword", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcDrivers", rolapConnectionProperties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        strings[0] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.enterTestMode();
        MolapDataSourceImpl molapDataSourceImpl = new MolapDataSourceImpl(propertyList);
        assertEquals("molapDataSourceImpl.user", "", getPrivateField(molapDataSourceImpl, "user"));
        assertNull("molapDataSourceImpl.getURL()", molapDataSourceImpl.getURL());
        assertEquals("molapDataSourceImpl.password", "", getPrivateField(molapDataSourceImpl, "password"));
        assertEquals("molapDataSourceImpl.getDriverName()", "", molapDataSourceImpl.getDriverName());
        assertEquals("molapDataSourceImpl.getFileStore()", "", molapDataSourceImpl.getFileStore());
    }
    
    public void testConstructor2() throws Throwable {
        storeStaticField(RolapConnectionProperties.class, "JdbcPassword");
        storeStaticField(RolapConnectionProperties.class, "Jdbc");
        storeStaticField(RolapConnectionProperties.class, "JdbcUser");
        storeStaticField(RolapConnectionProperties.class, "JdbcDrivers");
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        Mockingbird.ignoreConstructorExceptions(AbstractMolapDataSource.class);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        String[] strings = new String[2];
        setPrivateField(RolapConnectionProperties.class, "Jdbc", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcUser", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcPassword", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcDrivers", rolapConnectionProperties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        strings[1] = "";
        strings[0] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.enterTestMode();
        MolapDataSourceImpl molapDataSourceImpl = new MolapDataSourceImpl(propertyList);
        assertEquals("molapDataSourceImpl.user", "", getPrivateField(molapDataSourceImpl, "user"));
        assertNull("molapDataSourceImpl.getURL()", molapDataSourceImpl.getURL());
        assertEquals("molapDataSourceImpl.password", "", getPrivateField(molapDataSourceImpl, "password"));
        assertEquals("molapDataSourceImpl.getDriverName()", "", molapDataSourceImpl.getDriverName());
        assertEquals("molapDataSourceImpl.getFileStore()", "", molapDataSourceImpl.getFileStore());
    }
    
    public void testConstructor3() throws Throwable {
        storeStaticField(RolapConnectionProperties.class, "JdbcPassword");
        storeStaticField(RolapConnectionProperties.class, "Jdbc");
        storeStaticField(RolapConnectionProperties.class, "JdbcUser");
        storeStaticField(RolapConnectionProperties.class, "JdbcDrivers");
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        Mockingbird.ignoreConstructorExceptions(AbstractMolapDataSource.class);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        String[] strings = new String[2];
        setPrivateField(RolapConnectionProperties.class, "Jdbc", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcUser", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcPassword", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcDrivers", rolapConnectionProperties);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        strings[0] = "";
        strings[1] = "";
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "split", "(java.lang.String)java.lang.String[]", strings, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "trim", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, propertyList, "get", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.enterTestMode();
        MolapDataSourceImpl molapDataSourceImpl = new MolapDataSourceImpl(propertyList);
        assertEquals("molapDataSourceImpl.user", "", getPrivateField(molapDataSourceImpl, "user"));
        assertEquals("molapDataSourceImpl.getURL()", "", molapDataSourceImpl.getURL());
        assertEquals("molapDataSourceImpl.password", "", getPrivateField(molapDataSourceImpl, "password"));
        assertEquals("molapDataSourceImpl.getDriverName()", "", molapDataSourceImpl.getDriverName());
        assertEquals("molapDataSourceImpl.getFileStore()", "", molapDataSourceImpl.getFileStore());
    }
    
    public void testGetDriverName() throws Throwable {
        String result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getDriverName();
        assertNull("result", result);
    }
    
    public void testGetFileStore() throws Throwable {
        String result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getFileStore();
        assertNull("result", result);
    }
    
    public void testGetURL() throws Throwable {
        String result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getURL();
        assertEquals("result", "", result);
    }
    
    public void testIsEnableCache() throws Throwable {
        boolean result = new MolapDataSourceImpl(Util.parseConnectString("jdbc")).isEnableCache();
        assertTrue("result", result);
    }
    
    public void testSetUrl() throws Throwable {
        MolapDataSourceImpl molapDataSourceImpl = new MolapDataSourceImpl(Util.parseConnectString("jdbc"));
        molapDataSourceImpl.setUrl("testMolapDataSourceImplUrl");
        assertEquals("molapDataSourceImpl.getURL()", "testMolapDataSourceImplUrl", molapDataSourceImpl.getURL());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        Util.PropertyList connectInfo = new Util.PropertyList();
        try {
            new MolapDataSourceImpl(connectInfo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapDataSourceImpl.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        Util.PropertyList connectInfo = Util.parseConnectString("testMolapDataSourceImpls");
        connectInfo.put(null, "testMolapDataSourceImplValue");
        try {
            new MolapDataSourceImpl(connectInfo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Util.PropertyList.class, ex);
        }
    }
    
    public void testGetMolapQueryThrowsNullPointerException() throws Throwable {
        try {
            new MolapDataSourceImpl(Util.parseConnectString("jdbc")).getMolapQuery(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MolapStatement.class, ex);
        }
    }
}

