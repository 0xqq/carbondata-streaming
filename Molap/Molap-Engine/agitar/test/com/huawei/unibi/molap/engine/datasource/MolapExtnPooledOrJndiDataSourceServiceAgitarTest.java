/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:04:55 PM
 * Time to generate: 00:15.553 seconds
 *
 */

package com.huawei.unibi.molap.engine.datasource;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.mondrian.extensions.MolapDataSourceFactory;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import java.util.Map;
import javax.sql.DataSource;
import mondrian.olap.Util;
import mondrian.rolap.RolapConnectionProperties;
import org.pentaho.platform.api.engine.ICacheManager;
import org.pentaho.platform.api.engine.IPentahoObjectFactory;
import org.pentaho.platform.api.repository.datasource.DatasourceMgmtServiceException;
import org.pentaho.platform.api.repository.datasource.IDatasource;
import org.pentaho.platform.api.repository.datasource.IDatasourceMgmtService;
import org.pentaho.platform.engine.core.system.PentahoSystem;

public class MolapExtnPooledOrJndiDataSourceServiceAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MolapExtnPooledOrJndiDataSourceService.class;
    }
    
    public void testGetDataSourceWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapConnectionProperties.class, "JdbcPassword");
        storeStaticField(RolapConnectionProperties.class, "Jdbc");
        storeStaticField(MolapExtnPooledOrJndiDataSourceService.class, "pool");
        storeStaticField(RolapConnectionProperties.class, "JdbcUser");
        storeStaticField(RolapConnectionProperties.class, "JdbcDrivers");
        MolapExtnPooledOrJndiDataSourceService molapExtnPooledOrJndiDataSourceService = (MolapExtnPooledOrJndiDataSourceService) Mockingbird.getProxyObject(MolapExtnPooledOrJndiDataSourceService.class, true);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        IDatasourceMgmtService iDatasourceMgmtService = (IDatasourceMgmtService) Mockingbird.getProxyObject(IDatasourceMgmtService.class);
        IDatasource iDatasource = (IDatasource) Mockingbird.getProxyObject(IDatasource.class);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", iDatasourceMgmtService, 1);
        setPrivateField(RolapConnectionProperties.class, "JdbcDrivers", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcUser", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcPassword", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "Jdbc", rolapConnectionProperties);
        setPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool", map);
        Mockingbird.setReturnValue(iDatasourceMgmtService.getDatasource(""), iDatasource);
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "com.huawei.unibi.molap.engine.datasource.MolapDataSourceImpl");
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        Mockingbird.replaceObjectForRecording(Util.PropertyList.class, "<init>()", propertyList);
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUserName(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getPassword(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUrl(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUrl(), "");
        Mockingbird.setReturnValue(iDatasource.getUserName(), "");
        Mockingbird.setReturnValue(iDatasource.getPassword(), "");
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", dataSource, 1);
        Mockingbird.enterTestMode(MolapExtnPooledOrJndiDataSourceService.class);
        DataSource result = molapExtnPooledOrJndiDataSourceService.getDataSource("");
        assertNotNull("result", result);
        assertNull("molapExtnPooledOrJndiDataSourceService.cacheManager", getPrivateField(molapExtnPooledOrJndiDataSourceService, "cacheManager"));
        assertNotNull("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.pool", getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool"));
        boolean actual = ((LogService) getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.LOGGER.isDebugEnabled()", actual);
    }
    
    public void testGetDataSourceWithAggressiveMocks1() throws Throwable {
        MolapExtnPooledOrJndiDataSourceService molapExtnPooledOrJndiDataSourceService = (MolapExtnPooledOrJndiDataSourceService) Mockingbird.getProxyObject(MolapExtnPooledOrJndiDataSourceService.class, true);
        ICacheManager iCacheManager = (ICacheManager) Mockingbird.getProxyObject(ICacheManager.class);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        IDatasourceMgmtService iDatasourceMgmtService = (IDatasourceMgmtService) Mockingbird.getProxyObject(IDatasourceMgmtService.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        setPrivateField(molapExtnPooledOrJndiDataSourceService, "cacheManager", iCacheManager);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", iDatasourceMgmtService, 1);
        Mockingbird.setReturnValue(iDatasourceMgmtService.getDatasource(""), null);
        Mockingbird.setReturnValue(iCacheManager.cacheEnabled("DataSource"), false);
        Mockingbird.setReturnValue(iCacheManager.addCacheRegion("DataSource"), false);
        Mockingbird.setReturnValue(false, iCacheManager, "getFromRegionCache", "(java.lang.String,java.lang.Object)java.lang.Object", dataSource, 1);
        Mockingbird.enterTestMode(MolapExtnPooledOrJndiDataSourceService.class);
        DataSource result = molapExtnPooledOrJndiDataSourceService.getDataSource("");
        assertNotNull("result", result);
        assertNotNull("molapExtnPooledOrJndiDataSourceService.cacheManager", getPrivateField(molapExtnPooledOrJndiDataSourceService, "cacheManager"));
        int actual = ((Map) getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool")).size();
        assertEquals("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.pool.size()", 0, actual);
        boolean actual2 = ((LogService) getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "LOGGER")).isDebugEnabled();
        assertTrue("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.LOGGER.isDebugEnabled()", actual2);
    }
    
    public void testGetDataSourceWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        storeStaticField(MolapExtnPooledOrJndiDataSourceService.class, "LOGGER");
        MolapExtnPooledOrJndiDataSourceService molapExtnPooledOrJndiDataSourceService = (MolapExtnPooledOrJndiDataSourceService) Mockingbird.getProxyObject(MolapExtnPooledOrJndiDataSourceService.class, true);
        ICacheManager iCacheManager = (ICacheManager) Mockingbird.getProxyObject(ICacheManager.class);
        IPentahoObjectFactory iPentahoObjectFactory = (IPentahoObjectFactory) Mockingbird.getProxyObject(IPentahoObjectFactory.class);
        IDatasourceMgmtService iDatasourceMgmtService = (IDatasourceMgmtService) Mockingbird.getProxyObject(IDatasourceMgmtService.class);
        DatasourceMgmtServiceException datasourceMgmtServiceException = (DatasourceMgmtServiceException) Mockingbird.getProxyObject(DatasourceMgmtServiceException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        DataSource dataSource = (DataSource) Mockingbird.getProxyObject(DataSource.class);
        setPrivateField(molapExtnPooledOrJndiDataSourceService, "cacheManager", iCacheManager);
        PentahoSystem.setObjectFactory(iPentahoObjectFactory);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, iPentahoObjectFactory, "get", "(java.lang.Class,org.pentaho.platform.api.engine.IPentahoSession)java.lang.Object", iDatasourceMgmtService, 1);
        setPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setException(iDatasourceMgmtService.getDatasource(""), datasourceMgmtServiceException);
        Mockingbird.setReturnValue(false, datasourceMgmtServiceException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(iCacheManager.cacheEnabled("DataSource"), false);
        Mockingbird.setReturnValue(iCacheManager.addCacheRegion("DataSource"), false);
        Mockingbird.setReturnValue(false, iCacheManager, "getFromRegionCache", "(java.lang.String,java.lang.Object)java.lang.Object", dataSource, 1);
        Mockingbird.enterTestMode(MolapExtnPooledOrJndiDataSourceService.class);
        DataSource result = molapExtnPooledOrJndiDataSourceService.getDataSource("");
        assertNotNull("result", result);
        assertNotNull("molapExtnPooledOrJndiDataSourceService.cacheManager", getPrivateField(molapExtnPooledOrJndiDataSourceService, "cacheManager"));
        int actual = ((Map) getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool")).size();
        assertEquals("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.pool.size()", 0, actual);
        assertNotNull("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.LOGGER", getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "LOGGER"));
    }
    
    public void testGetMoalDataSourceWithAggressiveMocks() throws Throwable {
        storeStaticField(RolapConnectionProperties.class, "JdbcPassword");
        storeStaticField(RolapConnectionProperties.class, "Jdbc");
        storeStaticField(MolapExtnPooledOrJndiDataSourceService.class, "pool");
        storeStaticField(RolapConnectionProperties.class, "JdbcUser");
        storeStaticField(RolapConnectionProperties.class, "JdbcDrivers");
        MolapExtnPooledOrJndiDataSourceService molapExtnPooledOrJndiDataSourceService = (MolapExtnPooledOrJndiDataSourceService) Mockingbird.getProxyObject(MolapExtnPooledOrJndiDataSourceService.class, true);
        IDatasource iDatasource = (IDatasource) Mockingbird.getProxyObject(IDatasource.class);
        Mockingbird.enterRecordingMode();
        Util.PropertyList propertyList = (Util.PropertyList) Mockingbird.getProxyObject(Util.PropertyList.class);
        Mockingbird.replaceObjectForRecording(Util.PropertyList.class, "<init>()", propertyList);
        RolapConnectionProperties rolapConnectionProperties = (RolapConnectionProperties) Mockingbird.getProxyObject(RolapConnectionProperties.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(RolapConnectionProperties.class, "JdbcDrivers", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcUser", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "JdbcPassword", rolapConnectionProperties);
        setPrivateField(RolapConnectionProperties.class, "Jdbc", rolapConnectionProperties);
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "");
        setPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool", map);
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUserName(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getPassword(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUrl(), "");
        Mockingbird.setReturnValue(false, propertyList, "put", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(iDatasource.getUrl(), "");
        Mockingbird.setReturnValue(iDatasource.getUserName(), "");
        Mockingbird.setReturnValue(iDatasource.getPassword(), "");
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(MolapDataSourceFactory.getMolapDataSource(propertyList), null);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(MolapExtnPooledOrJndiDataSourceService.class);
        DataSource result = (DataSource) callPrivateMethod("com.huawei.unibi.molap.engine.datasource.MolapExtnPooledOrJndiDataSourceService", "getMoalDataSource", new Class[] {IDatasource.class}, molapExtnPooledOrJndiDataSourceService, new Object[] {iDatasource});
        assertNull("result", result);
        assertNotNull("molapExtnPooledOrJndiDataSourceServiceMolapExtnPooledOrJndiDataSourceService.pool", getPrivateField(MolapExtnPooledOrJndiDataSourceService.class, "pool"));
    }
    
    public void testIsMolapDataSourceWithAggressiveMocks() throws Throwable {
        MolapExtnPooledOrJndiDataSourceService molapExtnPooledOrJndiDataSourceService = (MolapExtnPooledOrJndiDataSourceService) Mockingbird.getProxyObject(MolapExtnPooledOrJndiDataSourceService.class, true);
        IDatasource iDatasource = (IDatasource) Mockingbird.getProxyObject(IDatasource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iDatasource.getDriverClass(), "");
        Mockingbird.enterTestMode(MolapExtnPooledOrJndiDataSourceService.class);
        boolean result = ((Boolean) callPrivateMethod("com.huawei.unibi.molap.engine.datasource.MolapExtnPooledOrJndiDataSourceService", "isMolapDataSource", new Class[] {IDatasource.class}, molapExtnPooledOrJndiDataSourceService, new Object[] {iDatasource})).booleanValue();
        assertFalse("result", result);
    }
}

