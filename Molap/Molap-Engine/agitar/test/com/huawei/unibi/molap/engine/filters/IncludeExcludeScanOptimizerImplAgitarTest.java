/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 4:58:54 PM
 * Time to generate: 00:43.488 seconds
 *
 */

package com.huawei.unibi.molap.engine.filters;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.scanner.optimizer.impl.ScanOptimizerImpl;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.Bits;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
import java.util.Arrays;

public class IncludeExcludeScanOptimizerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return IncludeExcludeScanOptimizerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        long[] maxKey = new long[2];
        long[][] excludeFilters = new long[0][];
        long[][] includeFilters = new long[0][];
        int[] lens = new int[0];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, keyGenerator);
        assertSame("includeExcludeScanOptimizerImpl.generator", keyGenerator, getPrivateField(includeExcludeScanOptimizerImpl, "generator"));
        boolean actual = ((LogService) getPrivateField(ScanOptimizerImpl.class, "LOGGER")).isDebugEnabled();
        assertTrue("includeExcludeScanOptimizerImplScanOptimizerImpl.LOGGER.isDebugEnabled()", actual);
        assertSame("includeExcludeScanOptimizerImpl.excludeFilters", excludeFilters, getPrivateField(includeExcludeScanOptimizerImpl, "excludeFilters"));
        assertEquals("includeExcludeScanOptimizerImpl.endKey.length", 0, ((byte[]) getPrivateField(includeExcludeScanOptimizerImpl, "endKey")).length);
        assertSame("includeExcludeScanOptimizerImpl.maxKey", maxKey, getPrivateField(includeExcludeScanOptimizerImpl, "maxKey"));
        assertSame("includeExcludeScanOptimizerImpl.filters", includeFilters, getPrivateField(includeExcludeScanOptimizerImpl, "filters"));
        assertNull("includeExcludeScanOptimizerImpl.nextEndKey", getPrivateField(includeExcludeScanOptimizerImpl, "nextEndKey"));
    }
    
    public void testCheckWithFilter() throws Throwable {
        long[][] excludeFilters = new long[1][];
        long[] longs = new long[0];
        long[][] includeFilters = new long[1][];
        includeFilters[0] = longs;
        long[] maxKey = new long[1];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter1() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        long[] maxKey = new long[6];
        long[] longs2 = new long[0];
        long[] longs3 = new long[3];
        long[] longs4 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[0] = longs2;
        includeFilters[1] = longs;
        includeFilters[2] = longs3;
        includeFilters[3] = longs4;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 3, result);
    }
    
    public void testCheckWithFilter2() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        longs[0] = -1L;
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter3() throws Throwable {
        long[] longs = new long[2];
        longs[0] = 24L;
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        long[][] includeFilters = new long[1][];
        long[] maxKey = new long[1];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter4() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        maxKey[0] = 2L;
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter5() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[1];
        lens[0] = 62;
        long[] longs2 = new long[2];
        longs2[0] = 9L;
        long[][] excludeFilters = new long[6][];
        excludeFilters[3] = longs2;
        long[] maxKey = new long[6];
        long[] longs3 = new long[0];
        long[] longs4 = new long[3];
        long[][] includeFilters = new long[6][];
        includeFilters[0] = longs3;
        includeFilters[1] = longs;
        includeFilters[2] = longs4;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 3, result);
    }
    
    public void testCheckWithFilter6() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[] longs2 = new long[0];
        long[][] excludeFilters = new long[6][];
        excludeFilters[1] = longs;
        excludeFilters[2] = longs2;
        long[] maxKey = new long[6];
        maxKey[1] = 16L;
        long[] longs3 = new long[0];
        long[] longs4 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[0] = longs3;
        includeFilters[3] = longs4;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[1]", 1L, key[1]);
        assertEquals("result", 3, result);
    }
    
    public void testCheckWithFilter7() throws Throwable {
        long[] longs = new long[3];
        long[] longs2 = new long[2];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        excludeFilters[0] = longs;
        long[] maxKey = new long[6];
        long[] longs3 = new long[3];
        long[] longs4 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[1] = longs2;
        includeFilters[2] = longs3;
        includeFilters[3] = longs4;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 3, result);
    }
    
    public void testCheckWithFilter8() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testCheckWithFilter9() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[1];
        lens[0] = 62;
        long[] longs2 = new long[0];
        long[][] excludeFilters = new long[6][];
        excludeFilters[2] = longs2;
        long[] maxKey = new long[6];
        long[] longs3 = new long[0];
        long[] longs4 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[0] = longs3;
        includeFilters[1] = longs;
        includeFilters[3] = longs4;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(key);
        assertEquals("result", 3, result);
    }
    
    public void testCheckWithFilterWithAggressiveMocks() throws Throwable {
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = (IncludeExcludeScanOptimizerImpl) Mockingbird.getProxyObject(IncludeExcludeScanOptimizerImpl.class, true);
        long[][] longs = new long[2][0];
        long[][] longs2 = new long[2][0];
        long[] longs3 = new long[2];
        long[] longs4 = new long[3];
        long[] longs5 = new long[0];
        long[] longs6 = new long[3];
        setPrivateField(includeExcludeScanOptimizerImpl, "filters", longs);
        setPrivateField(includeExcludeScanOptimizerImpl, "excludeFilters", longs2);
        longs3[0] = 1L;
        longs3[1] = 0L;
        longs[0] = longs4;
        longs[1] = null;
        longs4[0] = 0L;
        longs4[1] = 0L;
        longs4[2] = 1L;
        longs2[0] = longs5;
        longs2[1] = longs6;
        longs6[0] = 0L;
        longs6[1] = 0L;
        longs6[2] = 2L;
        Mockingbird.enterTestMode(IncludeExcludeScanOptimizerImpl.class);
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(longs3);
        assertEquals("result", 1, result);
    }
    
    public void testCheckWithFilterWithAggressiveMocks1() throws Throwable {
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = (IncludeExcludeScanOptimizerImpl) Mockingbird.getProxyObject(IncludeExcludeScanOptimizerImpl.class, true);
        long[][] longs = new long[2][0];
        long[][] longs2 = new long[2][0];
        long[] longs3 = new long[2];
        long[] longs4 = new long[3];
        long[] longs5 = new long[0];
        long[] longs6 = new long[3];
        setPrivateField(includeExcludeScanOptimizerImpl, "filters", longs);
        setPrivateField(includeExcludeScanOptimizerImpl, "excludeFilters", longs2);
        longs3[0] = 1L;
        longs[0] = longs4;
        longs[1] = null;
        longs4[0] = 0L;
        longs4[1] = 0L;
        longs4[2] = 2L;
        longs2[0] = longs5;
        longs2[1] = longs6;
        longs6[0] = -2L;
        longs6[1] = -2L;
        longs6[2] = 1L;
        Mockingbird.enterTestMode(IncludeExcludeScanOptimizerImpl.class);
        int result = includeExcludeScanOptimizerImpl.checkWithFilter(longs3);
        assertEquals("result", 1, result);
    }
    
    public void testSetKey() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        maxKey[0] = 2L;
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 1);
        assertEquals("key[0]", 1L, key[0]);
        assertEquals("result", 0, result);
    }
    
    public void testSetKey1() throws Throwable {
        long[] longs = new long[2];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        long[] maxKey = new long[6];
        long[][] includeFilters = new long[6][];
        includeFilters[1] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[5];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 2);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey2() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        excludeFilters[4] = longs;
        excludeFilters[5] = longs;
        long[] maxKey = new long[6];
        long[] longs2 = new long[3];
        longs2[0] = 50L;
        longs2[2] = 53L;
        long[] longs3 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[2] = longs2;
        includeFilters[3] = longs3;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[9];
        key[4] = 23L;
        includeExcludeScanOptimizerImpl.setKey(key, 0);
        int result = includeExcludeScanOptimizerImpl.setKey(key, 6);
        assertEquals("key[2]", 50L, key[2]);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey3() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        excludeFilters[4] = longs;
        long[] maxKey = new long[6];
        long[] longs2 = new long[3];
        longs2[0] = 50L;
        long[] longs3 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[2] = longs2;
        includeFilters[3] = longs3;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[9];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 6);
        assertEquals("key[2]", 50L, key[2]);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey4() throws Throwable {
        long[] longs = new long[1];
        long[][] excludeFilters = new long[2][];
        excludeFilters[1] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        maxKey[1] = 17L;
        long[][] includeFilters = new long[3][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 2);
        assertEquals("key[1]", 1L, key[1]);
        assertEquals("result", 1, result);
    }
    
    public void testSetKey5() throws Throwable {
        long[][] excludeFilters = new long[2][];
        long[] longs = new long[0];
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        long[][] includeFilters = new long[3][];
        includeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 1);
        assertEquals("result", 1, result);
    }
    
    public void testSetKey6() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        key[0] = 18L;
        int result = includeExcludeScanOptimizerImpl.setKey(key, 1);
        assertEquals("result", 1, result);
    }
    
    public void testSetKey7() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[] longs2 = new long[0];
        long[][] excludeFilters = new long[6][];
        excludeFilters[2] = longs2;
        excludeFilters[4] = longs;
        excludeFilters[5] = longs;
        long[] maxKey = new long[6];
        maxKey[2] = 55L;
        long[] longs3 = new long[1];
        long[][] includeFilters = new long[6][];
        includeFilters[3] = longs3;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[9];
        key[4] = 23L;
        includeExcludeScanOptimizerImpl.setKey(key, 0);
        int result = includeExcludeScanOptimizerImpl.setKey(key, 6);
        assertEquals("key[2]", 1L, key[2]);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey8() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[] longs2 = new long[0];
        long[] longs3 = new long[2];
        long[][] excludeFilters = new long[6][];
        excludeFilters[2] = longs2;
        excludeFilters[3] = longs3;
        excludeFilters[4] = longs;
        excludeFilters[5] = longs;
        long[] maxKey = new long[6];
        maxKey[2] = 55L;
        long[][] includeFilters = new long[6][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[9];
        key[4] = 23L;
        int result = includeExcludeScanOptimizerImpl.setKey(key, 6);
        assertEquals("key[2]", 1L, key[2]);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey9() throws Throwable {
        long[] longs = new long[2];
        long[][] excludeFilters = new long[2][];
        excludeFilters[0] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        long[] longs2 = new long[3];
        long[][] includeFilters = new long[3][];
        includeFilters[1] = longs2;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 2);
        assertEquals("result", 2, result);
    }
    
    public void testSetKey10() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[0];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 0);
        assertEquals("result", 0, result);
    }
    
    public void testSetKey11() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        long[] maxKey = new long[6];
        long[][] includeFilters = new long[6][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[9];
        int result = includeExcludeScanOptimizerImpl.setKey(key, 1);
        assertEquals("result", 1, result);
    }
    
    public void testSetKeyIfChanges() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[3];
        callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfChanges", new Class[] {long[].class, boolean.class, int.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.TRUE, new Integer(0)});
        assertEquals("longs.length", 3, longs.length);
    }
    
    public void testSetKeyIfChanges1() throws Throwable {
        long[] maxKey = new long[2];
        long[][] excludeFilters = new long[0][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, null, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[3];
        callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfChanges", new Class[] {long[].class, boolean.class, int.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.FALSE, new Integer(100)});
        assertEquals("longs.length", 3, longs.length);
    }
    
    public void testSetKeyIfNoChanges() throws Throwable {
        long[] maxKey = new long[2];
        long[][] excludeFilters = new long[0][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, null, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[2];
        callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfNoChanges", new Class[] {long[].class, boolean.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.TRUE});
        assertEquals("longs.length", 2, longs.length);
    }
    
    public void testSetKeyIfNoChanges1() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[4];
        callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfNoChanges", new Class[] {long[].class, boolean.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.FALSE});
        assertEquals("longs[3]", 1L, longs[3]);
    }
    
    public void testSetKeyWithAggressiveMocks() throws Throwable {
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = (IncludeExcludeScanOptimizerImpl) Mockingbird.getProxyObject(IncludeExcludeScanOptimizerImpl.class, true);
        long[] longs = new long[2];
        long[][] longs2 = new long[2][0];
        long[][] longs3 = new long[2][0];
        long[] longs4 = new long[2];
        long[] longs5 = new long[2];
        long[] longs6 = new long[0];
        long[] longs7 = new long[0];
        setPrivateField(includeExcludeScanOptimizerImpl, "maxKey", longs);
        setPrivateField(includeExcludeScanOptimizerImpl, "filters", longs2);
        setPrivateField(includeExcludeScanOptimizerImpl, "excludeFilters", longs3);
        longs4[1] = -2L;
        longs2[1] = null;
        longs2[0] = longs5;
        longs3[1] = longs6;
        longs3[0] = longs7;
        longs[1] = 0L;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Arrays.class, "binarySearch", "(long[],long)int", new Integer(0), 1);
        longs5[0] = 0L;
        longs5[1] = 0L;
        Mockingbird.setReturnValue(true, Arrays.class, "binarySearch", "(long[],long)int", new Integer(0), 1);
        Mockingbird.enterTestMode(IncludeExcludeScanOptimizerImpl.class);
        int result = includeExcludeScanOptimizerImpl.setKey(longs4, 2);
        assertEquals("result", 2, result);
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[][] includeFilters = new long[0][];
        int[] lens = new int[1];
        long[] maxKey = new long[0];
        try {
            new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, includeFilters, new MultiDimKeyVarLengthGenerator(lens));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Bits.class, ex);
            assertNotNull("ScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        try {
            new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ScanOptimizerImpl.class, ex);
            assertNotNull("ScanOptimizerImpl.LOGGER", getPrivateField(ScanOptimizerImpl.class, "LOGGER"));
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] longs = new long[1];
        long[][] excludeFilters = new long[2][];
        excludeFilters[1] = longs;
        long[] longs2 = new long[0];
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        maxKey[1] = 17L;
        long[][] includeFilters = new long[3][];
        includeFilters[0] = longs2;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("key[1]", 1L, key[1]);
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        long[][] excludeFilters = new long[2][];
        long[] longs = new long[0];
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        long[] longs2 = new long[3];
        long[][] includeFilters = new long[3][];
        includeFilters[0] = longs;
        includeFilters[1] = longs2;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        longs[0] = -1L;
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        key[0] = -1L;
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("key[0]", 0L, key[0]);
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        long[] maxKey = new long[2];
        long[][] excludeFilters = new long[0][];
        long[][] includeFilters = new long[0][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        int[] lens = new int[0];
        long[][] excludeFilters = new long[2][];
        long[] maxKey = new long[0];
        long[] longs = new long[0];
        long[][] includeFilters = new long[1][];
        includeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 2, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        key[0] = 100L;
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        long[] longs = new long[2];
        longs[0] = 1L;
        long[][] excludeFilters = new long[2][];
        excludeFilters[0] = longs;
        int[] lens = new int[0];
        long[] maxKey = new long[3];
        long[] longs2 = new long[3];
        long[][] includeFilters = new long[3][];
        includeFilters[1] = longs2;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[4];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "2", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 4, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException8() throws Throwable {
        long[] longs = new long[1];
        longs[0] = -100L;
        long[][] excludeFilters = new long[3][];
        long[] maxKey = new long[0];
        long[][] includeFilters = new long[1][];
        includeFilters[0] = longs;
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        key[0] = -100L;
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 2, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException9() throws Throwable {
        int[] lens = new int[1];
        lens[0] = 1;
        long[] key = new long[3];
        long[] longs = new long[0];
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        long[] maxKey = new long[3];
        long[][] includeFilters = new long[2][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException10() throws Throwable {
        long[] maxKey = new long[3];
        long[][] includeFilters = new long[0][];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[0][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[0];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 0, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsArrayIndexOutOfBoundsException11() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[] longs = new long[1];
        longs[0] = -1L;
        long[][] excludeFilters = new long[1][];
        excludeFilters[0] = longs;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[2];
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter(key);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 2, key.length);
        }
    }
    
    public void testCheckWithFilterThrowsNullPointerException() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            includeExcludeScanOptimizerImpl.checkWithFilter((long[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
        }
    }
    
    public void testSetKeyIfChangesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[][] includeFilters = new long[0][];
        long[] longs = new long[0];
        long[] maxKey = new long[3];
        long[][] excludeFilters = new long[0][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfChanges", new Class[] {long[].class, boolean.class, int.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.TRUE, new Integer(100)});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("longs.length", 0, longs.length);
        }
    }
    
    public void testSetKeyIfChangesThrowsNullPointerException() throws Throwable {
        long[][] excludeFilters = new long[3][];
        long[] maxKey = new long[0];
        long[][] includeFilters = new long[1][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfChanges", new Class[] {long[].class, boolean.class, int.class}, includeExcludeScanOptimizerImpl, new Object[] {null, Boolean.TRUE, new Integer(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
        }
    }
    
    public void testSetKeyIfNoChangesThrowsArrayIndexOutOfBoundsException() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] longs = new long[0];
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfNoChanges", new Class[] {long[].class, boolean.class}, includeExcludeScanOptimizerImpl, new Object[] {longs, Boolean.FALSE});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("longs.length", 0, longs.length);
        }
    }
    
    public void testSetKeyIfNoChangesThrowsNullPointerException() throws Throwable {
        long[] maxKey = new long[3];
        long[][] includeFilters = new long[2][];
        long[][] excludeFilters = new long[0][];
        int[] lens = new int[1];
        lens[0] = 62;
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.filters.IncludeExcludeScanOptimizerImpl", "setKeyIfNoChanges", new Class[] {long[].class, boolean.class}, includeExcludeScanOptimizerImpl, new Object[] {null, Boolean.FALSE});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
        }
    }
    
    public void testSetKeyThrowsArrayIndexOutOfBoundsException() throws Throwable {
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[2][];
        long[][] excludeFilters = new long[0][];
        int[] lens = new int[0];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[3];
        try {
            includeExcludeScanOptimizerImpl.setKey(key, 1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 3, key.length);
        }
    }
    
    public void testSetKeyThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        long[] key = new long[1];
        try {
            includeExcludeScanOptimizerImpl.setKey(key, 2);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
            assertEquals("key.length", 1, key.length);
        }
    }
    
    public void testSetKeyThrowsNullPointerException() throws Throwable {
        long[] longs = new long[3];
        int[] lens = new int[1];
        lens[0] = 62;
        long[][] excludeFilters = new long[6][];
        excludeFilters[1] = longs;
        long[] maxKey = new long[6];
        long[][] includeFilters = new long[6][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            includeExcludeScanOptimizerImpl.setKey((long[]) null, 2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
        }
    }
    
    public void testSetKeyThrowsNullPointerException1() throws Throwable {
        int[] lens = new int[0];
        long[] maxKey = new long[2];
        long[][] includeFilters = new long[1][];
        long[][] excludeFilters = new long[1][];
        IncludeExcludeScanOptimizerImpl includeExcludeScanOptimizerImpl = new IncludeExcludeScanOptimizerImpl(maxKey, includeFilters, excludeFilters, new MultiDimKeyVarLengthGenerator(lens));
        try {
            includeExcludeScanOptimizerImpl.setKey((long[]) null, 1);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(IncludeExcludeScanOptimizerImpl.class, ex);
        }
    }
}

