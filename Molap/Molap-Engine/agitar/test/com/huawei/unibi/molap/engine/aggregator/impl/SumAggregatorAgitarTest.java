/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:10:30 PM
 * Time to generate: 00:13.897 seconds
 *
 */

package com.huawei.unibi.molap.engine.aggregator.impl;

import com.agitar.lib.junit.AgitarTestCase;

public class SumAggregatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SumAggregator.class;
    }
    
    public void testConstructor() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        assertEquals("sumAggregator.getValue()", 0.0, sumAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        byte[] key = new byte[0];
        sumAggregator.agg(100.0, key, 100, 1000);
        assertEquals("sumAggregator.getValue()", 100.0, sumAggregator.getValue(), 1.0E-6);
    }
    
    public void testAgg1() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        sumAggregator.agg(100.0, 1000.0);
        assertEquals("sumAggregator.getValue()", 100.0, sumAggregator.getValue(), 1.0E-6);
    }
    
    public void testGetValue() throws Throwable {
        SumAggregator aggregator = new SumAggregator();
        byte[] key = new byte[0];
        aggregator.agg(100.0, key, 100, 1000);
        SumAggregator sumAggregator = new SumAggregator();
        sumAggregator.merge(aggregator);
        double result = sumAggregator.getValue();
        assertEquals("result", 100.0, result, 1.0E-6);
    }
    
    public void testGetValue1() throws Throwable {
        double result = new SumAggregator().getValue();
        assertEquals("result", 0.0, result, 1.0E-6);
    }
    
    public void testGetValueObject() throws Throwable {
        Double result = (Double) new SumAggregator().getValueObject();
        assertEquals("result", 0.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testGetValueObject1() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        sumAggregator.agg(100.0, 1000.0);
        Double result = (Double) sumAggregator.getValueObject();
        assertEquals("result", 100.0, result.doubleValue(), 1.0E-6);
    }
    
    public void testMerge() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        sumAggregator.merge(new SumAggregator());
        assertEquals("sumAggregator.getValue()", 0.0, sumAggregator.getValue(), 1.0E-6);
    }
    
    public void testMergeThrowsClassCastException() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        try {
            sumAggregator.merge(new MinAggregator());
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SumAggregator.class, ex);
            assertEquals("sumAggregator.getValue()", 0.0, sumAggregator.getValue(), 1.0E-6);
        }
    }
    
    public void testMergeThrowsNullPointerException() throws Throwable {
        SumAggregator sumAggregator = new SumAggregator();
        try {
            sumAggregator.merge(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SumAggregator.class, ex);
            assertEquals("sumAggregator.getValue()", 0.0, sumAggregator.getValue(), 1.0E-6);
        }
    }
}

