/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:04:30 PM
 * Time to generate: 09:45.457 seconds
 *
 */

package com.huawei.unibi.molap.engine.datastorage;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.iweb.platform.logging.LogService;
import com.huawei.unibi.molap.engine.util.MolapEngineLogEvent;
import com.huawei.unibi.molap.metadata.MolapMetadata;
import com.huawei.unibi.molap.metadata.SliceMetaData;
import com.huawei.unibi.molap.util.MolapProperties;
import com.huawei.unibi.molap.util.MolapUtil;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import mondrian.olap.CacheControl;
import mondrian.olap.DriverManager;
import mondrian.olap.MondrianException;
import mondrian.rolap.CacheControlImpl;
import mondrian.rolap.RolapConnection;
import mondrian.rolap.RolapCube;
import mondrian.rolap.RolapSchema;

public class InMemoryCubeStoreAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return InMemoryCubeStore.class;
    }
    
    public void testConstructor() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        Mockingbird.enterTestMode();
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "<init>", new Class[] {}, null, new Object[] {});
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)2), 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map2);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map2, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, map2, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks2() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        CacheControl cacheControl = (CacheControl) Mockingbird.getProxyObject(CacheControl.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map2);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map3);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map4);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map4, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        setPrivateField(rolapSchema, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "connectInfo", null);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map4, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)2), 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map4, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", rolapSchema, 1);
        CacheControlImpl cacheControlImpl = new CacheControlImpl();
        Mockingbird.replaceObjectForRecording(CacheControlImpl.class, "<init>()", cacheControlImpl);
        cacheControlImpl.flushSchema(rolapSchema);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, map3, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, rolapConnection, "getCacheControl", "(java.io.PrintWriter)mondrian.olap.CacheControl", cacheControl, 1);
        cacheControl.flushSchema(rolapSchema);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(true, DriverManager.class, "getConnection", "(mondrian.olap.Util$PropertyList,mondrian.spi.CatalogLocator,javax.sql.DataSource)mondrian.olap.Connection", null, 1);
        Mockingbird.setReturnValue(false, map4, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks3() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map2);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map3);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map4);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map4, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map4, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)2), 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map4, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map3, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map4, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks4() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testAfterClearQueriesAndCubesWithAggressiveMocks5() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.afterClearQueriesAndCubes("");
        assertNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testBlockQueryForReadAndReloadWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        String[] strings = new String[0];
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "split", "(java.lang.String)java.lang.String[]", new Object[] {","}, strings, 1);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, Arrays.class, "asList", "(java.lang.Object[])java.util.List", new Object[] {strings}, list, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "clearQueriesAndSlices", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "clearQueriesAndSlices", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(200L)}, null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)3), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)3), 1);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(200L)}, null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.blockQueryForReadAndReload("");
        assertNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
    }
    
    public void testBlockQueryForReadAndReloadWithAggressiveMocks1() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        String[] strings = new String[0];
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InterruptedException interruptedException = (InterruptedException) Mockingbird.getProxyObject(InterruptedException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, "", "split", "(java.lang.String)java.lang.String[]", new Object[] {","}, strings, 1);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(true, Arrays.class, "asList", "(java.lang.Object[])java.util.List", new Object[] {strings}, list, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "clearQueriesAndSlices", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "clearQueriesAndSlices", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(200L)}, null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(200L)}, null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)1), 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)3), 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)3), 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getQueryExecuteStatus", "(java.lang.String)byte", new Byte((byte)0), 1);
        Mockingbird.setException(true, Thread.class, "sleep", "(long)void", new Object[] {new Long(200L)}, interruptedException, 1);
        Mockingbird.setReturnValue(false, interruptedException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.blockQueryForReadAndReload("");
        assertNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
    }
    
    public void testClearCacheWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map2);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map3);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "info", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map2, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, map3, "remove", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.clearCache("");
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testClearExecutingQueryAndCubeWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(QueryMapper.getQueriesPerSlice(inMemoryCube), list);
        Mockingbird.setReturnValue(list.size(), 1);
        SliceListener sliceListener = (SliceListener) Mockingbird.getProxyObject(SliceListener.class);
        Mockingbird.replaceObjectForRecording(SliceListener.class, "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCube)", sliceListener);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        sliceListener.registerQuery(new Long(0L));
        Mockingbird.setNormalReturnForVoid();
        QueryMapper.registerSliceListener(sliceListener, 0L);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), new Long(0L));
        sliceListener.registerQuery(new Long(0L));
        Mockingbird.setNormalReturnForVoid();
        QueryMapper.registerSliceListener(sliceListener, 0L);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        inMemoryCube.setCubeMerged();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.clearExecutingQueryAndCube(inMemoryCube, null);
        assertFalse("inMemoryCubeStore.isSliceListConcurrent()", inMemoryCubeStore.isSliceListConcurrent());
    }
    
    public void testClearExecutingQueryAndCubeWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(QueryMapper.getQueriesPerSlice(inMemoryCube), list2);
        Mockingbird.setReturnValue(list2.size(), -1);
        Mockingbird.setReturnValue(list.add(inMemoryCube), false);
        inMemoryCube.setCubeMerged();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.clearExecutingQueryAndCube(inMemoryCube, list);
        assertFalse("inMemoryCubeStore.isSliceListConcurrent()", inMemoryCubeStore.isSliceListConcurrent());
    }
    
    public void testFindCacheWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.findCache("");
        assertFalse("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testFindCacheWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.findCache("");
        assertFalse("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testFindCacheWithAggressiveMocks2() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.get(0), restructureStore);
        Mockingbird.setReturnValue(restructureStore.isSlicesAvailable(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.findCache("");
        assertFalse("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testFindRestructureStore() throws Throwable {
        InMemoryCubeStore instance = InMemoryCubeStore.getInstance();
        RestructureStore result = instance.findRestructureStore("testInMemoryCubeStoreCubeUniqueName", "testInMemoryCubeStoreRsFolder");
        assertNull("result", result);
        assertEquals("instance.cubeSliceMap.size()", 0, ((Map) getPrivateField(instance, "cubeSliceMap")).size());
    }
    
    public void testFindRestructureStoreWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore3 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.enterNormalMode();
        restructureStore.setFolderName("");
        restructureStore2.setFolderName("");
        restructureStore3.setFolderName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore3);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        RestructureStore result = inMemoryCubeStore.findRestructureStore("", "X");
        assertEquals("result.getFolderName()", "X", result.getFolderName());
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testFindRestructureStoreWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.enterNormalMode();
        restructureStore.setFolderName("");
        restructureStore2.setFolderName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        RestructureStore result = inMemoryCubeStore.findRestructureStore("", "X");
        assertNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testFindRestructureStoreWithAggressiveMocks2() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.enterNormalMode();
        restructureStore.setFolderName("");
        restructureStore2.setFolderName("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        RestructureStore result = (RestructureStore) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "findRestructureStore", new Class[] {List.class, String.class}, inMemoryCubeStore, new Object[] {list, "X"});
        assertNull("result", result);
    }
    
    public void testFlushCache() throws Throwable {
        InMemoryCubeStore instance = InMemoryCubeStore.getInstance();
        instance.flushCache();
        assertEquals("instance.cubeNameAndCubeMap.size()", 0, ((Map) getPrivateField(instance, "cubeNameAndCubeMap")).size());
        assertEquals("instance.queryExecuteStatusMap.size()", 0, ((Map) getPrivateField(instance, "queryExecuteStatusMap")).size());
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("instanceInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertEquals("instance.mapCubeToSchema.size()", 0, ((Map) getPrivateField(instance, "mapCubeToSchema")).size());
        assertEquals("instance.cubeSliceMap.size()", 0, ((Map) getPrivateField(instance, "cubeSliceMap")).size());
    }
    
    public void testGetActiveSliceIdsWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        restructureStore.getActiveSliceIds(arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        restructureStore2.getActiveSliceIds(arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        List result = inMemoryCubeStore.getActiveSliceIds("");
        assertNotNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetActiveSlicesWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.setReturnValue(map.get(""), Mockingbird.getProxyObject(Object.class));
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        restructureStore.getActiveSlices(arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        restructureStore2.getActiveSlices(arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        List result = inMemoryCubeStore.getActiveSlices("");
        assertNotNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetActiveSlicesWithAggressiveMocks1() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "emptyList");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.setReturnValue(map.get(""), null);
        setPrivateField(InMemoryCubeStore.class, "emptyList", null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        List result = inMemoryCubeStore.getActiveSlices("");
        assertNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetCubeNamesWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        String[] strings = new String[0];
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.keySet(), set);
        Mockingbird.setReturnValue(false, set, "toArray", "(java.lang.Object[])java.lang.Object[]", strings, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        String[] result = inMemoryCubeStore.getCubeNames();
        assertEquals("result.length", 0, result.length);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetInstance() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "instance");
        setPrivateField(InMemoryCubeStore.class, "instance", null);
        InMemoryCubeStore result = InMemoryCubeStore.getInstance();
        assertNull("result", result);
    }
    
    public void testGetRolapCubeWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.get(""), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        RolapCube result = inMemoryCubeStore.getRolapCube("");
        assertNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
    }
    
    public void testGetSllicesbyIdsWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        Mockingbird.setReturnValue(map.get(""), list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        restructureStore.getSlicesByIds(null, arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore2);
        restructureStore2.getSlicesByIds(null, arrayList);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        List result = inMemoryCubeStore.getSllicesbyIds("", null);
        assertNotNull("result", result);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetSortedFolderListListWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        File[] result = (File[]) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "getSortedFolderListList", new Class[] {String.class, String.class}, inMemoryCubeStore, new Object[] {"", ""});
        assertNull("result", result);
    }
    
    public void testInformSchemaPublishedWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema2 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapSchema rolapSchema3 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        CacheControl cacheControl = (CacheControl) Mockingbird.getProxyObject(CacheControl.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema4 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        setPrivateField(rolapSchema3, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "connectInfo", null);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), rolapSchema);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), rolapSchema2);
        Mockingbird.setReturnValue(rolapSchema2.getName(), "X");
        CacheControlImpl cacheControlImpl = new CacheControlImpl();
        Mockingbird.replaceObjectForRecording(CacheControlImpl.class, "<init>()", cacheControlImpl);
        Mockingbird.setReturnValue(entry2.getValue(), null);
        cacheControlImpl.flushSchema(null);
        Mockingbird.setNormalReturnForVoid();
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(entry2.getValue(), rolapSchema3);
        Mockingbird.setReturnValue(false, rolapConnection, "getCacheControl", "(java.io.PrintWriter)mondrian.olap.CacheControl", cacheControl, 1);
        cacheControl.flushSchema(rolapSchema3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(rolapSchema3.getName(), "");
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(true, DriverManager.class, "getConnection", "(mondrian.olap.Util$PropertyList,mondrian.spi.CatalogLocator,javax.sql.DataSource)mondrian.olap.Connection", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), rolapSchema4);
        Mockingbird.setReturnValue(rolapSchema4.getName(), "");
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.informSchemaPublished("X");
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
    }
    
    public void testInformSchemaPublishedWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema2 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapSchema rolapSchema3 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        RolapConnection rolapConnection = (RolapConnection) Mockingbird.getProxyObject(RolapConnection.class);
        CacheControl cacheControl = (CacheControl) Mockingbird.getProxyObject(CacheControl.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema4 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Map.Entry entry4 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        RolapSchema rolapSchema5 = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        setPrivateField(rolapSchema3, "internalConnection", rolapConnection);
        setPrivateField(rolapConnection, "connectInfo", null);
        setPrivateField(rolapConnection, "dataSource", null);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getValue(), rolapSchema);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getValue(), rolapSchema2);
        Mockingbird.setReturnValue(rolapSchema2.getName(), "X");
        CacheControlImpl cacheControlImpl = new CacheControlImpl();
        Mockingbird.replaceObjectForRecording(CacheControlImpl.class, "<init>()", cacheControlImpl);
        Mockingbird.setReturnValue(entry2.getValue(), null);
        cacheControlImpl.flushSchema(null);
        Mockingbird.setNormalReturnForVoid();
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(entry2.getValue(), rolapSchema3);
        Mockingbird.setReturnValue(false, rolapConnection, "getCacheControl", "(java.io.PrintWriter)mondrian.olap.CacheControl", cacheControl, 1);
        cacheControl.flushSchema(rolapSchema3);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(rolapSchema3.getName(), "");
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(true, DriverManager.class, "getConnection", "(mondrian.olap.Util$PropertyList,mondrian.spi.CatalogLocator,javax.sql.DataSource)mondrian.olap.Connection", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getValue(), rolapSchema4);
        Mockingbird.setReturnValue(rolapSchema4.getName(), "X");
        CacheControlImpl cacheControlImpl2 = new CacheControlImpl();
        Mockingbird.replaceObjectForRecording(CacheControlImpl.class, "<init>()", cacheControlImpl2);
        Mockingbird.setReturnValue(entry3.getValue(), null);
        cacheControlImpl2.flushSchema(null);
        Mockingbird.setNormalReturnForVoid();
        iterator.remove();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry4);
        Mockingbird.setReturnValue(entry4.getValue(), rolapSchema5);
        Mockingbird.setReturnValue(rolapSchema5.getName(), "");
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.informSchemaPublished("X");
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
    }
    
    public void testIsQueryBlockWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.isQueryBlock("");
        assertFalse("result", result);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
    }
    
    public void testIsQueryBlockWithAggressiveMocks1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)1), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.isQueryBlock("");
        assertTrue("result", result);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
    }
    
    public void testIsQueryBlockWithAggressiveMocks2() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)0), 1);
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)3), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.isQueryBlock("");
        assertTrue("result", result);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
    }
    
    public void testIsQueryWaiting() throws Throwable {
        InMemoryCubeStore instance = InMemoryCubeStore.getInstance();
        instance.blockQueryForReadAndReload("testInMemoryCubeStoreCubeUniqueNames");
        boolean result = instance.isQueryWaiting("testString");
        assertFalse("result", result);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testIsQueryWaitingWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "containsKey", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "setQueryExecuteStatus", "(java.lang.String,byte)void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", new Byte((byte)2), 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.isQueryWaiting("");
        assertTrue("result", result);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
    }
    
    public void testIsSliceListConcurrentWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "SLICE_LIST_CONCURRENT");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        setPrivateField(InMemoryCubeStore.class, "SLICE_LIST_CONCURRENT", Boolean.FALSE);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        boolean result = inMemoryCubeStore.isSliceListConcurrent();
        assertFalse("result", result);
    }
    
    public void testLoadCubeWithAggressiveMocks() throws Throwable {
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map3);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map4);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map2.get(""), null);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        String property = molapProperties.getProperty("molap.storelocation", "../unibi-solutions/system/molap/store");
        Mockingbird.setReturnValue(property, "");
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, null, 1);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(map.put("", rolapCube), null);
        Mockingbird.setReturnValue(map2.put("", (Object) null), null);
        Mockingbird.setReturnValue(false, map3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map4.put("", rolapSchema), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.loadCube(rolapCube);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testLoadCubeWithAggressiveMocks1() throws Throwable {
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File[] files2 = new File[0];
        File[] files3 = new File[2];
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map3);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map4);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", list, 1);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        files[0] = file;
        files[1] = file2;
        files3[0] = file3;
        files3[1] = file4;
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        String property = molapProperties.getProperty("molap.storelocation", "../unibi-solutions/system/molap/store");
        Mockingbird.setReturnValue(property, "");
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getSortedFolderListList", "(java.lang.String,java.lang.String)java.io.File[]", files, 1);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", files2, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.util.List,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", null, 1);
        FileFilter fileFilter2 = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter2);
        Mockingbird.setReturnValue(false, file2, "listFiles", "(java.io.FileFilter)java.io.File[]", files3, 1);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "findRestructureStore", "(java.util.List,java.lang.String)com.huawei.unibi.molap.engine.datastorage.RestructureStore", restructureStore, 1);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "readSliceMetaDataFile", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore, "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(restructureStore.getSlices(""), list2);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, file4, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "readSliceMetaDataFile", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore, "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore, "getSlices", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), inMemoryCube2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.setReturnValue(map.put("", rolapCube), null);
        Mockingbird.setReturnValue(map2.put("", list), null);
        Mockingbird.setReturnValue(false, map3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map4.put("", rolapSchema), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.loadCube(rolapCube);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testLoadCubeWithAggressiveMocks2() throws Throwable {
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        File[] files = new File[1];
        File[] files2 = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File[] files3 = new File[0];
        File[] files4 = new File[2];
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        File[] files5 = new File[0];
        File[] files6 = new File[2];
        File file5 = (File) Mockingbird.getProxyObject(File.class);
        File file6 = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map3);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map4);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        files2[0] = file;
        files2[1] = file2;
        files4[0] = file3;
        files4[1] = file4;
        files6[0] = file5;
        files6[1] = file6;
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        String property = molapProperties.getProperty("molap.storelocation", "../unibi-solutions/system/molap/store");
        Mockingbird.setReturnValue(property, "");
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file7 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file7);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter);
        Mockingbird.setReturnValue(false, file7, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Mockingbird.setReturnValue(false, file7, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getSortedFolderListList", "(java.lang.String,java.lang.String)java.io.File[]", files2, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        FileFilter fileFilter2 = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$3"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$3"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter2);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", files3, 1);
        Mockingbird.replaceObjectForRecording(RestructureStore.class, "<init>()", Mockingbird.getProxyObject(RestructureStore.class));
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        FileFilter fileFilter3 = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$3"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$3"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter3);
        Mockingbird.setReturnValue(false, file2, "listFiles", "(java.io.FileFilter)java.io.File[]", files4, 1);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        Mockingbird.replaceObjectForRecording(RestructureStore.class, "<init>()", restructureStore);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "readSliceMetaDataFile", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore, "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getSortedFolderListList", "(java.lang.String,java.lang.String)java.io.File[]", files5, 1);
        Mockingbird.setReturnValue(false, file4, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "readSliceMetaDataFile", "(java.lang.String)com.huawei.unibi.molap.metadata.SliceMetaData", null, 1);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file4, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCubeStore, "getSortedFolderListList", "(java.lang.String,java.lang.String)java.io.File[]", files6, 1);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube);
        Mockingbird.setReturnValue(false, file5, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube, "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        Mockingbird.replaceObjectForRecording(InMemoryCube.class, "<init>(mondrian.rolap.RolapCube)", inMemoryCube2);
        Mockingbird.setReturnValue(false, file6, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, inMemoryCube2, "loadCacheFromFile", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(RestructureStore.class), "setSlice", "(com.huawei.unibi.molap.engine.datastorage.InMemoryCube,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(map.put("", rolapCube), null);
        Mockingbird.setReturnValue(map2.put("", arrayList), null);
        Mockingbird.setReturnValue(false, map3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map4.put("", rolapSchema), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.loadCube(rolapCube);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testLoadCubeWithAggressiveMocks3() throws Throwable {
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        File[] files = new File[0];
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map3);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map4);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        String property = molapProperties.getProperty("molap.storelocation", "../unibi-solutions/system/molap/store");
        Mockingbird.setReturnValue(property, "");
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(map.put("", rolapCube), null);
        Mockingbird.setReturnValue(map2.put("", (Object) null), null);
        Mockingbird.setReturnValue(false, map3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map4.put("", rolapSchema), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.loadCube(rolapCube);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testLoadCubeWithAggressiveMocks4() throws Throwable {
        storeStaticField(MolapProperties.class, "molapPropertiesInstance");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Map map2 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map3 = (Map) Mockingbird.getProxyObject(Map.class);
        Map map4 = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        MolapMetadata molapMetadata = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapMetadata molapMetadata2 = (MolapMetadata) Mockingbird.getProxyObject(MolapMetadata.class);
        MolapProperties molapProperties = (MolapProperties) Mockingbird.getProxyObject(MolapProperties.class);
        File[] files = new File[0];
        setPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap", map);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map2);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map3);
        setPrivateField(inMemoryCubeStore, "mapCubeToSchema", map4);
        setPrivateField(rolapCube, "name", "");
        setPrivateField(rolapCube, "schema", rolapSchema);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map2, "get", "(java.lang.Object)java.lang.Object", null, 1);
        setPrivateField(MolapProperties.class, "molapPropertiesInstance", molapProperties);
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata);
        Mockingbird.setReturnValue(false, molapMetadata, "removeCube", "(java.lang.String)com.huawei.unibi.molap.metadata.MolapMetadata$Cube", null, 1);
        Mockingbird.setReturnValue(MolapMetadata.getInstance(), molapMetadata2);
        molapMetadata2.loadCube(rolapCube);
        Mockingbird.setNormalReturnForVoid();
        String property = molapProperties.getProperty("molap.storelocation", "../unibi-solutions/system/molap/store");
        Mockingbird.setReturnValue(property, "");
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$1"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(map.put("", rolapCube), null);
        Mockingbird.setReturnValue(map2.put("", (Object) null), null);
        Mockingbird.setReturnValue(false, map3, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(map4.put("", rolapSchema), null);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.loadCube(rolapCube);
        assertNotNull("inMemoryCubeStore.cubeNameAndCubeMap", getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap"));
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.mapCubeToSchema", getPrivateField(inMemoryCubeStore, "mapCubeToSchema"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testReadSliceMetaDataFileWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(FileInputStream.class, "<init>(java.lang.String)", fileNotFoundException);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        SliceMetaData result = (SliceMetaData) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "readSliceMetaDataFile", new Class[] {String.class}, inMemoryCubeStore, new Object[] {""});
        assertNull("result", result);
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
    }
    
    public void testReadSliceMetaDataFileWithAggressiveMocks1() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        ClassNotFoundException classNotFoundException = (ClassNotFoundException) Mockingbird.getProxyObject(ClassNotFoundException.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setException(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, classNotFoundException, 1);
        Mockingbird.setReturnValue(false, logService, "error", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Throwable,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        SliceMetaData result = (SliceMetaData) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "readSliceMetaDataFile", new Class[] {String.class}, inMemoryCubeStore, new Object[] {""});
        assertNull("result", result);
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
    }
    
    public void testRegisterSliceWithAggressiveMocks() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(inMemoryCube, "id", new Long(0L));
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", obj, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.setReturnValue(list.add((Object) null), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.registerSlice(inMemoryCube, null);
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testRegisterSliceWithAggressiveMocks1() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCube, "cubeUniqueName", "");
        setPrivateField(inMemoryCube, "id", new Long(0L));
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", new Object[] {null}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.registerSlice(inMemoryCube, null);
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testSwitchAfterRestructureDataWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(inMemoryCubeStore, "queryExecuteStatusMap", map);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        Mockingbird.setReturnValue(false, map, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.switchAfterRestructureData((List) list);
        assertNotNull("inMemoryCubeStore.queryExecuteStatusMap", getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap"));
    }
    
    public void testSwitchAfterRestructureSchema() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "<init>", new Class[] {}, null, new Object[] {});
        List cubeUniqueNames = new ArrayList(100);
        cubeUniqueNames.add("");
        inMemoryCubeStore.switchAfterRestructureSchema(cubeUniqueNames);
        assertEquals("inMemoryCubeStore.queryExecuteStatusMap.size()", 1, ((Map) getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap")).size());
        assertEquals("inMemoryCubeStore.queryExecuteStatusMap.get(\"\")", new Byte((byte)1), ((Map) getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap")).get(""));
    }
    
    public void testSwitchAfterRestructureSchema1() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "<init>", new Class[] {}, null, new Object[] {});
        List cubeUniqueNames = new ArrayList(100);
        inMemoryCubeStore.switchAfterRestructureSchema(cubeUniqueNames);
        assertEquals("inMemoryCubeStore.queryExecuteStatusMap.size()", 0, ((Map) getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap")).size());
        assertEquals("(ArrayList) cubeUniqueNames.size()", 0, cubeUniqueNames.size());
    }
    
    public void testUnRegisterSliceWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.unRegisterSlice(null, null);
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testUnRegisterSliceWithAggressiveMocks1() throws Throwable {
        storeStaticField(InMemoryCubeStore.class, "LOGGER");
        storeStaticField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG");
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        LogService logService = (LogService) Mockingbird.getProxyObject(LogService.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(inMemoryCube, "id", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        setPrivateField(InMemoryCubeStore.class, "LOGGER", logService);
        setPrivateField(MolapEngineLogEvent.class, "UNIBI_MOLAPENGINE_MSG", null);
        Mockingbird.setReturnValue(list.remove(inMemoryCube), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logService, "debug", "(com.huawei.iweb.platform.logging.LogEvent,java.lang.Object[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.unRegisterSlice("", inMemoryCube);
        assertNotNull("inMemoryCubeStoreInMemoryCubeStore.LOGGER", getPrivateField(InMemoryCubeStore.class, "LOGGER"));
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testUnRegisterSliceWithAggressiveMocks2() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.unRegisterSlice("", null);
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testUpdateCubeWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File[] files2 = new File[0];
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        File[] files3 = new File[2];
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        RestructureStore restructureStore2 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore3 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        RestructureStore restructureStore4 = (RestructureStore) Mockingbird.getProxyObject(RestructureStore.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        InMemoryCube inMemoryCube = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        InMemoryCube inMemoryCube2 = (InMemoryCube) Mockingbird.getProxyObject(InMemoryCube.class);
        setPrivateField(inMemoryCubeStore, "cubeSliceMap", map);
        setPrivateField(rolapCube, "schema", rolapSchema);
        setPrivateField(rolapCube, "name", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapSchema.getName(), "");
        files[0] = file;
        files[1] = file2;
        Mockingbird.enterNormalMode();
        restructureStore.setFolderName("");
        files3[0] = file3;
        files3[1] = file4;
        restructureStore2.setFolderName("");
        restructureStore3.setFolderName("");
        restructureStore4.setFolderName("X");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, map, "get", "(java.lang.Object)java.lang.Object", list, 1);
        File file5 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file5);
        Mockingbird.setReturnValue(false, file5, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        FileFilter fileFilter = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$4"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$4"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore,java.lang.String)", fileFilter);
        Mockingbird.setReturnValue(false, file5, "listFiles", "(java.io.FileFilter)java.io.File[]", new Object[] {fileFilter}, files, 1);
        Comparator comparator = (Comparator) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$5"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$5"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", comparator);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(java.lang.Object[],java.util.Comparator)void", new Object[] {files, comparator}, null, 1);
        FileFilter fileFilter2 = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter2);
        Mockingbird.setReturnValue(false, file, "listFiles", "(java.io.FileFilter)java.io.File[]", files2, 1);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), restructureStore);
        FileFilter fileFilter3 = (FileFilter) Mockingbird.getProxyObject(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"));
        Mockingbird.replaceObjectForRecording(Class.forName("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore$2"), "<init>(com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore)", fileFilter3);
        Mockingbird.setReturnValue(false, file2, "listFiles", "(java.io.FileFilter)java.io.File[]", files3, 1);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", "X", 1);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), restructureStore2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), restructureStore3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), restructureStore4);
        Mockingbird.setReturnValue(false, file3, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setReturnValue(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore4, "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore4, "getSlices", "(java.lang.String)java.util.List", list2, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(false, file4, "getAbsolutePath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream2 = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream2);
        Mockingbird.setReturnValue(false, objectInputStream2, "readObject", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore4, "setSliceMetaCache", "(com.huawei.unibi.molap.metadata.SliceMetaData,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, restructureStore4, "getSlices", "(java.lang.String)java.util.List", list3, 1);
        Mockingbird.setReturnValue(list3.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), inMemoryCube);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), inMemoryCube2);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        inMemoryCubeStore.updateCube(rolapCube, "");
        boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
        assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        assertNotNull("inMemoryCubeStore.cubeSliceMap", getPrivateField(inMemoryCubeStore, "cubeSliceMap"));
    }
    
    public void testGetActiveSliceIdsThrowsNullPointerException() throws Throwable {
        InMemoryCubeStore instance = InMemoryCubeStore.getInstance();
        try {
            instance.getActiveSliceIds("testInMemoryCubeStoreCubeUniqueName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryCubeStore.class, ex);
            assertEquals("instance.cubeSliceMap.size()", 0, ((Map) getPrivateField(instance, "cubeSliceMap")).size());
        }
    }
    
    public void testLoadCubeThrowsMondrianException() throws Throwable {
        InMemoryCubeStore privateField = (InMemoryCubeStore) getPrivateField(InMemoryCubeStore.class, "instance");
        RolapCube rolapCube = (RolapCube) Mockingbird.getProxyObject(RolapCube.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(rolapCube.getName(), "");
        Mockingbird.setReturnValue(rolapCube.getName(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(HashMap.class), "get", "(java.lang.Object)java.lang.Object", null, 1);
        RolapSchema rolapSchema = (RolapSchema) Mockingbird.getProxyObject(RolapSchema.class);
        Mockingbird.setReturnValue(rolapCube.getSchema(), rolapSchema);
        Mockingbird.setException(rolapSchema.getName(), (Throwable) Mockingbird.getProxyObject(MondrianException.class));
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        try {
            privateField.loadCube(rolapCube);
            fail("Expected MondrianException to be thrown");
        } catch (MondrianException ex) {
            assertFalse("privateField.isSliceListConcurrent()", privateField.isSliceListConcurrent());
        }
    }
    
    public void testLoadCubeThrowsNullPointerException() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "<init>", new Class[] {}, null, new Object[] {});
        try {
            inMemoryCubeStore.loadCube(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryCubeStore.class, ex);
            assertEquals("inMemoryCubeStore.cubeSliceMap.size()", 0, ((Map) getPrivateField(inMemoryCubeStore, "cubeSliceMap")).size());
            assertEquals("inMemoryCubeStore.cubeNameAndCubeMap.size()", 0, ((Map) getPrivateField(inMemoryCubeStore, "cubeNameAndCubeMap")).size());
            assertEquals("inMemoryCubeStore.queryExecuteStatusMap.size()", 0, ((Map) getPrivateField(inMemoryCubeStore, "queryExecuteStatusMap")).size());
            boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
            assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
            assertEquals("inMemoryCubeStore.mapCubeToSchema.size()", 0, ((Map) getPrivateField(inMemoryCubeStore, "mapCubeToSchema")).size());
        }
    }
    
    public void testReadSliceMetaDataFileThrowsThrowableWithAggressiveMocks() throws Throwable {
        InMemoryCubeStore inMemoryCubeStore = (InMemoryCubeStore) Mockingbird.getProxyObject(InMemoryCubeStore.class, true);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileInputStream.class));
        ObjectInputStream objectInputStream = (ObjectInputStream) Mockingbird.getProxyObject(ObjectInputStream.class);
        Mockingbird.replaceObjectForRecording(ObjectInputStream.class, "<init>(java.io.InputStream)", objectInputStream);
        Mockingbird.setReturnValue(false, objectInputStream, "readObject", "()java.lang.Object", new Object[] {}, obj, 1);
        Mockingbird.setReturnValue(true, MolapUtil.class, "closeStreams", "(java.io.Closeable[])void", null, 1);
        Mockingbird.enterTestMode(InMemoryCubeStore.class);
        try {
            callPrivateMethod("com.huawei.unibi.molap.engine.datastorage.InMemoryCubeStore", "readSliceMetaDataFile", new Class[] {String.class}, inMemoryCubeStore, new Object[] {""});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(InMemoryCubeStore.class, ex);
            boolean actual = ((LogService) getPrivateField(InMemoryCubeStore.class, "LOGGER")).isDebugEnabled();
            assertTrue("inMemoryCubeStoreInMemoryCubeStore.LOGGER.isDebugEnabled()", actual);
        }
    }
    
    public void testSwitchAfterRestructureSchemaThrowsNullPointerException() throws Throwable {
        try {
            InMemoryCubeStore.getInstance().switchAfterRestructureSchema(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(InMemoryCubeStore.class, ex);
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
}

