/**
 * Generated by Agitar build: AgitarOne Version 5.3.0.000022 (Build date: Jan 04, 2012) [5.3.0.000022]
 * JDK Version: 1.6.0_14
 *
 * Generated on 29 Jul, 2013 5:07:52 PM
 * Time to generate: 00:20.259 seconds
 *
 */

package com.huawei.unibi.molap.engine.scanner.impl;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.unibi.molap.datastorage.store.FileHolder;
import com.huawei.unibi.molap.datastorage.store.impl.FileHolderImpl;
import com.huawei.unibi.molap.engine.datastorage.DataStore;
import com.huawei.unibi.molap.engine.datastorage.DataStoreBlock;
import com.huawei.unibi.molap.engine.datastorage.tree.CSBInternalNode;
import com.huawei.unibi.molap.engine.datastorage.tree.CSBTree;
import com.huawei.unibi.molap.engine.scanner.BTreeScanner;
import com.huawei.unibi.molap.keygenerator.KeyGenerator;
import com.huawei.unibi.molap.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;

public class NonFilterTreeScannerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NonFilterTreeScanner.class;
    }
    
    public void testConstructor() throws Throwable {
        byte[] endKey = new byte[2];
        int[] lens = new int[1];
        KeyGenerator keyGenerator = new MultiDimKeyVarLengthGenerator(lens);
        KeyValue currKey = new KeyValue();
        FileHolder fileHolder = new FileHolderImpl();
        byte[] startKey = new byte[3];
        NonFilterTreeScanner nonFilterTreeScanner = new NonFilterTreeScanner(startKey, endKey, keyGenerator, currKey, lens, fileHolder);
        assertSame("nonFilterTreeScanner.getFileHolder()", fileHolder, nonFilterTreeScanner.getFileHolder());
        assertEquals("nonFilterTreeScanner.blockKeys", 0, ((Number) getPrivateField(nonFilterTreeScanner, "blockKeys")).intValue());
        assertSame("nonFilterTreeScanner.getNext()", currKey, nonFilterTreeScanner.getNext());
        assertSame("nonFilterTreeScanner.msrs", lens, getPrivateField(nonFilterTreeScanner, "msrs"));
        assertEquals("nonFilterTreeScanner.index", -1, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
        assertSame("nonFilterTreeScanner.endKey", endKey, getPrivateField(nonFilterTreeScanner, "endKey"));
        assertSame("nonFilterTreeScanner.keyGenerator", keyGenerator, getPrivateField(nonFilterTreeScanner, "keyGenerator"));
    }
    
    public void testHasNext() throws Throwable {
        int[] lens = new int[1];
        DataStore dataStore = new CSBTree(new MultiDimKeyVarLengthGenerator(lens), 100, "testNonFilterTreeScannerTableName", true);
        byte[] startKey = new byte[2];
        byte[] endKey = new byte[2];
        int[] msrs = new int[3];
        int[] lens2 = new int[0];
        NonFilterTreeScanner nonFilterTreeScanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens2), new KeyValue(), msrs, new FileHolderImpl());
        nonFilterTreeScanner.setDataStore(dataStore, new CSBInternalNode(100, 1000, "testNonFilterTreeScannerTableName"), 100);
        boolean result = nonFilterTreeScanner.hasNext();
        assertFalse("result", result);
        assertEquals("nonFilterTreeScanner.index", 0, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
        assertNull("nonFilterTreeScanner.block", getPrivateField(nonFilterTreeScanner, "block"));
    }
    
    public void testHasNext1() throws Throwable {
        byte[] startKey = new byte[0];
        byte[] endKey = new byte[0];
        MultiDimKeyVarLengthGenerator keyGenerator = (MultiDimKeyVarLengthGenerator) Mockingbird.getProxyObject(MultiDimKeyVarLengthGenerator.class);
        KeyValue currKey = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        int[] msrs = new int[0];
        FileHolderImpl fileHolder = (FileHolderImpl) Mockingbird.getProxyObject(FileHolderImpl.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(keyGenerator.getKeySizeInBytes(), 0);
        currKey.setKeyLength(0);
        Mockingbird.setNormalReturnForVoid();
        currKey.setMsrCols(msrs);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(NonFilterTreeScanner.class);
        NonFilterTreeScanner nonFilterTreeScanner = new NonFilterTreeScanner(startKey, endKey, keyGenerator, currKey, msrs, fileHolder);
        CSBTree dataStore = (CSBTree) Mockingbird.getProxyObject(CSBTree.class);
        CSBInternalNode block = (CSBInternalNode) Mockingbird.getProxyObject(CSBInternalNode.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(block.getnKeys(), 0);
        currKey.setBlock(block, fileHolder);
        Mockingbird.setNormalReturnForVoid();
        currKey.reset();
        Mockingbird.setNormalReturnForVoid();
        currKey.setRow(-2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(block.getValueSize(), (short)0);
        currKey.setValueLength((short)0);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(NonFilterTreeScanner.class);
        nonFilterTreeScanner.setDataStore(dataStore, block, -2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(currKey.isReset(), true);
        currKey.setReset(false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(NonFilterTreeScanner.class);
        boolean result = nonFilterTreeScanner.hasNext();
        assertTrue("result", result);
        assertSame("nonFilterTreeScanner.getNext()", currKey, nonFilterTreeScanner.getNext());
        assertEquals("nonFilterTreeScanner.index", -1, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
    }
    
    public void testHasNext2() throws Throwable {
        int[] lens = new int[2];
        int[] msrs = new int[1];
        byte[] startKey = new byte[3];
        byte[] endKey = new byte[3];
        NonFilterTreeScanner nonFilterTreeScanner = new NonFilterTreeScanner(startKey, endKey, new MultiDimKeyVarLengthGenerator(lens), new KeyValue(), msrs, new FileHolderImpl());
        boolean result = nonFilterTreeScanner.hasNext();
        assertFalse("result", result);
        assertEquals("nonFilterTreeScanner.index", -1, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
    }
    
    public void testHasNextWithAggressiveMocks() throws Throwable {
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class, true);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        setPrivateField(nonFilterTreeScanner, "block", Mockingbird.getProxyObject(DataStoreBlock.class));
        setPrivateField(nonFilterTreeScanner, "blockKeys", new Integer(0));
        setPrivateField(nonFilterTreeScanner, "currKey", keyValue);
        setPrivateField(nonFilterTreeScanner, "index", new Integer(0));
        keyValue.setReset(false);
        Mockingbird.enterRecordingMode();
        keyValue.increment();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(NonFilterTreeScanner.class);
        boolean result = nonFilterTreeScanner.hasNext();
        assertTrue("result", result);
        assertNull("nonFilterTreeScanner.getNext().getArray()", nonFilterTreeScanner.getNext().getArray());
        assertEquals("nonFilterTreeScanner.blockKeys", 0, ((Number) getPrivateField(nonFilterTreeScanner, "blockKeys")).intValue());
        assertEquals("nonFilterTreeScanner.index", 1, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
        assertNotNull("nonFilterTreeScanner.block", getPrivateField(nonFilterTreeScanner, "block"));
    }
    
    public void testHasNextWithAggressiveMocks1() throws Throwable {
        NonFilterTreeScanner nonFilterTreeScanner = (NonFilterTreeScanner) Mockingbird.getProxyObject(NonFilterTreeScanner.class, true);
        DataStoreBlock dataStoreBlock = (DataStoreBlock) Mockingbird.getProxyObject(DataStoreBlock.class);
        KeyValue keyValue = (KeyValue) Mockingbird.getProxyObject(KeyValue.class);
        DataStoreBlock dataStoreBlock2 = (DataStoreBlock) Mockingbird.getProxyObject(DataStoreBlock.class);
        setPrivateField(nonFilterTreeScanner, "index", new Integer(1));
        setPrivateField(nonFilterTreeScanner, "blockKeys", new Integer(0));
        setPrivateField(nonFilterTreeScanner, "block", dataStoreBlock);
        setPrivateField(nonFilterTreeScanner, "currKey", keyValue);
        setPrivateField(nonFilterTreeScanner, "fileHolder", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataStoreBlock.getNext(), dataStoreBlock2);
        Mockingbird.setReturnValue(dataStoreBlock2.getnKeys(), 1);
        Mockingbird.setReturnValue(false, keyValue, "setBlock", "(com.huawei.unibi.molap.engine.datastorage.DataStoreBlock,com.huawei.unibi.molap.datastorage.store.FileHolder)void", null, 1);
        Mockingbird.setReturnValue(false, keyValue, "resetOffsets", "()void", null, 1);
        Mockingbird.enterTestMode(NonFilterTreeScanner.class);
        boolean result = nonFilterTreeScanner.hasNext();
        assertTrue("result", result);
        assertNull("nonFilterTreeScanner.getNext().getArray()", nonFilterTreeScanner.getNext().getArray());
        assertEquals("nonFilterTreeScanner.blockKeys", 0, ((Number) getPrivateField(nonFilterTreeScanner, "blockKeys")).intValue());
        assertEquals("nonFilterTreeScanner.index", 1, ((Number) getPrivateField(nonFilterTreeScanner, "index")).intValue());
        assertNotNull("nonFilterTreeScanner.block", getPrivateField(nonFilterTreeScanner, "block"));
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        byte[] startKey = new byte[2];
        int[] msrs = new int[2];
        KeyValue currKey = new KeyValue();
        byte[] endKey = new byte[0];
        try {
            new NonFilterTreeScanner(startKey, endKey, null, currKey, msrs, new FileHolderImpl());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BTreeScanner.class, ex);
        }
    }
}

